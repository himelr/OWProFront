/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 49);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar bind = __webpack_require__(11);\nvar isBuffer = __webpack_require__(58);\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object' && !isArray(obj)) {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(24);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2luZGV4LmpzPzQzMDciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzP2RhMDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0Esd0NBQXdDLGdCQUFnQjtBQUN4RCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuKi9cclxuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgbGlzdCA9IFtdO1xyXG5cclxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXHJcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSB0aGlzW2ldO1xyXG5cdFx0XHRpZihpdGVtWzJdKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBpdGVtWzFdICsgXCJ9XCIpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGl0ZW1bMV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XHJcblx0fTtcclxuXHJcblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcclxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XHJcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcclxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xyXG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XHJcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcclxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XHJcblx0XHR9XHJcblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcclxuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxyXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xyXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxyXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxyXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xyXG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcclxuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xyXG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XHJcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0cmV0dXJuIGxpc3Q7XHJcbn07XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

eval("/* globals __VUE_SSR_CONTEXT__ */\n\n// this module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzP2Q0ZjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyB0aGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICByYXdTY3JpcHRFeHBvcnRzLFxuICBjb21waWxlZFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIgLyogc2VydmVyIG9ubHkgKi9cbikge1xuICB2YXIgZXNNb2R1bGVcbiAgdmFyIHNjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cyB8fCB7fVxuXG4gIC8vIEVTNiBtb2R1bGVzIGludGVyb3BcbiAgdmFyIHR5cGUgPSB0eXBlb2YgcmF3U2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIGlmICh0eXBlID09PSAnb2JqZWN0JyB8fCB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXNNb2R1bGUgPSByYXdTY3JpcHRFeHBvcnRzXG4gICAgc2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICB9XG5cbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChjb21waWxlZFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBjb21waWxlZFRlbXBsYXRlLnJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gY29tcGlsZWRUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnNcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9IHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIHZhciBmdW5jdGlvbmFsID0gb3B0aW9ucy5mdW5jdGlvbmFsXG4gICAgdmFyIGV4aXN0aW5nID0gZnVuY3Rpb25hbFxuICAgICAgPyBvcHRpb25zLnJlbmRlclxuICAgICAgOiBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgIGlmICghZnVuY3Rpb25hbCkge1xuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlc01vZHVsZTogZXNNb2R1bGUsXG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplci5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = __webpack_require__(75)\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction) {\n  isProduction = _isProduction\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[data-vue-ssr-id~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nvar utils = __webpack_require__(0);\nvar normalizeHeaderName = __webpack_require__(38);\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = __webpack_require__(7);\n  } else if (typeof process !== 'undefined') {\n    // For node use HTTP adapter\n    adapter = __webpack_require__(7);\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9kZWZhdWx0cy5qcz8xMmNiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIrQ0FBQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxZQUFZO0FBQ25CO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2RlZmF1bHRzLmpzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nvar utils = __webpack_require__(0);\nvar settle = __webpack_require__(30);\nvar buildURL = __webpack_require__(33);\nvar parseHeaders = __webpack_require__(39);\nvar isURLSameOrigin = __webpack_require__(37);\nvar createError = __webpack_require__(10);\nvar btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(32);\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n    var loadEvent = 'onreadystatechange';\n    var xDomain = false;\n\n    // For IE 8/9 CORS support\n    // Only supports POST and GET calls and doesn't returns the response headers.\n    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.\n    if (process.env.NODE_ENV !== 'test' &&\n        typeof window !== 'undefined' &&\n        window.XDomainRequest && !('withCredentials' in request) &&\n        !isURLSameOrigin(config.url)) {\n      request = new window.XDomainRequest();\n      loadEvent = 'onload';\n      xDomain = true;\n      request.onprogress = function handleProgress() {};\n      request.ontimeout = function handleTimeout() {};\n    }\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request[loadEvent] = function handleLoad() {\n      if (!request || (request.readyState !== 4 && !xDomain)) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)\n        status: request.status === 1223 ? 204 : request.status,\n        statusText: request.status === 1223 ? 'No Content' : request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = __webpack_require__(35);\n\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?\n          cookies.read(config.xsrfCookieName) :\n          undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (config.withCredentials) {\n      request.withCredentials = true;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzPzNhZGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanM/ZjI3MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0EiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanNcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar enhanceError = __webpack_require__(29);\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzP2Y3NzciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanNcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanM/NWNkZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsaUJBQWlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qc1xuLy8gbW9kdWxlIGlkID0gMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(70)\n}\nvar Component = __webpack_require__(3)(\n  /* script */\n  __webpack_require__(46),\n  /* template */\n  __webpack_require__(62),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  \"data-v-48d3fbf9\",\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"C:\\\\Users\\\\Himel\\\\Documents\\\\NetBeansProjects\\\\MooseBeat\\\\src\\\\components\\\\register.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] register.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-48d3fbf9\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-48d3fbf9\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9yZWdpc3Rlci52dWU/M2QzMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSx3QkFBNkw7QUFDN0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUFzSDtBQUN0SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLHNEQUFzRCxJQUFJO0FBQ3pJLG1DQUFtQzs7QUFFbkM7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkaXNwb3NlZCA9IGZhbHNlXG5mdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICBpZiAoZGlzcG9zZWQpIHJldHVyblxuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNDhkM2ZiZjlcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vcmVnaXN0ZXIudnVlXCIpXG59XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9yZWdpc3Rlci52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTQ4ZDNmYmY5XFxcIixcXFwiaGFzU2NvcGVkXFxcIjp0cnVlfSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vcmVnaXN0ZXIudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgaW5qZWN0U3R5bGUsXG4gIC8qIHNjb3BlSWQgKi9cbiAgXCJkYXRhLXYtNDhkM2ZiZjlcIixcbiAgLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG4gIG51bGxcbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiQzpcXFxcVXNlcnNcXFxcSGltZWxcXFxcRG9jdW1lbnRzXFxcXE5ldEJlYW5zUHJvamVjdHNcXFxcTW9vc2VCZWF0XFxcXHNyY1xcXFxjb21wb25lbnRzXFxcXHJlZ2lzdGVyLnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5LnN1YnN0cigwLCAyKSAhPT0gXCJfX1wifSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5pZiAoQ29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gcmVnaXN0ZXIudnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0ZW1wbGF0ZXMsIHRoZXkgc2hvdWxkIHVzZSByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTQ4ZDNmYmY5XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtNDhkM2ZiZjlcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL3JlZ2lzdGVyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * Register and event to listen on specified element once.\n * @param {Element} element to listen on\n * @param {String} event to listen for\n * @param {Function} callback when event fires\n */\n\n// Production steps of ECMA-262, Edition 6, 22.1.2.1\n// es6-ified by @alexsasharegan\nif (!Array.from) {\n    Array.from = function () {\n        var toStr = Object.prototype.toString;\n        var isCallable = function isCallable(fn) {\n            return typeof fn === \"function\" || toStr.call(fn) === \"[object Function]\";\n        };\n        var toInteger = function toInteger(value) {\n            var number = Number(value);\n            if (isNaN(number)) {\n                return 0;\n            }\n            if (number === 0 || !isFinite(number)) {\n                return number;\n            }\n            return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n        };\n        var maxSafeInteger = Math.pow(2, 53) - 1;\n        var toLength = function toLength(value) {\n            return Math.min(Math.max(toInteger(value), 0), maxSafeInteger);\n        };\n\n        // The length property of the from method is 1.\n        return function from(arrayLike /*, mapFn, thisArg */) {\n            // 1. Let C be the this value.\n            var C = this;\n\n            // 2. Let items be ToObject(arrayLike).\n            var items = Object(arrayLike);\n\n            // 3. ReturnIfAbrupt(items).\n            if (arrayLike == null) {\n                throw new TypeError(\"Array.from requires an array-like object - not null or undefined\");\n            }\n\n            // 4. If mapfn is undefined, then let mapping be false.\n            var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n            var T = void 0;\n\n            if (typeof mapFn !== \"undefined\") {\n                // 5. else\n                // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n                if (!isCallable(mapFn)) {\n                    throw new TypeError(\"Array.from: when provided, the second argument must be a function\");\n                }\n\n                // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n                if (arguments.length > 2) {\n                    T = arguments[2];\n                }\n            }\n\n            // 10. Let lenValue be Get(items, \"length\").\n            // 11. Let len be ToLength(lenValue).\n            var len = toLength(items.length);\n\n            // 13. If IsConstructor(C) is true, then\n            // 13. a. Let A be the result of calling the [[Construct]] internal method\n            // of C with an argument list containing the single item len.\n            // 14. a. Else, Let A be ArrayCreate(len).\n            var A = isCallable(C) ? Object(new C(len)) : new Array(len);\n\n            // 16. Let k be 0.\n            var k = 0;\n            // 17. Repeat, while k < len… (also steps a - h)\n            var kValue = void 0;\n            while (k < len) {\n                kValue = items[k];\n                if (mapFn) {\n                    A[k] = typeof T === \"undefined\" ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n                } else {\n                    A[k] = kValue;\n                }\n                k += 1;\n            }\n            // 18. Let putStatus be Put(A, \"length\", len, true).\n            A.length = len;\n            // 20. Return A.\n            return A;\n        };\n    }();\n}\n\n// https://tc39.github.io/ecma262/#sec-array.prototype.find\n// Needed for IE support\nif (!Array.prototype.find) {\n    Object.defineProperty(Array.prototype, 'find', {\n        value: function value(predicate) {\n            // 1. Let O be ? ToObject(this value).\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n            if (typeof predicate !== 'function') {\n                throw new TypeError('predicate must be a function');\n            }\n\n            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n            var thisArg = arguments[1];\n\n            // 5. Let k be 0.\n            var k = 0;\n\n            // 6. Repeat, while k < len\n            while (k < len) {\n                // a. Let Pk be ! ToString(k).\n                // b. Let kValue be ? Get(O, Pk).\n                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n                // d. If testResult is true, return kValue.\n                var kValue = o[k];\n                if (predicate.call(thisArg, kValue, k, o)) {\n                    return kValue;\n                }\n                // e. Increase k by 1.\n                k++;\n            }\n\n            // 7. Return undefined.\n            return undefined;\n        }\n    });\n}\n\nif (!Array.isArray) {\n    Array.isArray = function (arg) {\n        return Object.prototype.toString.call(arg) === \"[object Array]\";\n    };\n}\n\n// Static\nvar from = Array.from;\nvar isArray = Array.isArray;\n\n// Instance\nvar arrayIncludes = function arrayIncludes(array, value) {\n    return array.indexOf(value) !== -1;\n};\n\nfunction concat() {\n    return Array.prototype.concat.apply([], arguments);\n}\n\n/**\n * Aliasing Object[method] allows the minifier to shorten methods to a single character variable,\n * as well as giving BV a chance to inject polyfills.\n * As long as we avoid\n * - import * as Object from \"utils/object\"\n * all unused exports should be removed by tree-shaking.\n */\n\n// @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nif (typeof Object.assign != \"function\") {\n    Object.assign = function (target, varArgs) {\n        // .length of function is 2\n\n        if (target == null) {\n            // TypeError if undefined or null\n            throw new TypeError(\"Cannot convert undefined or null to object\");\n        }\n\n        var to = Object(target);\n\n        for (var index = 1; index < arguments.length; index++) {\n            var nextSource = arguments[index];\n\n            if (nextSource != null) {\n                // Skip over if undefined or null\n                for (var nextKey in nextSource) {\n                    // Avoid bugs when hasOwnProperty is shadowed\n                    if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                        to[nextKey] = nextSource[nextKey];\n                    }\n                }\n            }\n        }\n        return to;\n    };\n}\n\n// @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Polyfill\nif (!Object.is) {\n    Object.is = function (x, y) {\n        // SameValue algorithm\n        if (x === y) {\n            // Steps 1-5, 7-10\n            // Steps 6.b-6.e: +0 != -0\n            return x !== 0 || 1 / x === 1 / y;\n        } else {\n            // Step 6.a: NaN == NaN\n            return x !== x && y !== y;\n        }\n    };\n}\n\nvar assign = Object.assign;\n\nvar keys = Object.keys;\nvar defineProperties = Object.defineProperties;\nvar defineProperty = Object.defineProperty;\n\n\n\n\nvar create = Object.create;\n\n\n\nfunction readonlyDescriptor() {\n    return { enumerable: true, configurable: false, writable: false };\n}\n\n/*\n * Element closest polyfill, if needed\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n * Returns null of not found\n */\nif (typeof document !== \"undefined\" && window.Element && !Element.prototype.closest) {\n    Element.prototype.closest = function (s) {\n        var matches = (this.document || this.ownerDocument).querySelectorAll(s);\n        var el = this;\n        var i = void 0;\n        do {\n            i = matches.length;\n            // eslint-disable-next-line no-empty\n            while (--i >= 0 && matches.item(i) !== el) {}\n        } while (i < 0 && (el = el.parentElement));\n        return el;\n    };\n}\n\n/*\n * Element.matches polyfill, if needed\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n * Returns true or false\n */\nif (typeof document !== \"undefined\" && window.Element && !Element.prototype.matches) {\n    var proto = Element.prototype;\n    proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector || function (s) {\n        var matches = (this.document || this.ownerDocument).querySelectorAll(s);\n        var i = matches.length;\n        // eslint-disable-next-line no-empty\n        while (--i >= 0 && matches.item(i) !== this) {}\n        return i > -1;\n    };\n}\n\nvar dom = {};\n\n// Determine if an element is an HTML Element\ndom.isElement = function (el) {\n    return el && el.nodeType === Node.ELEMENT_NODE;\n};\n\n// Determine if an HTML element is visible - Faster than CSS check\ndom.isVisible = function (el) {\n    return dom.isElement(el) && document.body.contains(el) && (el.offsetParent !== null || el.offsetWidth > 0 || el.offsetHeight > 0);\n};\n\n// Determine if an element is disabled\ndom.isDisabled = function (el) {\n    return !dom.isElement(el) || el.disabled || el.classList.contains('disabled') || Boolean(el.getAttribute('disabled'));\n};\n\n// Cause/wait-for an element to reflow it's content (adjusting it's height/width)\ndom.reflow = function (el) {\n    // requsting an elements offsetHight will trigger a reflow of the element content\n    return dom.isElement(el) && el.offsetHeight;\n};\n\n// Select all elements matching selector. Returns [] if none found\ndom.selectAll = function (selector, root) {\n    if (!dom.isElement(root)) {\n        root = document;\n    }\n    return from(root.querySelectorAll(selector));\n};\n\n// Select a single element, returns null if not found\ndom.select = function (selector, root) {\n    if (!dom.isElement(root)) {\n        root = document;\n    }\n    return root.querySelector(selector) || null;\n};\n\n// Finds closest element matching selector. Returns null if not found\ndom.closest = function (selector, root) {\n    if (!dom.isElement(root)) {\n        return null;\n    }\n    var el = root.closest(selector);\n    return el === root ? null : el;\n};\n\n// Get an element given an ID\ndom.getById = function (id) {\n    return document.getElementById(/^#/.test(id) ? id.slice(1) : id) || null;\n};\n\n// Add a class to an element\ndom.addClass = function (el, className) {\n    if (className && dom.isElement(el)) {\n        el.classList.add(className);\n    }\n};\n\n// Remove a class from an element\ndom.removeClass = function (el, className) {\n    if (className && dom.isElement(el)) {\n        el.classList.remove(className);\n    }\n};\n\n// Test if an element has a class\ndom.hasClass = function (el, className) {\n    if (className && dom.isElement(el)) {\n        return el.classList.contains(className);\n    }\n    return false;\n};\n\n// Determine if an element matches a selector\ndom.matches = function (el, selector) {\n    if (!dom.isElement(el)) {\n        return false;\n    }\n    return el.matches(selector);\n};\n\n// Set an attribute on an element\ndom.setAttr = function (el, attr, value) {\n    if (attr && dom.isElement(el)) {\n        el.setAttribute(attr, value);\n    }\n};\n\n// Remove an attribute from an element\ndom.removeAttr = function (el, attr) {\n    if (attr && dom.isElement(el)) {\n        el.removeAttribute(attr);\n    }\n};\n\n// Get an attribute value from an element (returns null if not found)\ndom.getAttr = function (el, attr) {\n    if (attr && dom.isElement(el)) {\n        return el.getAttribute(attr);\n    }\n    return null;\n};\n\n// Retur nteh Bounding Client Rec of an element. Retruns null if not an element\ndom.getBCR = function (el) {\n    return dom.isElement(el) ? el.getBoundingClientRect() : null;\n};\n\n// Get computed style object for an element\ndom.getCS = function (el) {\n    return dom.isElement(el) ? window.getComputedStyle(el) : {};\n};\n\n// Return an element's offset wrt document element\n// https://j11y.io/jquery/#v=git&fn=jQuery.fn.offset\ndom.offset = function (el) {\n    if (dom.isElement(el)) {\n        if (!el.getClientRects().length) {\n            return { top: 0, left: 0 };\n        }\n        var bcr = dom.getBCR(el);\n        var win = el.ownerDocument.defaultView;\n        return {\n            top: bcr.top + win.pageYOffset,\n            left: bcr.left + win.pageXOffset\n        };\n    }\n};\n\n// Return an element's offset wrt to it's offsetParent\n// https://j11y.io/jquery/#v=git&fn=jQuery.fn.position\ndom.position = function (el) {\n    if (!dom.isElement(el)) {\n        return;\n    }\n    var parentOffset = { top: 0, left: 0 };\n    var offset = void 0;\n    var offsetParent = void 0;\n    if (dom.getCS(el).position === 'fixed') {\n        offset = dom.getBCR(el);\n    } else {\n        offset = dom.offset(el);\n        var doc = el.ownerDocument;\n        offsetParent = el.offsetParent || doc.documentElement;\n        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && dom.getCS(offsetParent).position === 'static') {\n            offsetParent = offsetParent.parentNode;\n        }\n        if (offsetParent && offsetParent !== el && offsetParent.nodeType === Node.ELEMENT_NODE) {\n            parentOffset = dom.offset(offsetParent);\n            parentOffset.top += parseFloat(dom.getCS(offsetParent).borderTopWidth);\n            parentOffset.left += parseFloat(dom.getCS(offsetParent).borderLeftWidth);\n        }\n    }\n    return {\n        top: offset.top - parentOffset.top - parseFloat(dom.getCS(el).marginTop),\n        left: offset.left - parentOffset.left - parseFloat(dom.getCS(el).marginLeft)\n    };\n};\n\n// Attach an event listener to an element\ndom.eventOn = function (el, evtName, handler) {\n    if (el && el.addEventListener) {\n        el.addEventListener(evtName, handler);\n    }\n};\n\n// Remove an event listener from an element\ndom.eventOff = function (el, evtName, handler) {\n    if (el && el.removeEventListener) {\n        el.removeEventListener(evtName, handler);\n    }\n};\n\nvar isElement = dom.isElement;\nvar isVisible = dom.isVisible;\nvar isDisabled = dom.isDisabled;\nvar reflow = dom.reflow;\nvar closest = dom.closest;\nvar getById = dom.getById;\nvar selectAll = dom.selectAll;\nvar select = dom.select;\nvar addClass = dom.addClass;\nvar removeClass = dom.removeClass;\nvar hasClass = dom.hasClass;\nvar matches = dom.matches;\nvar setAttr = dom.setAttr;\nvar removeAttr = dom.removeAttr;\nvar getAttr = dom.getAttr;\nvar getBCR = dom.getBCR;\nvar getCS = dom.getCS;\nvar offset = dom.offset;\nvar position = dom.position;\nvar eventOn = dom.eventOn;\nvar eventOff = dom.eventOff;\n\nfunction identity(x) {\n    return x;\n}\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\nvar asyncGenerator = function () {\n  function AwaitValue(value) {\n    this.value = value;\n  }\n\n  function AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function (resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null\n        };\n\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg);\n        var value = result.value;\n\n        if (value instanceof AwaitValue) {\n          Promise.resolve(value.value).then(function (arg) {\n            resume(\"next\", arg);\n          }, function (arg) {\n            resume(\"throw\", arg);\n          });\n        } else {\n          settle(result.done ? \"return\" : \"normal\", result.value);\n        }\n      } catch (err) {\n        settle(\"throw\", err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case \"return\":\n          front.resolve({\n            value: value,\n            done: true\n          });\n          break;\n\n        case \"throw\":\n          front.reject(value);\n          break;\n\n        default:\n          front.resolve({\n            value: value,\n            done: false\n          });\n          break;\n      }\n\n      front = front.next;\n\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n\n    this._invoke = send;\n\n    if (typeof gen.return !== \"function\") {\n      this.return = undefined;\n    }\n  }\n\n  if (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n      return this;\n    };\n  }\n\n  AsyncGenerator.prototype.next = function (arg) {\n    return this._invoke(\"next\", arg);\n  };\n\n  AsyncGenerator.prototype.throw = function (arg) {\n    return this._invoke(\"throw\", arg);\n  };\n\n  AsyncGenerator.prototype.return = function (arg) {\n    return this._invoke(\"return\", arg);\n  };\n\n  return {\n    wrap: function (fn) {\n      return function () {\n        return new AsyncGenerator(fn.apply(this, arguments));\n      };\n    },\n    await: function (value) {\n      return new AwaitValue(value);\n    }\n  };\n}();\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty$1 = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\n\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\n/**\n * @param {[]|{}} props\n * @param {Function} transformFn\n */\nfunction copyProps(props) {\n    var transformFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;\n\n    if (isArray(props)) {\n        return props.map(transformFn);\n    }\n    // Props as an object.\n    var copied = {};\n\n    for (var prop in props) {\n        if (props.hasOwnProperty(prop)) {\n            if ((typeof prop === \"undefined\" ? \"undefined\" : _typeof(prop)) === \"object\") {\n                copied[transformFn(prop)] = assign({}, props[prop]);\n            } else {\n                copied[transformFn(prop)] = props[prop];\n            }\n        }\n    }\n\n    return copied;\n}\n\n/**\n * @param {string} str\n */\nfunction lowerFirst(str) {\n    if (typeof str !== \"string\") {\n        str = String(str);\n    }\n    return str.charAt(0).toLowerCase() + str.slice(1);\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject(obj) {\n  return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n * Returns boolean true or false\n */\nfunction looseEqual(a, b) {\n  if (a === b) return true;\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = isArray(a);\n      var isArrayB = isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i]);\n        });\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = keys(a);\n        var keysB = keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key]);\n        });\n      } else {\n        return false;\n      }\n    } catch (e) {\n      return false;\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b);\n  } else {\n    return false;\n  }\n}\n\n\"use strict\";\nfunction concat$1() {\n  return Array.prototype.concat.apply([], arguments);\n}function mergeData() {\n  for (var e = __assign({}, arguments[0]), a = 1; a < arguments.length; a++) for (var s = 0, t = keys$1(arguments[a]); s < t.length; s++) {\n    var c = t[s];if (void 0 !== e[c]) switch (c) {case \"class\":case \"style\":case \"directives\":\n        e[c] = concat$1(e[c], arguments[a][c]);break;case \"staticClass\":\n        e[c] && (e[c] = e[c].trim() + \" \"), e[c] += arguments[a][c].trim();break;case \"on\":case \"nativeOn\":\n        for (var r = 0, o = keys$1(arguments[a][c]); r < o.length; r++) {\n          var n = o[r];e[c][n] ? e[c][n] = concat$1(arguments[a][c][n], e[c][n]) : e[c][n] = arguments[a][c][n];\n        }break;case \"attrs\":case \"props\":case \"domProps\":case \"scopedSlots\":case \"staticStyle\":case \"hook\":case \"transition\":\n        e[c] = __assign({}, e[c], arguments[a][c]);break;case \"slot\":case \"key\":case \"ref\":case \"tag\":case \"show\":case \"keepAlive\":default:\n        e[c] = arguments[a][c];} else e[c] = arguments[a][c];\n  }return e;\n}var __assign = Object.assign || function (e) {\n  for (var a, s = 1, t = arguments.length; s < t; s++) {\n    a = arguments[s];for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (e[c] = a[c]);\n  }return e;\n};\nvar keys$1 = Object.keys;var lib_common = mergeData;\n\nfunction memoize(fn) {\n    var cache = create(null);\n\n    return function memoizedFn() {\n        var args = JSON.stringify(arguments);\n        return cache[args] = cache[args] || fn.apply(null, arguments);\n    };\n}\n\n/**\n * Observe a DOM element changes, falls back to eventListener mode\n * @param {Element} el The DOM element to observe\n * @param {Function} callback callback to be called on change\n * @param {object} [opts={childList: true, subtree: true}] observe options\n * @see http://stackoverflow.com/questions/3219758\n */\nfunction observeDOM(el, callback, opts) {\n    var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;\n    var eventListenerSupported = window.addEventListener;\n\n    // Handle case where we might be passed a vue instance\n    el = el ? el.$el || el : null;\n    if (!isElement(el)) {\n        // We can't observe somthing that isn't an element\n        return null;\n    }\n\n    var obs = null;\n\n    if (MutationObserver) {\n        // Define a new observer\n        obs = new MutationObserver(function (mutations) {\n            var changed = false;\n            // A Mutation can contain several change records, so we loop through them to see what has changed.\n            // We break out of the loop early if any \"significant\" change has been detected\n            for (var i = 0; i < mutations.length && !changed; i++) {\n                // The muttion record\n                var mutation = mutations[i];\n                // Mutation Type\n                var type = mutation.type;\n                // DOM Node (could be any DOM Node type - HTMLElement, Text, comment, etc)\n                var target = mutation.target;\n                if (type === 'characterData' && target.nodeType === Node.TEXT_NODE) {\n                    // We ignore nodes that are not TEXt (i.e. comments, etc) as they don't change layout\n                    changed = true;\n                } else if (type === 'attributes') {\n                    changed = true;\n                } else if (type === 'childList' && (mutation.addedNodes.length > 0 || mutation.removedNodes.length > 0)) {\n                    // This includes HTMLElement and Text Nodes being added/removed/re-arranged\n                    changed = true;\n                }\n            }\n            if (changed) {\n                // We only call the callback if a change that could affect layout/size truely happened.\n                callback();\n            }\n        });\n\n        // Have the observer observe foo for changes in children, etc\n        obs.observe(el, assign({ childList: true, subtree: true }, opts));\n    } else if (eventListenerSupported) {\n        // Legacy interface. most likely not used in modern browsers\n        el.addEventListener('DOMNodeInserted', callback, false);\n        el.addEventListener('DOMNodeRemoved', callback, false);\n    }\n\n    // We return a reference to the observer so that obs.disconnect() can be called if necessary\n    // To reduce overhead when the root element is hiiden\n    return obs;\n}\n\n/**\n * Given an array of properties or an object of property keys,\n * plucks all the values off the target object.\n * @param {{}|string[]} keysToPluck\n * @param {{}} objToPluck\n * @param {Function} transformFn\n * @return {{}}\n */\nfunction pluckProps(keysToPluck, objToPluck) {\n    var transformFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : identity;\n\n    return (isArray(keysToPluck) ? keysToPluck.slice() : keys(keysToPluck)).reduce(function (memo, prop) {\n        return memo[transformFn(prop)] = objToPluck[prop], memo;\n    }, {});\n}\n\n/**\n * @param {string} str\n */\nfunction upperFirst(str) {\n    if (typeof str !== \"string\") {\n        str = String(str);\n    }\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n/**\n * @param {string} prefix\n * @param {string} value\n */\nfunction prefixPropName(prefix, value) {\n  return prefix + upperFirst(value);\n}\n\n/**\n * Suffix can be a falsey value so nothing is appended to string.\n * (helps when looping over props & some shouldn't change)\n * Use data last parameters to allow for currying.\n * @param {string} suffix\n * @param {string} str\n */\nfunction suffixPropName(suffix, str) {\n  return str + (suffix ? upperFirst(suffix) : \"\");\n}\n\n/**\n * @param {string} prefix\n * @param {string} value\n */\nfunction unPrefixPropName(prefix, value) {\n  return lowerFirst(value.replace(prefix, \"\"));\n}\n\n/**\n * Log a warning message to the console with bootstrap-vue formatting sugar.\n * @param {string} message\n */\nfunction warn(message) {\n  console.warn(\"[Bootstrap-Vue warn]: \" + message);\n}\n\nvar props = {\n    disabled: {\n        type: Boolean,\n        default: false\n    },\n    ariaLabel: {\n        type: String,\n        default: \"Close\"\n    },\n    textVariant: {\n        type: String,\n        default: null\n    }\n};\n\nvar bBtnClose = {\n    functional: true,\n    props: props,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            listeners = _ref.listeners,\n            children = _ref.children;\n\n        var componentData = {\n            staticClass: \"close\",\n            class: defineProperty$1({}, \"text-\" + props.textVariant, props.textVariant),\n            attrs: {\n                type: \"button\",\n                disabled: props.disabled,\n                \"aria-label\": props.ariaLabel ? String(props.ariaLabel) : null\n            },\n            on: {\n                click: function click(e) {\n                    // Ensure click on button HTML content is also disabled\n                    if (props.disabled && e instanceof Event) {\n                        e.stopPropagation();\n                        e.preventDefault();\n                    }\n                }\n            }\n        };\n        // Careful not to override the slot with innerHTML\n        if (!children.length) {\n            componentData.domProps = { innerHTML: \"&times;\" };\n        }\n        return h(\"button\", lib_common(data, componentData), children);\n    }\n};\n\nvar alert = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _vm.localShow ? _c('div', { class: _vm.classObject, attrs: { \"role\": \"alert\", \"aria-live\": \"polite\", \"aria-atomic\": \"true\" } }, [_vm.dismissible ? _c('b-btn-close', { attrs: { \"aria-label\": _vm.dismissLabel }, on: { \"click\": _vm.dismiss } }, [_vm._t(\"dismiss\")], 2) : _vm._e(), _vm._t(\"default\")], 2) : _vm._e();\n    }, staticRenderFns: [],\n    components: { bBtnClose: bBtnClose },\n    model: {\n        prop: 'show',\n        event: 'input'\n    },\n    data: function data() {\n        return {\n            countDownTimerId: null,\n            dismissed: false\n        };\n    },\n\n    computed: {\n        classObject: function classObject() {\n            return ['alert', this.alertVariant, this.dismissible ? 'alert-dismissible' : ''];\n        },\n        alertVariant: function alertVariant() {\n            var variant = this.variant;\n            return 'alert-' + variant;\n        },\n        localShow: function localShow() {\n            return !this.dismissed && (this.countDownTimerId || this.show);\n        }\n    },\n    props: {\n        variant: {\n            type: String,\n            default: 'info'\n        },\n        dismissible: {\n            type: Boolean,\n            default: false\n        },\n        dismissLabel: {\n            type: String,\n            default: 'Close'\n        },\n        show: {\n            type: [Boolean, Number],\n            default: false\n        }\n    },\n    watch: {\n        show: function show() {\n            this.showChanged();\n        }\n    },\n    mounted: function mounted() {\n        this.showChanged();\n    },\n    destroyed: function destroyed() {\n        this.clearCounter();\n    },\n\n    methods: {\n        dismiss: function dismiss() {\n            this.clearCounter();\n            this.dismissed = true;\n            this.$emit('dismissed');\n            this.$emit('input', false);\n            if (typeof this.show === 'number') {\n                this.$emit('dismiss-count-down', 0);\n                this.$emit('input', 0);\n            } else {\n                this.$emit('input', false);\n            }\n        },\n        clearCounter: function clearCounter() {\n            if (this.countDownTimerId) {\n                clearInterval(this.countDownTimerId);\n                this.countDownTimerId = null;\n            }\n        },\n        showChanged: function showChanged() {\n            var _this = this;\n\n            // Reset counter status\n            this.clearCounter();\n            // Reset dismiss status\n            this.dismissed = false;\n\n            // No timer for boolean values\n            if (this.show === true || this.show === false || this.show === null || this.show === 0) {\n                return;\n            }\n\n            // Start counter\n            var dismissCountDown = this.show;\n            this.countDownTimerId = setInterval(function () {\n                if (dismissCountDown < 1) {\n                    _this.dismiss();\n                    return;\n                }\n                dismissCountDown--;\n                _this.$emit('dismiss-count-down', dismissCountDown);\n                _this.$emit('input', dismissCountDown);\n            }, 1000);\n        }\n    }\n};\n\nvar props$1 = {\n    tag: {\n        type: String,\n        default: \"span\"\n    },\n    variant: {\n        type: String,\n        default: \"secondary\"\n    },\n    pill: {\n        type: Boolean,\n        default: false\n    }\n};\n\nvar badge = {\n    functional: true,\n    props: props$1,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(props.tag, lib_common(data, {\n            staticClass: \"badge\",\n            class: [!props.variant ? \"badge-secondary\" : \"badge-\" + props.variant, { \"badge-pill\": Boolean(props.pill) }]\n        }), children);\n    }\n};\n\n/**\n * The Link component is used in many other BV components.\n * As such, sharing its props makes supporting all its features easier.\n * However, some components need to modify the defaults for their own purpose.\n * Prefer sharing a fresh copy of the props to ensure mutations\n * do not affect other component references to the props.\n *\n * https://github.com/vuejs/vue-router/blob/dev/src/components/link.js\n * @return {{}}\n */\nfunction propsFactory() {\n    return {\n        href: {\n            type: String,\n            default: null\n        },\n        rel: {\n            type: String,\n            default: null\n        },\n        target: {\n            type: String,\n            default: \"_self\"\n        },\n        active: {\n            type: Boolean,\n            default: false\n        },\n        activeClass: {\n            type: String,\n            default: \"active\"\n        },\n        append: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        event: {\n            type: [String, Array],\n            default: \"click\"\n        },\n        exact: {\n            type: Boolean,\n            default: false\n        },\n        exactActiveClass: {\n            type: String,\n            default: \"active\"\n        },\n        replace: {\n            type: Boolean,\n            default: false\n        },\n        routerTag: {\n            type: String,\n            default: \"a\"\n        },\n        to: {\n            type: [String, Object],\n            default: null\n        }\n    };\n}\n\nvar props$5 = propsFactory();\n\nfunction pickLinkProps(propsToPick) {\n    var freshLinkProps = propsFactory();\n    // Normalize everything to array.\n    propsToPick = concat(propsToPick);\n\n    return keys(freshLinkProps).reduce(function (memo, prop) {\n        if (arrayIncludes(propsToPick, prop)) {\n            memo[prop] = freshLinkProps[prop];\n        }\n\n        return memo;\n    }, {});\n}\n\n\n\n\n\nfunction computeTag(props, parent) {\n    return Boolean(parent.$router) && props.to && !props.disabled ? \"router-link\" : \"a\";\n}\n\nfunction computeHref(_ref, tag) {\n    var disabled = _ref.disabled,\n        href = _ref.href,\n        to = _ref.to;\n\n    // We've already checked the parent.$router in computeTag,\n    // so router-link means live router.\n    // When deferring to Vue Router's router-link,\n    // don't use the href attr at all.\n    // Must return undefined for router-link to populate href.\n    if (tag === \"router-link\") return void 0;\n    // If href explicitly provided\n    if (href) return href;\n    // Reconstruct href when `to` used, but no router\n    if (to) {\n        // Fallback to `to` prop (if `to` is a string)\n        if (typeof to === \"string\") return to;\n        // Fallback to `to.path` prop (if `to` is an object)\n        if ((typeof to === \"undefined\" ? \"undefined\" : _typeof(to)) === \"object\" && typeof to.path === \"string\") return to.path;\n    }\n    // If nothing is provided use '#'\n    return \"#\";\n}\n\nfunction computeRel(_ref2) {\n    var target = _ref2.target,\n        rel = _ref2.rel;\n\n    if (target === \"_blank\" && rel === null) {\n        return \"noopener\";\n    }\n    return rel || null;\n}\n\nfunction clickHandlerFactory(_ref3) {\n    var disabled = _ref3.disabled,\n        tag = _ref3.tag,\n        href = _ref3.href,\n        suppliedHandler = _ref3.suppliedHandler,\n        parent = _ref3.parent;\n\n    var isRouterLink = tag === \"router-link\";\n\n    return function onClick(e) {\n        if (disabled && e instanceof Event) {\n            // Stop event from bubbling up.\n            e.stopPropagation();\n            // Kill the event loop attached to this specific EventTarget.\n            e.stopImmediatePropagation();\n        } else {\n            parent.$root.$emit(\"clicked::link\", e);\n\n            if (isRouterLink && e.target.__vue__) {\n                e.target.__vue__.$emit(\"click\", e);\n            }\n            if (typeof suppliedHandler === \"function\") {\n                suppliedHandler.apply(undefined, arguments);\n            }\n        }\n\n        if (!isRouterLink && href === \"#\" || disabled) {\n            // Stop scroll-to-top behavior or navigation.\n            e.preventDefault();\n        }\n    };\n}\n\nvar bLink = {\n    functional: true,\n    props: propsFactory(),\n    render: function render(h, _ref4) {\n        var props = _ref4.props,\n            data = _ref4.data,\n            parent = _ref4.parent,\n            children = _ref4.children;\n\n        var tag = computeTag(props, parent),\n            rel = computeRel(props),\n            href = computeHref(props, tag),\n            eventType = tag === \"router-link\" ? \"nativeOn\" : \"on\",\n            suppliedHandler = (data[eventType] || {}).click,\n            handlers = { click: clickHandlerFactory({ tag: tag, href: href, disabled: props.disabled, suppliedHandler: suppliedHandler, parent: parent }) };\n\n        var componentData = lib_common(data, {\n            class: [props.active ? props.exact ? props.exactActiveClass : props.activeClass : null, { disabled: props.disabled }],\n            attrs: {\n                rel: rel,\n                href: href,\n                target: props.target,\n                \"aria-disabled\": tag === \"a\" ? props.disabled ? \"true\" : \"false\" : null\n            },\n            props: assign(props, { tag: props.routerTag })\n        });\n\n        // If href prop exists on router-link (even undefined or null) it fails working on SSR\n        if (!componentData.attrs.href) {\n            delete componentData.attrs.href;\n        }\n\n        // We want to overwrite any click handler since our callback\n        // will invoke the supplied handler if !props.disabled\n        componentData[eventType] = assign(componentData[eventType] || {}, handlers);\n\n        return h(tag, componentData, children);\n    }\n};\n\nvar props$4 = assign(propsFactory(), {\n    text: {\n        type: String,\n        default: null\n    },\n    active: {\n        type: Boolean,\n        default: false\n    },\n    href: {\n        type: String,\n        default: \"#\"\n    },\n    ariaCurrent: {\n        type: String,\n        default: \"location\"\n    }\n});\n\nvar BreadcrumbLink = {\n    functional: true,\n    props: props$4,\n    render: function render(h, _ref) {\n        var suppliedProps = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        var tag = suppliedProps.active ? \"span\" : bLink;\n\n        var componentData = {\n            props: pluckProps(props$4, suppliedProps),\n            domProps: { innerHTML: suppliedProps.text }\n        };\n\n        if (suppliedProps.active) {\n            componentData.attrs = { \"aria-current\": suppliedProps.ariaCurrent };\n        } else {\n            componentData.attrs = { href: suppliedProps.href };\n        }\n\n        return h(tag, lib_common(data, componentData), children);\n    }\n};\n\nvar props$3 = assign({}, props$4, {\n    text: {\n        type: String,\n        default: null\n    },\n    href: {\n        type: String,\n        default: null\n    }\n});\n\nvar BreadcrumbItem = {\n    functional: true,\n    props: props$3,\n    render: function render(h, _ref) {\n        var props$$1 = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(\"li\", lib_common(data, {\n            staticClass: \"breadcrumb-item\",\n            class: { active: props$$1.active },\n            attrs: { role: \"presentation\" }\n        }), [h(BreadcrumbLink, { props: props$$1 }, children)]);\n    }\n};\n\nvar props$2 = {\n    items: {\n        type: Array,\n        default: null\n    }\n};\n\nvar breadcrumb = {\n    functional: true,\n    props: props$2,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        var childNodes = children;\n        // Build child nodes from items if given.\n        if (isArray(props.items)) {\n            var activeDefined = false;\n            childNodes = props.items.map(function (item, idx) {\n                if ((typeof item === \"undefined\" ? \"undefined\" : _typeof(item)) !== \"object\") {\n                    item = { text: item };\n                }\n                // Copy the value here so we can normalize it.\n                var active = item.active;\n                if (active) {\n                    activeDefined = true;\n                }\n                if (!active && !activeDefined) {\n                    // Auto-detect active by position in list.\n                    active = idx + 1 === props.items.length;\n                }\n\n                return h(BreadcrumbItem, { props: assign({}, item, { active: active }) });\n            });\n        }\n\n        return h(\"ol\", lib_common(data, { staticClass: \"breadcrumb\" }), childNodes);\n    }\n};\n\nvar btnProps = {\n    block: {\n        type: Boolean,\n        default: false\n    },\n    disabled: {\n        type: Boolean,\n        default: false\n    },\n    size: {\n        type: String,\n        default: null,\n        validator: function validator(size) {\n            return arrayIncludes([\"sm\", \"\", \"lg\"], size);\n        }\n    },\n    variant: {\n        type: String,\n        default: null\n    },\n    type: {\n        type: String,\n        default: \"button\"\n    },\n    pressed: {\n        // tri-state prop: true, false or null\n        // => on, off, not a toggle\n        type: Boolean,\n        default: null\n    }\n};\n\nvar linkProps = propsFactory();\ndelete linkProps.href.default;\ndelete linkProps.to.default;\nvar linkPropKeys = keys(linkProps);\n\nvar props$6 = assign(linkProps, btnProps);\n\nfunction handleFocus(evt) {\n    if (evt.type === \"focusin\") {\n        addClass(evt.target, \"focus\");\n    } else if (evt.type === \"focusout\") {\n        removeClass(evt.target, \"focus\");\n    }\n}\n\nvar bBtn = {\n    functional: true,\n    props: props$6,\n    render: function render(h, _ref) {\n        var _ref2;\n\n        var props = _ref.props,\n            data = _ref.data,\n            listeners = _ref.listeners,\n            children = _ref.children;\n\n        var isLink = Boolean(props.href || props.to);\n        var isToggle = typeof props.pressed === \"boolean\";\n        var on = {\n            click: function click(e) {\n                if (props.disabled && e instanceof Event) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                } else if (isToggle) {\n                    // Concat will normalize the value to an array\n                    // without double wrapping an array value in an array.\n                    concat(listeners[\"update:pressed\"]).forEach(function (fn) {\n                        if (typeof fn === \"function\") {\n                            fn(!props.pressed);\n                        }\n                    });\n                }\n            }\n        };\n\n        if (isToggle) {\n            on.focusin = handleFocus;\n            on.focusout = handleFocus;\n        }\n\n        var componentData = {\n            staticClass: \"btn\",\n            class: [props.variant ? \"btn-\" + props.variant : \"btn-secondary\", (_ref2 = {}, defineProperty$1(_ref2, \"btn-\" + props.size, Boolean(props.size)), defineProperty$1(_ref2, \"btn-block\", props.block), defineProperty$1(_ref2, \"disabled\", props.disabled), defineProperty$1(_ref2, \"active\", props.pressed), _ref2)],\n            props: isLink ? pluckProps(linkPropKeys, props) : null,\n            attrs: {\n                type: isLink ? null : props.type,\n                disabled: isLink ? null : props.disabled,\n                // Data attribute not used for js logic,\n                // but only for BS4 style selectors.\n                \"data-toggle\": isToggle ? \"button\" : null,\n                \"aria-pressed\": isToggle ? String(props.pressed) : null,\n                // Tab index is used when the component becomes a link.\n                // Links are tabable, but don't allow disabled,\n                // so we mimic that functionality by disabling tabbing.\n                tabindex: props.disabled && isLink ? \"-1\" : null\n            },\n            on: on\n        };\n\n        return h(isLink ? bLink : \"button\", lib_common(data, componentData), children);\n    }\n};\n\nvar ITEM_SELECTOR = ['.btn:not(.disabled):not([disabled])', '.form-control:not(.disabled):not([disabled])', 'select:not(.disabled):not([disabled])', 'input[type=\"checkbox\"]:not(.disabled)', 'input[type=\"radio\"]:not(.disabled)'].join(',');\n\nvar buttonToolbar = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: _vm.classObject, attrs: { \"role\": \"toolbar\", \"tabindex\": _vm.keyNav ? '0' : null }, on: { \"focusin\": function focusin($event) {\n                    if ($event.target !== $event.currentTarget) {\n                        return null;\n                    }_vm.focusFirst($event);\n                }, \"keydown\": [function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"left\", 37)) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 0) {\n                        return null;\n                    }_vm.focusNext($event, true);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"up\", 38)) {\n                        return null;\n                    }_vm.focusNext($event, true);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"right\", 39)) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 2) {\n                        return null;\n                    }_vm.focusNext($event, false);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"down\", 40)) {\n                        return null;\n                    }_vm.focusNext($event, false);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"left\", 37)) {\n                        return null;\n                    }if (!$event.shiftKey) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 0) {\n                        return null;\n                    }_vm.focusFirst($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"up\", 38)) {\n                        return null;\n                    }if (!$event.shiftKey) {\n                        return null;\n                    }_vm.focusFirst($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"right\", 39)) {\n                        return null;\n                    }if (!$event.shiftKey) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 2) {\n                        return null;\n                    }_vm.focusLast($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"down\", 40)) {\n                        return null;\n                    }if (!$event.shiftKey) {\n                        return null;\n                    }_vm.focusLast($event);\n                }] } }, [_vm._t(\"default\")], 2);\n    }, staticRenderFns: [],\n    computed: {\n        classObject: function classObject() {\n            return ['btn-toolbar', this.justify && !this.vertical ? 'justify-content-between' : ''];\n        }\n    },\n    props: {\n        justify: {\n            type: Boolean,\n            default: false\n        },\n        keyNav: {\n            type: Boolean,\n            default: false\n        }\n    },\n    methods: {\n        setItemFocus: function setItemFocus(item) {\n            this.$nextTick(function () {\n                item.focus();\n            });\n        },\n        focusNext: function focusNext(e, prev) {\n            if (!this.keyNav) {\n                return;\n            }\n            e.preventDefault();\n            e.stopPropagation();\n            var items = this.getItems();\n            if (items.length < 1) {\n                return;\n            }\n            var index = items.indexOf(e.target);\n            if (prev && index > 0) {\n                index--;\n            } else if (!prev && index < items.length - 1) {\n                index++;\n            }\n            if (index < 0) {\n                index = 0;\n            }\n            this.setItemFocus(items[index]);\n        },\n        focusFirst: function focusFirst(e) {\n            if (!this.keyNav) {\n                return;\n            }\n            e.preventDefault();\n            e.stopPropagation();\n            var items = this.getItems();\n            if (items.length > 0) {\n                this.setItemFocus(items[0]);\n            }\n        },\n        focusLast: function focusLast(e) {\n            if (!this.keyNav) {\n                return;\n            }\n            e.preventDefault();\n            e.stopPropagation();\n            var items = this.getItems();\n            if (items.length > 0) {\n                this.setItemFocus([items.length - 1]);\n            }\n        },\n        getItems: function getItems() {\n            var items = selectAll(ITEM_SELECTOR, this.$el);\n            items.forEach(function (item) {\n                // Ensure tabfocus is -1 on any new elements\n                item.tabIndex = -1;\n            });\n            return items.filter(function (el) {\n                return isVisible(el);\n            });\n        }\n    },\n    mounted: function mounted() {\n        if (this.keyNav) {\n            // Pre-set the tabindexes if the markup does not include tabindex=\"-1\" on the toolbar items\n            this.getItems();\n        }\n    }\n};\n\nvar props$7 = {\n    vertical: {\n        type: Boolean,\n        default: false\n    },\n    size: {\n        type: String,\n        default: null,\n        validator: function validator(size) {\n            return arrayIncludes([\"sm\", \"\", \"lg\"], size);\n        }\n    },\n    tag: {\n        type: String,\n        default: \"div\"\n    },\n    ariaRole: {\n        type: String,\n        default: \"group\"\n    }\n};\n\nvar buttonGroup = {\n    functional: true,\n    props: props$7,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(props.tag, lib_common(data, {\n            staticClass: \"btn-group\",\n            class: defineProperty$1({\n                \"btn-group-vertical\": props.vertical\n            }, \"btn-group-\" + props.size, Boolean(props.size)),\n            attrs: { \"role\": props.ariaRole }\n        }), children);\n    }\n};\n\nvar props$8 = {\n    id: {\n        type: String,\n        default: null\n    },\n    tag: {\n        type: String,\n        default: \"div\"\n    }\n};\n\nvar bInputGroupAddon = {\n    functional: true,\n    props: props$8,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(props.tag, lib_common(data, {\n            staticClass: 'input-group-addon',\n            attrs: { id: props.id }\n        }), children);\n    }\n};\n\nvar inputGroup = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c(_vm.tag, { tag: \"component\", class: _vm.classObject, attrs: { \"id\": _vm.id || null, \"role\": \"group\" } }, [_vm._t(\"left\", [_vm.left ? _c('b-input-group-addon', { attrs: { \"id\": _vm.id ? _vm.id + \"_BV_addon_left_\" : null }, domProps: { \"innerHTML\": _vm._s(_vm.left) } }) : _vm._e()]), _vm._t(\"default\"), _vm._t(\"right\", [_vm.right ? _c('b-input-group-addon', { attrs: { \"id\": _vm.id ? _vm.id + \"_BV_addon_right_\" : null }, domProps: { \"innerHTML\": _vm._s(_vm.right) } }) : _vm._e()])], 2);\n    }, staticRenderFns: [],\n    components: { bInputGroupAddon: bInputGroupAddon },\n    computed: {\n        classObject: function classObject() {\n            return ['input-group', this.size ? 'input-group-' + this.size : '', this.state ? 'has-' + this.state : ''];\n        }\n    },\n    props: {\n        id: {\n            type: String,\n            defualt: null\n        },\n        size: {\n            type: String,\n            default: null\n        },\n        state: {\n            type: String,\n            default: null\n        },\n        left: {\n            type: String,\n            default: null\n        },\n        right: {\n            type: String,\n            default: null\n        },\n        tag: {\n            type: String,\n            default: 'div'\n        }\n    }\n};\n\nvar props$9 = {\n    id: {\n        type: String,\n        default: null\n    },\n    tag: {\n        type: String,\n        default: \"div\"\n    }\n};\n\nvar inputGroupButton = {\n    functional: true,\n    props: props$9,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(props.tag, lib_common(data, {\n            staticClass: 'input-group-btn',\n            attrs: {\n                id: props.id\n            }\n        }), children);\n    }\n};\n\nvar cardMixin = {\n    props: {\n        tag: {\n            type: String,\n            default: \"div\"\n        },\n        bgVariant: {\n            type: String,\n            default: null\n        },\n        borderVariant: {\n            type: String,\n            default: null\n        },\n        textVariant: {\n            type: String,\n            default: null\n        }\n    }\n};\n\nvar clickoutMixin = {\n    mounted: function mounted() {\n        if (typeof document !== 'undefined') {\n            document.documentElement.addEventListener('click', this._clickOutListener);\n        }\n    },\n    destroyed: function destroyed() {\n        if (typeof document !== 'undefined') {\n            document.removeEventListener('click', this._clickOutListener);\n        }\n    },\n\n    methods: {\n        _clickOutListener: function _clickOutListener(e) {\n            if (!this.$el.contains(e.target)) {\n                if (this.clickOutListener) {\n                    this.clickOutListener();\n                }\n            }\n        }\n    }\n};\n\n/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.12.5\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar nativeHints = ['native code', '[object MutationObserverConstructor]'];\n\n/**\n * Determine if a function is implemented natively (as opposed to a polyfill).\n * @method\n * @memberof Popper.Utils\n * @argument {Function | undefined} fn the function to check\n * @returns {Boolean}\n */\nvar isNative = function (fn) {\n  return nativeHints.some(function (hint) {\n    return (fn || '').toString().indexOf(hint) > -1;\n  });\n};\n\nvar isBrowser = typeof window !== 'undefined';\nvar longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\nvar timeoutDuration = 0;\nfor (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nfunction microtaskDebounce(fn) {\n  var scheduled = false;\n  var i = 0;\n  var elem = document.createElement('span');\n\n  // MutationObserver provides a mechanism for scheduling microtasks, which\n  // are scheduled *before* the next task. This gives us a way to debounce\n  // a function but ensure it's called *before* the next paint.\n  var observer = new MutationObserver(function () {\n    fn();\n    scheduled = false;\n  });\n\n  observer.observe(elem, { attributes: true });\n\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      elem.setAttribute('x-index', i);\n      i = i + 1; // don't use compund (+=) because it doesn't get optimized in V8\n    }\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\n// It's common for MutationObserver polyfills to be seen in the wild, however\n// these rely on Mutation Events which only occur when an element is connected\n// to the DOM. The algorithm used in this module does not use a connected element,\n// and so we must ensure that a *native* MutationObserver is available.\nvar supportsNativeMutationObserver = isBrowser && isNative(window.MutationObserver);\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsNativeMutationObserver ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element || ['HTML', 'BODY', '#document'].indexOf(element.nodeName) !== -1) {\n    return window.document.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  // NOTE: 1 DOM access here\n  var offsetParent = element && element.offsetParent;\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return window.document.documentElement;\n  }\n\n  // .offsetParent will return the closest TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return window.document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = window.document.documentElement;\n    var scrollingElement = window.document.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return +styles['border' + sideA + 'Width'].split('px')[0] + +styles['border' + sideB + 'Width'].split('px')[0];\n}\n\n/**\n * Tells if you are running Internet Explorer 10\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean} isIE10\n */\nvar isIE10 = undefined;\n\nvar isIE10$1 = function () {\n  if (isIE10 === undefined) {\n    isIE10 = navigator.appVersion.indexOf('MSIE 10') !== -1;\n  }\n  return isIE10;\n};\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE10$1() ? html['offset' + axis] + computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')] + computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')] : 0);\n}\n\nfunction getWindowSizes() {\n  var body = window.document.body;\n  var html = window.document.documentElement;\n  var computedStyle = isIE10$1() && window.getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck$1 = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass$1 = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar defineProperty$2 = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends$1 = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends$1({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  if (isIE10$1()) {\n    try {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } catch (err) {}\n  } else {\n    rect = element.getBoundingClientRect();\n  }\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};\n  var width = sizes.width || element.clientWidth || result.right - result.left;\n  var height = sizes.height || element.clientHeight || result.bottom - result.top;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var isIE10 = isIE10$1();\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = +styles.borderTopWidth.split('px')[0];\n  var borderLeftWidth = +styles.borderLeftWidth.split('px')[0];\n\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = +styles.marginTop.split('px')[0];\n    var marginLeft = +styles.marginLeft.split('px')[0];\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var html = window.document.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = getScroll(html);\n  var scrollLeft = getScroll(html, 'left');\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  return isFixed(getParentNode(element));\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  // NOTE: 1 DOM access here\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(popper));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = window.document.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = window.document.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  boundaries.left += padding;\n  boundaries.top += padding;\n  boundaries.right -= padding;\n  boundaries.bottom -= padding;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends$1({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var commonOffsetParent = findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);\n  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier.function) {\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier.function || modifier.fn;\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n  data.offsets.popper.position = 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length - 1; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof window.document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroy the popper\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.left = '';\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? window : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  window.addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  window.removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger onUpdate callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    window.cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper.\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  // floor sides to avoid blurry text\n  var offsets = {\n    left: Math.floor(popper.left),\n    top: Math.floor(popper.top),\n    bottom: Math.floor(popper.bottom),\n    right: Math.floor(popper.right)\n  };\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    top = -offsetParentRect.height + offsets.bottom;\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    left = -offsetParentRect.width + offsets.right;\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends$1({}, attributes, data.attributes);\n  data.styles = _extends$1({}, styles, data.styles);\n  data.arrowStyles = _extends$1({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjuction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  var popperMarginSide = getStyleComputedProperty(data.instance.popper, 'margin' + sideCapitalized).replace('px', '');\n  var sideValue = center - getClientRect(data.offsets.popper)[side] - popperMarginSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {};\n  data.offsets.arrow[side] = Math.round(sideValue);\n  data.offsets.arrow[altSide] = ''; // make sure to unset any eventual altSide value from the DOM node\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-right` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends$1({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset$1(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement);\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty$2({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty$2({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends$1({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty$2({}, side, reference[side]),\n      end: defineProperty$2({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends$1({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unitless, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the height.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > More on this [reading this issue](https://github.com/FezVrasta/popper.js/issues/373)\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset$1,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * An scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper this makes sure the popper has always a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier, can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near eachothers\n   * without leaving any gap between the two. Expecially useful when the arrow is\n   * enabled and you want to assure it to point to its reference element.\n   * It cares only about the first axis, you can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjuction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations).\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position,\n     * the popper will never be placed outside of the defined boundaries\n     * (except if keepTogether is enabled)\n     */\n    boundariesElement: 'viewport'\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define you own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the informations used by Popper.js\n * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow, it expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements.\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overriden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass as 3rd argument an object with the same\n * structure of this object, example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Whether events (resize, scroll) are initially enabled\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated, this callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Create a new Popper.js instance\n   * @class Popper\n   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper\n   * @param {HTMLElement} popper - The HTML element used as popper.\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck$1(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends$1({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference.jquery ? reference[0] : reference;\n    this.popper = popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends$1({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends$1({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends$1({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass$1(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedule an update, it will run on the next UI update available\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\nPopper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\n/**\n * Issue #569: collapse::toggle::state triggered too many times\n * @link https://github.com/bootstrap-vue/bootstrap-vue/issues/569\n */\n\nvar BVRL = '__BV_root_listeners__';\n\nvar listenOnRootMixin = {\n    methods: {\n        /**\n         * Safely register event listeners on the root Vue node.\n         * While Vue automatically removes listeners for individual components,\n         * when a component registers a listener on root and is destroyed,\n         * this orphans a callback because the node is gone,\n         * but the root does not clear the callback.\n         *\n         * This adds a non-reactive prop to a vm on the fly\n         * in order to avoid object observation and its performance costs\n         * to something that needs no reactivity.\n         * It should be highly unlikely there are any naming collisions.\n         * @param {string} event\n         * @param {function} callback\n         * @chainable\n         */\n        listenOnRoot: function listenOnRoot(event, callback) {\n            if (!this[BVRL] || !isArray(this[BVRL])) {\n                this[BVRL] = [];\n            }\n            this[BVRL].push({ event: event, callback: callback });\n            this.$root.$on(event, callback);\n            return this;\n        },\n\n\n        /**\n         * Convenience method for calling vm.$emit on vm.$root.\n         * @param {string} event\n         * @param {*} args\n         * @chainable\n         */\n        emitOnRoot: function emitOnRoot(event) {\n            var _$root;\n\n            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                args[_key - 1] = arguments[_key];\n            }\n\n            (_$root = this.$root).$emit.apply(_$root, [event].concat(toConsumableArray(args)));\n            return this;\n        }\n    },\n\n    destroyed: function destroyed() {\n        if (this[BVRL] && isArray(this[BVRL])) {\n            while (this[BVRL].length > 0) {\n                // shift to process in order\n                var _BVRL$shift = this[BVRL].shift(),\n                    event = _BVRL$shift.event,\n                    callback = _BVRL$shift.callback;\n\n                this.$root.$off(event, callback);\n            }\n        }\n    }\n};\n\n// Return an Array of visible items\nfunction filterVisible(els) {\n    return (els || []).filter(isVisible);\n}\n\n// Dropdown item CSS selectors\n// TODO: .dropdown-form handling\nvar ITEM_SELECTOR$1 = \".dropdown-item:not(.disabled):not([disabled])\";\n\n// Popper attachment positions\nvar AttachmentMap = {\n    // DropUp Left Align\n    TOP: \"top-start\",\n    // DropUp Right Align\n    TOPEND: \"top-end\",\n    // Dropdown left Align\n    BOTTOM: \"bottom-start\",\n    // Dropdown Right Align\n    BOTTOMEND: \"bottom-end\"\n};\n\nvar dropdownMixin = {\n    mixins: [clickoutMixin, listenOnRootMixin],\n    props: {\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        text: {\n            // Button label\n            type: String,\n            default: \"\"\n        },\n        dropup: {\n            // place on top if possible\n            type: Boolean,\n            default: false\n        },\n        right: {\n            // Right align menu (default is left align)\n            type: Boolean,\n            default: false\n        },\n        offset: {\n            // Number of pixels to offset menu, or a CSS unit value (i.e. 1px, 1rem, etc)\n            type: [Number, String],\n            default: 0\n        },\n        noFlip: {\n            // Disable auto-flipping of menu from bottom<=>top\n            type: Boolean,\n            default: false\n        },\n        popperOpts: {\n            type: Object,\n            default: function _default() {}\n        }\n    },\n    data: function data() {\n        return {\n            visible: false,\n            _popper: null,\n            inNavbar: null\n        };\n    },\n    created: function created() {\n        var _this = this;\n\n        var listener = function listener(el) {\n            if (el !== _this) {\n                _this.visible = false;\n            }\n        };\n\n        // To keep one dropdown opened on page\n        this.listenOnRoot(\"bv::dropdown::shown\", listener);\n\n        // Hide when clicked on links\n        this.listenOnRoot(\"clicked::link\", listener);\n        // Use new namespaced events\n        this.listenOnRoot(\"bv::link::clicked\", listener);\n    },\n\n    watch: {\n        visible: function visible(state, old) {\n            if (state === old) {\n                // Avoid duplicated emits\n                return;\n            }\n            if (state) {\n                this.showMenu();\n            } else {\n                this.hideMenu();\n            }\n        },\n        disabled: function disabled(state, old) {\n            if (state !== old && state && this.visible) {\n                // Hide dropdown if disabled changes to true\n                this.visible = false;\n            }\n        }\n    },\n    computed: {\n        toggler: function toggler() {\n            return this.$refs.toggle.$el || this.$refs.toggle;\n        }\n    },\n    destroyed: function destroyed() {\n        if (this._popper) {\n            // Ensure popper event listeners are removed cleanly\n            this._popper.destroy();\n        }\n        this._popper = null;\n        this.setTouchStart(false);\n    },\n\n    methods: {\n        showMenu: function showMenu() {\n            if (this.disabled) {\n                return;\n            }\n            // TODO: move emit show to visible watcher, to allow cancelling of show\n            this.$emit(\"show\");\n            // Ensure other menus are closed\n            this.emitOnRoot(\"bv::dropdown::shown\", this);\n\n            // If popper not installed, then fallback gracefully to dropdown only with left alignment\n            if (typeof Popper === \"function\") {\n                // Are we in a navbar ?\n                if (this.inNavbar === null && this.isNav) {\n                    this.inNavbar = Boolean(closest(\".navbar\", this.$el));\n                }\n                // for dropup with alignment we use the parent element as popper container\n                var element = this.dropup && this.right || this.split || this.inNavbar ? this.$el : this.$refs.toggle;\n                // Make sure we have a reference to an element, not a component!\n                element = element.$el || element;\n\n                // Instantiate popper.js\n                this._popper = new Popper(element, this.$refs.menu, this.getPopperConfig());\n            }\n\n            this.setTouchStart(true);\n            this.$emit(\"shown\");\n\n            // Focus on the first item on show\n            this.$nextTick(this.focusFirstItem);\n        },\n        hideMenu: function hideMenu() {\n            // TODO: move emit hide to visible watcher, to allow cancelling of hide\n            this.$emit(\"hide\");\n            if (this._popper) {\n                // Ensure popper event listeners are removed cleanly\n                this._popper.destroy();\n            }\n            this._popper = null;\n            this.setTouchStart(false);\n            this.emitOnRoot(\"bv::dropdown::hidden\", this);\n            this.$emit(\"hidden\");\n        },\n        getPopperConfig: function getPopperConfig() {\n            var placement = AttachmentMap.BOTTOM;\n            if (this.dropup && this.right) {\n                // dropup + right\n                placement = AttachmentMap.TOPEND;\n            } else if (this.dropup) {\n                // dropup + left\n                placement = AttachmentMap.TOP;\n            } else if (this.right) {\n                // dropdown + right\n                placement = AttachmentMap.BOTTOMEND;\n            }\n            var popperConfig = {\n                placement: placement,\n                modifiers: {\n                    offset: {\n                        offset: this.offset || 0\n                    },\n                    flip: {\n                        enabled: !this.noFlip\n                    },\n                    applyStyle: {\n                        // Disable Popper.js for Dropdown in Navbar\n                        enabled: !this.inNavbar\n                    }\n                }\n            };\n            return assign(popperConfig, this.popperOpts || {});\n        },\n        setTouchStart: function setTouchStart(on) {\n            var _this2 = this;\n\n            /*\n             If this is a touch-enabled device we add extra\n             empty mouseover listeners to the body's immediate children;\n             only needed because of broken event delegation on iOS\n             https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n             */\n            if (\"ontouchstart\" in document.documentElement) {\n                var children = from(document.body.children);\n                children.forEach(function (el) {\n                    if (on) {\n                        eventOn(\"mouseover\", _this2._noop);\n                    } else {\n                        eventOff(\"mouseover\", _this2._noop);\n                    }\n                });\n            }\n        },\n        _noop: function _noop() {\n            // Do nothing event handler (used in touchstart event handler)\n        },\n        clickOutListener: function clickOutListener() {\n            this.visible = false;\n        },\n        click: function click(e) {\n            // Calle only in split button mode, for the split button\n            if (this.disabled) {\n                this.visible = false;\n                return;\n            }\n\n            this.$emit(\"click\", e);\n        },\n        toggle: function toggle() {\n            // Called only by a button that toggles the menu\n            if (this.disabled) {\n                this.visible = false;\n                return;\n            }\n            this.visible = !this.visible;\n        },\n        show: function show() {\n            // Public method to show dropdown\n            if (this.disabled) {\n                return;\n            }\n            this.visible = true;\n        },\n        hide: function hide() {\n            // Public method to hide dropdown\n            if (this.disabled) {\n                return;\n            }\n            this.visible = false;\n        },\n        onTab: function onTab() {\n            if (this.visible) {\n                // TODO: Need special handler for dealing with form inputs\n                // Tab, if in a text-like input, we should just focus next item in the dropdown\n                // Note: Inputs are in a special .dropdown-form container\n                this.visible = false;\n            }\n        },\n        onEsc: function onEsc(e) {\n            if (this.visible) {\n                this.visible = false;\n                e.preventDefault();\n                e.stopPropagation();\n                // Return focus to original trigger button\n                this.$nextTick(this.focusToggler);\n            }\n        },\n        onFocusOut: function onFocusOut(evt) {\n            if (this.$refs.menu.contains(evt.relatedTarget)) {\n                return;\n            }\n            this.visible = false;\n        },\n        onMouseOver: function onMouseOver(evt) {\n            // Focus the item on hover\n            // TODO: Special handling for inputs? Inputs are in a special .dropdown-form container\n            var item = evt.target;\n            if (item.classList.contains(\"dropdown-item\") && !item.disabled && !item.classList.contains(\"disabled\") && item.focus) {\n                item.focus();\n            }\n        },\n        focusNext: function focusNext(e, up) {\n            var _this3 = this;\n\n            if (!this.visible) {\n                return;\n            }\n            e.preventDefault();\n            e.stopPropagation();\n            this.$nextTick(function () {\n                var items = _this3.getItems();\n                if (items.length < 1) {\n                    return;\n                }\n                var index = items.indexOf(e.target);\n                if (up && index > 0) {\n                    index--;\n                } else if (!up && index < items.length - 1) {\n                    index++;\n                }\n                if (index < 0) {\n                    index = 0;\n                }\n                _this3.focusItem(index, items);\n            });\n        },\n        focusItem: function focusItem(idx, items) {\n            var el = items.find(function (el, i) {\n                return i === idx;\n            });\n            if (el && getAttr(el, \"tabindex\") !== \"-1\") {\n                el.focus();\n            }\n        },\n        getItems: function getItems() {\n            // Get all items\n            return filterVisible(selectAll(ITEM_SELECTOR$1, this.$refs.menu));\n        },\n        getFirstItem: function getFirstItem() {\n            // Get the first non-disabled item\n            var item = this.getItems()[0];\n            return item || null;\n        },\n        focusFirstItem: function focusFirstItem() {\n            var item = this.getFirstItem();\n            if (item) {\n                this.focusItem(0, [item]);\n            }\n        },\n        focusToggler: function focusToggler() {\n            var toggler = this.toggler;\n            if (toggler && toggler.focus) {\n                toggler.focus();\n            }\n        }\n    }\n};\n\nvar formMixin = {\n    props: {\n        name: {\n            type: String\n        },\n        id: {\n            type: String\n        },\n        disabled: {\n            type: Boolean\n        },\n        required: {\n            type: Boolean,\n            default: false\n        }\n    }\n};\n\nvar formCustomMixin = {\n    computed: {\n        custom: function custom() {\n            return !this.plain;\n        }\n    },\n    props: {\n        plain: {\n            type: Boolean,\n            default: false\n        }\n    }\n};\n\nvar formOptionsMixin = {\n    props: {\n        options: {\n            type: [Array, Object],\n            default: function _default() {\n                return [];\n            }\n        },\n        valueField: {\n            type: String,\n            default: 'value'\n        },\n        textField: {\n            type: String,\n            default: 'text'\n        },\n        disabledField: {\n            type: String,\n            default: 'disabled'\n        }\n    },\n    computed: {\n        formOptions: function formOptions() {\n            var _this = this;\n\n            var options = this.options || [];\n\n            if (isArray(options)) {\n                // Normalize flat arrays to Array of Objects\n                options = options.map(function (option) {\n                    if ((typeof option === 'undefined' ? 'undefined' : _typeof(option)) === 'object') {\n                        return {\n                            value: option[_this.valueField],\n                            text: option[_this.textField],\n                            disabled: option[_this.disabledField] || false\n                        };\n                    }\n\n                    return {\n                        text: String(option),\n                        value: option,\n                        disabled: false\n                    };\n                });\n            } else {\n                // Normalize Objects keys to Array of Objects\n                options = keys(options).map(function (key) {\n                    var option = options[key] || {};\n\n                    // Resolve text\n                    if ((typeof option === 'undefined' ? 'undefined' : _typeof(option)) !== 'object') {\n                        option = defineProperty$1({}, _this.textField, String(option));\n                    }\n                    // Resolve text field (uses key as text if not provided)\n                    if (option[_this.textField] === 0) {\n                        option.text = option[_this.textField];\n                    } else {\n                        option.text = option[_this.textField] || key;\n                    }\n\n                    // Resolve value (uses null/undef value if not provided)\n                    option.value = option[_this.valueField];\n\n                    // Resolve disabled\n                    option.disabled = option[_this.disabledField] || false;\n\n                    return option;\n                });\n            }\n            // Return nomalized options array\n            return options;\n        }\n    }\n};\n\n/*\n * form-radio & form-check mixin\n *\n */\n\nvar formRadioCheckMixin = {\n    data: function data() {\n        return {\n            localChecked: this.checked,\n            hasFocus: false\n        };\n    },\n\n    model: {\n        prop: 'checked',\n        event: 'input'\n    },\n    props: {\n        value: {},\n        checked: {\n            // This is the model, except when in group mode\n        },\n        buttonVariant: {\n            // Only applicable when rendered with button style\n            type: String,\n            default: null\n        }\n    },\n    computed: {\n        computedLocalChecked: {\n            get: function get() {\n                if (this.is_Child) {\n                    return this.$parent.localChecked;\n                } else {\n                    return this.localChecked;\n                }\n            },\n            set: function set(val) {\n                if (this.is_Child) {\n                    this.$parent.localChecked = val;\n                } else {\n                    this.localChecked = val;\n                }\n            }\n        },\n        is_Child: function is_Child() {\n            return Boolean(this.$parent && this.$parent.is_RadioCheckGroup);\n        },\n        is_Disabled: function is_Disabled() {\n            // Child can be disabled while parent isn't\n            return Boolean(this.is_Child ? this.$parent.disabled || this.disabled : this.disabled);\n        },\n        is_Required: function is_Required() {\n            return Boolean(this.is_Child ? this.$parent.required : this.required);\n        },\n        is_Plain: function is_Plain() {\n            return Boolean(this.is_Child ? this.$parent.plain : this.plain);\n        },\n        is_Custom: function is_Custom() {\n            return !this.is_Plain;\n        },\n        get_Size: function get_Size() {\n            return this.is_Child ? this.$parent.size : this.size;\n        },\n        get_State: function get_State() {\n            // This is a tri-state prop (true, false, null)\n            if (typeof this.state === 'boolean') {\n                return this.state;\n            } else if (this.state === 'valid') {\n                return true;\n            } else if (this.state === 'invalid') {\n                return false;\n            } else if (this.is_Childp && typeof this.$parent.get_State === 'boolean') {\n                return this.$parent.get_State;\n            }\n            return null;\n        },\n        get_StateClass: function get_StateClass() {\n            // This is a tri-state prop (true, false, null)\n            return typeof this.get_State === 'boolean' ? this.get_State ? 'is-valid' : 'is-invalid' : '';\n        },\n        is_Stacked: function is_Stacked() {\n            return Boolean(this.is_Child && this.$parent.stacked);\n        },\n        is_Inline: function is_Inline() {\n            return !this.is_Stacked;\n        },\n        is_ButtonMode: function is_ButtonMode() {\n            return Boolean(this.is_Child && this.$parent.buttons);\n        },\n        get_ButtonVariant: function get_ButtonVariant() {\n            // Local variant trumps parent variant\n            return this.buttonVariant || (this.is_Child ? this.$parent.buttonVariant : null) || 'secondary';\n        },\n        get_Name: function get_Name() {\n            return (this.is_Child ? this.$parent.name || this.$parent.safeId() : this.name) || null;\n        },\n        buttonClasses: function buttonClasses() {\n            // Same for radio & check\n            return ['btn', 'btn-' + this.get_ButtonVariant, Boolean(this.get_Size) ? 'btn-' + this.get_Size : '',\n            // 'disabled' class makes \"button\" look disabled\n            this.is_Disabled ? 'disabled' : '',\n            // 'active' class makes \"button\" look pressed\n            this.is_Checked ? 'active' : '',\n            // Focus class makes button look focused\n            this.hasFocus ? 'focus' : ''];\n        }\n    },\n    methods: {\n        handleFocus: function handleFocus(evt) {\n            // When in buttons mode, we need to add 'focus' class to label when radio focused\n            if (this.is_ButtonMode && evt.target) {\n                if (evt.type === 'focus') {\n                    this.hasFocus = true;\n                } else if (evt.type === 'blur') {\n                    this.hasFocus = false;\n                }\n            }\n        }\n    }\n};\n\nvar formSizeMixin = {\n    props: {\n        size: {\n            type: String,\n            default: null\n        }\n    },\n    computed: {\n        sizeFormClass: function sizeFormClass() {\n            return [this.size ? \"form-control-\" + this.size : null];\n        },\n        sizeBtnClass: function sizeBtnClass() {\n            return [this.size ? \"btn-\" + this.size : null];\n        }\n    }\n};\n\n/* Form control contextual state class computation\n *\n * Returned class is either 'is-valid' or 'is-invalid' based on the 'state' prop\n * state can be one of five values:\n *  - true or 'valid' for is-valid\n *  - false or 'invalid' for is-invalid\n *  - null (or empty string) for no contextual state\n */\n\nvar formStateMixin = {\n    props: {\n        state: {\n            // true/'valid', false/'invalid', '',null\n            type: [Boolean, String],\n            default: null\n        }\n    },\n    computed: {\n        computedState: function computedState() {\n            var state = this.state;\n            if (state === true || state === 'valid') {\n                return true;\n            } else if (state === false || state === 'invalid') {\n                return false;\n            }\n            return null;\n        },\n        stateClass: function stateClass() {\n            var state = this.computedState;\n            if (state === true) {\n                return 'is-valid';\n            } else if (state === false) {\n                return 'is-invalid';\n            }\n            return null;\n        }\n    }\n};\n\n/*\n * SSR Safe Client Side ID attribute generation\n *\n */\n\nvar idMixin = {\n    props: {\n        id: {\n            typ: String,\n            default: null\n        }\n    },\n    data: function data() {\n        return {\n            localId_: null\n        };\n    },\n    mounted: function mounted() {\n        if (!this.$isServer && !this.id && this._uid) {\n            this.localId_ = '__BVID__' + this._uid + '_';\n        }\n    },\n\n    methods: {\n        safeId: function safeId() {\n            var suffix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n            var id = this.id || this.localId_ || null;\n            if (!id) {\n                return null;\n            }\n            suffix = String(suffix).replace(/\\s+/g, '_');\n            return Boolean(suffix) ? id + '_' + suffix : id;\n        }\n    }\n};\n\n/**\n * @param {number} length\n * @return {Array}\n */\nvar range = (function (length) {\n  return Array.apply(null, { length: length });\n});\n\n/*\n * Comon props, computed, data, amd methods for b-pagination and b-pagination.nav\n */\n\n// Make an array of N to N+X\nfunction makePageArray(startNum, numPages) {\n    return range(numPages).map(function (value, index) {\n        return { number: index + startNum, className: null };\n    });\n}\n\n// Threshold of limit size when we start/stop showing ellipsis\nvar ELLIPSIS_THRESHOLD = 3;\n\n// Props object\nvar props$11 = {\n    disabled: {\n        type: Boolean,\n        default: false\n    },\n    value: {\n        type: Number,\n        default: 1\n    },\n    limit: {\n        type: Number,\n        default: 5\n    },\n    size: {\n        type: String,\n        default: 'md'\n    },\n    align: {\n        type: String,\n        default: 'left'\n    },\n    hideGotoEndButtons: {\n        type: Boolean,\n        default: false\n    },\n    ariaLabel: {\n        type: String,\n        default: 'Pagination'\n    },\n    labelFirstPage: {\n        type: String,\n        default: 'Goto first page'\n    },\n    firstText: {\n        type: String,\n        default: '&laquo;'\n    },\n    labelPrevPage: {\n        type: String,\n        default: 'Goto previous page'\n    },\n    prevText: {\n        type: String,\n        default: '&lsaquo;'\n    },\n    labelNextPage: {\n        type: String,\n        default: 'Goto next page'\n    },\n    nextText: {\n        type: String,\n        default: '&rsaquo;'\n    },\n    labelLastPage: {\n        type: String,\n        default: 'Goto last page'\n    },\n    lastText: {\n        type: String,\n        default: '&raquo;'\n    },\n    labelPage: {\n        type: String,\n        default: 'Goto page'\n    },\n    hideEllipsis: {\n        type: Boolean,\n        default: false\n    },\n    ellipsisText: {\n        type: String,\n        default: '&hellip;'\n    }\n};\n\nvar paginationMixin = {\n    data: function data() {\n        return {\n            showFirstDots: false,\n            showLastDots: false,\n            currentPage: this.value\n        };\n    },\n\n    props: props$11,\n    watch: {\n        currentPage: function currentPage(newPage, oldPage) {\n            if (newPage !== oldPage) {\n                this.$emit('input', newPage);\n            }\n        },\n        value: function value(newValue, oldValue) {\n            if (newValue !== oldValue) {\n                this.currentPage = newValue;\n            }\n        }\n    },\n    computed: {\n        btnSize: function btnSize() {\n            return this.size ? 'pagination-' + this.size : '';\n        },\n        alignment: function alignment() {\n            if (this.align === 'center') {\n                return 'justify-content-center';\n            } else if (this.align === 'end' || this.align === 'right') {\n                return 'justify-content-end';\n            }\n            return '';\n        },\n        pageList: function pageList() {\n            // Sanity checks\n            if (this.currentPage > this.numberOfPages) {\n                this.currentPage = this.numberOfPages;\n            } else if (this.currentPage < 1) {\n                this.currentPage = 1;\n            }\n            // - Hide first ellipsis marker\n            this.showFirstDots = false;\n            // - Hide last ellipsis marker\n            this.showLastDots = false;\n            var numLinks = this.limit;\n            var startNum = 1;\n            if (this.numberOfPages <= this.limit) {\n                // Special Case: Less pages available than the limit of displayed pages\n                numLinks = this.numberOfPages;\n            } else if (this.currentPage < this.limit - 1 && this.limit > ELLIPSIS_THRESHOLD) {\n                // We are near the beginning of the page list\n                if (!this.hideEllipsis) {\n                    numLinks = this.limit - 1;\n                    this.showLastDots = true;\n                }\n            } else if (this.numberOfPages - this.currentPage + 2 < this.limit && this.limit > ELLIPSIS_THRESHOLD) {\n                // We are near the end of the list\n                if (!this.hideEllipsis) {\n                    this.showFirstDots = true;\n                    numLinks = this.limit - 1;\n                }\n                startNum = this.numberOfPages - numLinks + 1;\n            } else {\n                // We are somewhere in the middle of the page list\n                if (this.limit > ELLIPSIS_THRESHOLD && !this.hideEllipsis) {\n                    this.showFirstDots = true;\n                    this.showLastDots = true;\n                    numLinks = this.limit - 2;\n                }\n                startNum = this.currentPage - Math.floor(numLinks / 2);\n            }\n            // Sanity checks\n            if (startNum < 1) {\n                startNum = 1;\n            } else if (startNum > this.numberOfPages - numLinks) {\n                startNum = this.numberOfPages - numLinks + 1;\n            }\n            // Generate list of page numbers\n            var pages = makePageArray(startNum, numLinks);\n            // We limit to a total of 3 page buttons on small screens\n            // Ellipsis will also be hidden on small screens\n            if (pages.length > 3) {\n                var idx = this.currentPage - startNum;\n                if (idx === 0) {\n                    // Keep leftmost 3 buttons visible\n                    for (var i = 3; i < pages.length; i++) {\n                        pages[i].className = 'd-none d-sm-flex';\n                    }\n                } else if (idx === pages.length - 1) {\n                    // Keep rightmost 3 buttons visible\n                    for (var _i = 0; _i < pages.length - 3; _i++) {\n                        pages[_i].className = 'd-none d-sm-flex';\n                    }\n                } else {\n                    // hide left button(s)\n                    for (var _i2 = 0; _i2 < idx - 1; _i2++) {\n                        pages[_i2].className = 'd-none d-sm-flex';\n                    }\n                    // hide right button(s)\n                    for (var _i3 = pages.length - 1; _i3 > idx + 1; _i3--) {\n                        pages[_i3].className = 'd-none d-sm-flex';\n                    }\n                }\n            }\n            return pages;\n        }\n    },\n    methods: {\n        isActive: function isActive(pagenum) {\n            return pagenum === this.currentPage;\n        },\n        pageItemClasses: function pageItemClasses(page) {\n            return ['page-item', this.disabled ? 'disabled' : '', this.isActive(page.number) ? 'active' : '', page.className];\n        },\n        pageLinkClasses: function pageLinkClasses(page) {\n            return ['page-link', this.disabled ? 'disabled' : '', this.isActive(page.number) ? 'active' : ''];\n        },\n        getButtons: function getButtons() {\n            // Return only buttons that are visible\n            return selectAll('a.page-link', this.$el).filter(function (btn) {\n                return isVisible(btn);\n            });\n        },\n        setBtnFocus: function setBtnFocus(btn) {\n            this.$nextTick(function () {\n                btn.focus();\n            });\n        },\n        focusFirst: function focusFirst() {\n            var btn = this.getButtons().find(function (el) {\n                return !isDisabled(el);\n            });\n            if (btn && btn.focus && btn !== document.activeElement) {\n                this.setBtnFocus(btn);\n            }\n        },\n        focusLast: function focusLast() {\n            var btn = this.getButtons().reverse().find(function (el) {\n                return !isDisabled(el);\n            });\n            if (btn && btn.focus && btn !== document.activeElement) {\n                this.setBtnFocus(btn);\n            }\n        },\n        focusCurrent: function focusCurrent() {\n            var _this = this;\n\n            var btn = this.getButtons().find(function (el) {\n                return parseInt(getAttr(el, 'aria-posinset'), 10) === _this.currentPage;\n            });\n            if (btn && btn.focus) {\n                this.setBtnFocus(btn);\n            } else {\n                // Fallback if current page is not in button list\n                this.focusFirst();\n            }\n        },\n        focusPrev: function focusPrev() {\n            var buttons = this.getButtons();\n            var idx = buttons.indexOf(document.activeElement);\n            if (idx > 0 && !isDisabled(buttons[idx - 1]) && buttons[idx - 1].focus) {\n                this.setBtnFocus(buttons[idx - 1]);\n            }\n        },\n        focusNext: function focusNext() {\n            var buttons = this.getButtons();\n            var idx = buttons.indexOf(document.activeElement);\n            var cnt = buttons.length - 1;\n            if (idx < cnt && !isDisabled(buttons[idx + 1]) && buttons[idx + 1].focus) {\n                this.setBtnFocus(buttons[idx + 1]);\n            }\n        }\n    }\n};\n\n/*\n * Tooltip/Popover component mixin\n * Common props\n */\nvar PLACEMENTS = {\n    top: 'top',\n    topleft: 'topleft',\n    topright: 'topright',\n    right: 'right',\n    righttop: 'righttop',\n    rightbottom: 'rightbottom',\n    bottom: 'bottom',\n    bottomleft: 'bottomleft',\n    bottomright: 'bottomright',\n    left: 'left',\n    lefttop: 'lefttop',\n    leftbottom: 'leftbottom',\n    auto: 'auto'\n};\n\nvar OBSERVER_CONFIG = {\n    subtree: true,\n    childList: true,\n    characterData: true,\n    attributes: true,\n    attributeFilter: ['class', 'style']\n};\n\nvar toolpopMixin = {\n    props: {\n        target: {\n            // String ID of element, or element/component reference\n            type: [String, Object]\n        },\n        delay: {\n            type: Number,\n            default: 0\n        },\n        offset: {\n            type: [Number, String],\n            default: 0\n        },\n        noFade: {\n            type: Boolean,\n            default: false\n        },\n        container: {\n            // String ID of container, if null body is used (default)\n            type: String,\n            default: null\n        }\n    },\n    created: function created() {\n        // Create non-reactive property\n        this._toolpop = null;\n        this._obs_title = null;\n        this._obs_content = null;\n    },\n    mounted: function mounted() {\n        var _this = this;\n\n        // We do this in a $nextTick in hopes that the target element is in the DOM\n        // And that our children have rendered\n        this.$nextTick(function () {\n            // Instantiate ToolTip/PopOver on target\n            // createToolpop method must exist in main component\n            if (_this.createToolpop()) {\n                // Listen to close signals from others\n                _this.$on('close', _this.onClose);\n                // Observe content Child changes so we can notify popper of possible size change\n                _this.setObservers(true);\n            }\n        });\n    },\n    updated: function updated() {\n        // If content/props changes, etc\n        if (this._toolpop) {\n            this._toolpop.updateConfig(this.getConfig());\n        }\n    },\n    activated: function activated() {\n        // Called when component is inside a <keep-alive> and component brought offline\n        this.setObservers(true);\n    },\n    deactivated: function deactivated() {\n        // Called when component is inside a <keep-alive> and component taken offline\n        if (this._toolpop) {\n            this.setObservers(false);\n            this._toolpop.hide();\n        }\n    },\n    beforeDestroy: function beforeDestroy() {\n        this.$off('close', this.onClose);\n        this.setObservers(false);\n        if (this._toolpop) {\n            this._toolpop.destroy();\n            this._toolpop = null;\n        }\n        // bring our content back if needed\n        this.bringItBack();\n    },\n\n    computed: {\n        baseConfig: function baseConfig() {\n            var cont = this.container;\n            return {\n                // Title prop\n                title: (this.title || '').trim() || '',\n                // Contnt prop (if popover)\n                content: (this.content || '').trim() || '',\n                // Tooltip/Popover placement\n                placement: PLACEMENTS[this.placement] || 'auto',\n                // Container curently needs to be an ID with '#' prepended, if null then body is used\n                container: cont ? /^#/.test(cont) ? cont : '#' + cont : false,\n                // Show/Hide delay\n                delay: parseInt(this.delay, 10) || 0,\n                // Offset can be css distance. if no units, pixels are assumed\n                offset: this.offset || 0,\n                // Disable fade Animation?\n                animation: !Boolean(this.noFade),\n                // Open/Close Trigger(s)\n                trigger: isArray(this.triggers) ? this.triggers.join(' ') : this.triggers,\n                // Callbacks so we can trigger events on component\n                callbacks: {\n                    show: this.onShow,\n                    shown: this.onShown,\n                    hide: this.onHide,\n                    hidden: this.onHidden\n                }\n            };\n        }\n    },\n    methods: {\n        getConfig: function getConfig() {\n            var cfg = assign({}, this.baseConfig);\n            if (this.$refs.title && this.$refs.title.innerHTML.trim()) {\n                // If slot has content, it overrides 'title' prop\n                // We use the DOM node as content to allow components!\n                cfg.title = this.$refs.title;\n                cfg.html = true;\n            }\n            if (this.$refs.content && this.$refs.content.innerHTML.trim()) {\n                // If slot has content, it overrides 'content' prop\n                // We use the DOM node as content to allow components!\n                cfg.content = this.$refs.content;\n                cfg.html = true;\n            }\n            return cfg;\n        },\n        onClose: function onClose(callback) {\n            if (this._toolpop) {\n                this._toolpop.hide(callback);\n            } else if (typeof callback === 'function') {\n                callback();\n            }\n        },\n        updatePosition: function updatePosition() {\n            if (this._toolpop) {\n                // Instruct popper to reposition popover if necessary\n                this._toolpop.update();\n            }\n        },\n        getTarget: function getTarget() {\n            var target = this.target;\n            if (typeof target === 'string') {\n                // Assume ID of element\n                return getById(target);\n            } else if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && isElement(target.$el)) {\n                // Component reference\n                return target.$el;\n            } else if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && isElement(target)) {\n                // Element reference\n                return target;\n            }\n            return null;\n        },\n        onShow: function onShow(evt) {\n            this.$emit('show', evt);\n        },\n        onShown: function onShown(evt) {\n            this.setObservers(true);\n            this.$emit('shown', evt);\n        },\n        onHide: function onHide(evt) {\n            this.$emit('hide', evt);\n        },\n        onHidden: function onHidden(evt) {\n            this.setObservers(false);\n            // bring our content back if needed to keep Vue happy\n            // Tooltip class will move it back to tip when shown again\n            this.bringItBack();\n            this.$emit('hidden', evt);\n        },\n        bringItBack: function bringItBack() {\n            // bring our content back if needed to keep Vue happy\n            if (this.$el && this.$refs.title) {\n                this.$el.appendChild(this.$refs.title);\n            }\n            if (this.$el && this.$refs.content) {\n                this.$el.appendChild(this.$refs.content);\n            }\n        },\n        setObservers: function setObservers(on) {\n            if (on) {\n                if (this.$refs.title) {\n                    this._obs_title = observeDOM(this.$refs.title, this.updatePosition.bind(this), OBSERVER_CONFIG);\n                }\n                if (this.$refs.content) {\n                    this._obs_content = observeDOM(this.$refs.content, this.updatePosition.bind(this), OBSERVER_CONFIG);\n                }\n            } else {\n                if (this._obs_title) {\n                    this._obs_title.disconnect();\n                    this._obs_title = null;\n                }\n                if (this._obs_content) {\n                    this._obs_content.disconnect();\n                    this._obs_content = null;\n                }\n            }\n        }\n    }\n};\n\nvar props$12 = assign({}, copyProps(cardMixin.props, prefixPropName.bind(null, \"body\")), {\n    title: {\n        type: String,\n        default: null\n    },\n    titleTag: {\n        type: String,\n        default: \"h4\"\n    },\n    subTitle: {\n        type: String,\n        default: null\n    },\n    subTitleTag: {\n        type: String,\n        default: \"h6\"\n    },\n    overlay: {\n        type: Boolean,\n        default: false\n    }\n});\n\nvar CardBody = {\n    functional: true,\n    props: props$12,\n    render: function render(h, _ref) {\n        var _class;\n\n        var props = _ref.props,\n            data = _ref.data,\n            slots = _ref.slots;\n\n        var cardBodyChildren = [];\n        if (props.title) {\n            cardBodyChildren.push(h(props.titleTag, {\n                staticClass: \"card-title\",\n                domProps: { innerHTML: props.title }\n            }));\n        }\n        if (props.subTitle) {\n            cardBodyChildren.push(h(props.subTitleTag, {\n                staticClass: \"card-subtitle mb-2 text-muted\",\n                domProps: { innerHTML: props.subTitle }\n            }));\n        }\n        cardBodyChildren.push(slots().default);\n\n        return h(props.bodyTag, lib_common(data, {\n            staticClass: \"card-body\",\n            class: (_class = {\n                \"card-img-overlay\": props.overlay\n            }, defineProperty$1(_class, \"bg-\" + props.bodyBgVariant, Boolean(props.bodyBgVariant)), defineProperty$1(_class, \"border-\" + props.bodyBorderVariant, Boolean(props.bodyBorderVariant)), defineProperty$1(_class, \"text-\" + props.bodyTextVariant, Boolean(props.bodyTextVariant)), _class)\n        }), cardBodyChildren);\n    }\n};\n\nvar props$13 = assign({}, copyProps(cardMixin.props, prefixPropName.bind(null, \"header\")), {\n    header: {\n        type: String,\n        default: null\n    },\n    headerClass: {\n        type: [String, Object, Array],\n        default: null\n    }\n});\n\nvar CardHeader = {\n    functional: true,\n    props: props$13,\n    render: function render(h, _ref) {\n        var _ref2;\n\n        var props = _ref.props,\n            data = _ref.data,\n            slots = _ref.slots;\n\n        return h(props.headerTag, lib_common(data, {\n            staticClass: \"card-header\",\n            class: [props.headerClass, (_ref2 = {}, defineProperty$1(_ref2, \"bg-\" + props.headerBgVariant, Boolean(props.headerBgVariant)), defineProperty$1(_ref2, \"border-\" + props.headerBorderVariant, Boolean(props.headerBorderVariant)), defineProperty$1(_ref2, \"text-\" + props.headerTextVariant, Boolean(props.headerTextVariant)), _ref2)]\n        }), slots().default || [h(\"div\", { domProps: { innerHTML: props.header } })]);\n    }\n};\n\nvar props$14 = assign({}, copyProps(cardMixin.props, prefixPropName.bind(null, \"footer\")), {\n    footer: {\n        type: String,\n        default: null\n    },\n    footerClass: {\n        type: [String, Object, Array],\n        default: null\n    }\n});\n\nvar CardFooter = {\n    functional: true,\n    props: props$14,\n    render: function render(h, _ref) {\n        var _ref2;\n\n        var props = _ref.props,\n            data = _ref.data,\n            slots = _ref.slots;\n\n        return h(props.footerTag, lib_common(data, {\n            staticClass: \"card-footer\",\n            class: [props.footerClass, (_ref2 = {}, defineProperty$1(_ref2, \"bg-\" + props.footerBgVariant, Boolean(props.footerBgVariant)), defineProperty$1(_ref2, \"border-\" + props.footerBorderVariant, Boolean(props.footerBorderVariant)), defineProperty$1(_ref2, \"text-\" + props.footerTextVariant, Boolean(props.footerTextVariant)), _ref2)]\n        }), slots().default || [h(\"div\", { domProps: { innerHTML: props.footer } })]);\n    }\n};\n\nvar props$15 = {\n    src: {\n        type: String,\n        default: null,\n        required: true\n    },\n    alt: {\n        type: String,\n        default: null\n    },\n    top: {\n        type: Boolean,\n        default: false\n    },\n    bottom: {\n        type: Boolean,\n        default: false\n    },\n    fluid: {\n        type: Boolean,\n        default: false\n    }\n};\n\nvar CardImg = {\n    functional: true,\n    props: props$15,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data;\n\n        var staticClass = \"card-img\";\n        if (props.top) {\n            staticClass += \"-top\";\n        } else if (props.bottom) {\n            staticClass += \"-bottom\";\n        }\n\n        return h(\"img\", lib_common(data, {\n            staticClass: staticClass,\n            class: { \"img-fluid\": props.fluid },\n            attrs: { src: props.src, alt: props.alt }\n        }));\n    }\n};\n\nvar cardImgProps = copyProps(props$15, prefixPropName.bind(null, \"img\"));\ncardImgProps.imgSrc.required = false;\n\nvar props$10 = assign({}, props$12, props$13, props$14, cardImgProps, copyProps(cardMixin.props), {\n    align: {\n        type: String,\n        default: null\n    },\n    noBody: {\n        type: Boolean,\n        default: false\n    }\n});\n\nvar card = {\n    functional: true,\n    props: props$10,\n    render: function render(h, _ref) {\n        var _class;\n\n        var props$$1 = _ref.props,\n            data = _ref.data,\n            slots = _ref.slots;\n\n        // The order of the conditionals matter.\n        // We are building the component markup in order.\n        var childNodes = [],\n            img = props$$1.imgSrc ? h(CardImg, { props: pluckProps(cardImgProps, props$$1, unPrefixPropName.bind(null, \"img\")) }) : null;\n\n        if (img) {\n            // Above the header placement.\n            if (props$$1.imgTop || !props$$1.imgBottom) {\n                childNodes.push(img);\n            }\n        }\n        if (props$$1.header || slots().header) {\n            childNodes.push(h(CardHeader, { props: pluckProps(props$13, props$$1) }, slots().header));\n        }\n        if (props$$1.noBody) {\n            childNodes.push(slots().default);\n        } else {\n            childNodes.push(h(CardBody, { props: pluckProps(props$12, props$$1) }, slots().default));\n        }\n        if (props$$1.footer || slots().footer) {\n            childNodes.push(h(CardFooter, { props: pluckProps(props$14, props$$1) }, slots().footer));\n        }\n        if (img && props$$1.imgBottom) {\n            // Below the footer placement.\n            childNodes.push(img);\n        }\n\n        return h(props$$1.tag, lib_common(data, {\n            staticClass: \"card\",\n            class: (_class = {}, defineProperty$1(_class, \"text-\" + props$$1.align, Boolean(props$$1.align)), defineProperty$1(_class, \"bg-\" + props$$1.bgVariant, Boolean(props$$1.bgVariant)), defineProperty$1(_class, \"border-\" + props$$1.borderVariant, Boolean(props$$1.borderVariant)), defineProperty$1(_class, \"text-\" + props$$1.textVariant, Boolean(props$$1.textVariant)), _class)\n        }), childNodes);\n    }\n};\n\nvar props$16 = {\n    tag: {\n        type: String,\n        default: \"div\"\n    },\n    deck: {\n        type: Boolean,\n        default: false\n    },\n    columns: {\n        type: Boolean,\n        default: false\n    }\n};\n\nvar cardGroup = {\n    functional: true,\n    props: props$16,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        var staticClass = \"card-group\";\n        if (props.columns) {\n            staticClass = \"card-columns\";\n        }\n        if (props.deck) {\n            staticClass = \"card-deck\";\n        }\n\n        return h(props.tag, lib_common(data, { staticClass: staticClass }), children);\n    }\n};\n\n// Slide directional classes\nvar DIRECTION = {\n    next: {\n        dirClass: 'carousel-item-left',\n        overlayClass: 'carousel-item-next'\n    },\n    prev: {\n        dirClass: 'carousel-item-right',\n        overlayClass: 'carousel-item-prev'\n    }\n};\n\n// Fallback Transition duration (with a little buffer) in ms\nvar TRANS_DURATION = 600 + 50;\n\n// Transition Event names\nvar TransitionEndEvents = {\n    WebkitTransition: 'webkitTransitionEnd',\n    MozTransition: 'transitionend',\n    OTransition: 'otransitionend oTransitionEnd',\n    transition: 'transitionend'\n};\n\n// Return the brtowser specific transitionend event name\nfunction getTransisionEndEvent(el) {\n    for (var name in TransitionEndEvents) {\n        if (el.style[name] !== undefined) {\n            return TransitionEndEvents[name];\n        }\n    }\n    // fallback\n    return null;\n}\n\nvar carousel = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: \"carousel slide\", style: { background: _vm.background }, attrs: { \"role\": \"region\", \"id\": _vm.safeId(), \"aria-busy\": _vm.isSliding ? 'true' : 'false' }, on: { \"mouseenter\": _vm.pause, \"mouseleave\": _vm.start, \"focusin\": _vm.pause, \"focusout\": _vm.restart, \"keydown\": [function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"left\", 37)) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 0) {\n                        return null;\n                    }$event.stopPropagation();$event.preventDefault();_vm.prev($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"right\", 39)) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 2) {\n                        return null;\n                    }$event.stopPropagation();$event.preventDefault();_vm.next($event);\n                }] } }, [_c('div', { ref: \"inner\", staticClass: \"carousel-inner\", attrs: { \"role\": \"list\", \"id\": _vm.safeId('__BV_inner_') } }, [_vm._t(\"default\")], 2), _vm.controls ? [_c('a', { staticClass: \"carousel-control-prev\", attrs: { \"href\": \"#\", \"role\": \"button\", \"aria-controls\": _vm.safeId('__BV_inner_') }, on: { \"click\": function click($event) {\n                    $event.stopPropagation();$event.preventDefault();_vm.prev($event);\n                }, \"keydown\": [function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13)) {\n                        return null;\n                    }$event.stopPropagation();$event.preventDefault();_vm.prev($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"space\", 32)) {\n                        return null;\n                    }$event.stopPropagation();$event.preventDefault();_vm.prev($event);\n                }] } }, [_c('span', { staticClass: \"carousel-control-prev-icon\", attrs: { \"aria-hidden\": \"true\" } }), _vm._v(\" \"), _c('span', { staticClass: \"sr-only\" }, [_vm._v(_vm._s(_vm.labelPrev))])]), _c('a', { staticClass: \"carousel-control-next\", attrs: { \"href\": \"#\", \"role\": \"button\", \"aria-controls\": _vm.safeId('__BV_inner_') }, on: { \"click\": function click($event) {\n                    $event.stopPropagation();$event.preventDefault();_vm.next($event);\n                }, \"keydown\": [function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13)) {\n                        return null;\n                    }$event.stopPropagation();$event.preventDefault();_vm.next($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"space\", 32)) {\n                        return null;\n                    }$event.stopPropagation();$event.preventDefault();_vm.next($event);\n                }] } }, [_c('span', { staticClass: \"carousel-control-next-icon\", attrs: { \"aria-hidden\": \"true\" } }), _vm._v(\" \"), _c('span', { staticClass: \"sr-only\" }, [_vm._v(_vm._s(_vm.labelNext))])])] : _vm._e(), _c('ol', { directives: [{ name: \"show\", rawName: \"v-show\", value: _vm.indicators, expression: \"indicators\" }], staticClass: \"carousel-indicators\", attrs: { \"role\": \"group\", \"id\": _vm.indicators ? _vm.safeId('__BV_indicators_') : null, \"aria-hidden\": _vm.indicators ? 'false' : 'true', \"aria-label\": _vm.indicators && _vm.labelIndicators ? _vm.labelIndicators : null, \"aria-owns\": _vm.indicators ? _vm.safeId('__BV_inner_') : null } }, _vm._l(_vm.slides.length, function (n) {\n            return _c('li', { key: 'slide_' + n, class: { active: n - 1 === _vm.index }, attrs: { \"role\": \"button\", \"id\": _vm.safeId('__BV_indicator_' + n + '_'), \"tabindex\": _vm.indicators ? '0' : '-1', \"aria-current\": n - 1 === _vm.index ? 'true' : 'false', \"aria-label\": _vm.labelGotoSlide + ' ' + n, \"aria-describedby\": _vm.slides[n - 1].id || null, \"aria-controls\": _vm.safeId('__BV_inner_') }, on: { \"click\": function click($event) {\n                        _vm.setSlide(n - 1);\n                    }, \"keydown\": [function ($event) {\n                        if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13)) {\n                            return null;\n                        }$event.stopPropagation();$event.preventDefault();_vm.setSlide(n - 1);\n                    }, function ($event) {\n                        if (!('button' in $event) && _vm._k($event.keyCode, \"space\", 32)) {\n                            return null;\n                        }$event.stopPropagation();$event.preventDefault();_vm.setSlide(n - 1);\n                    }] } });\n        }))], 2);\n    }, staticRenderFns: [],\n    mixins: [idMixin],\n    data: function data() {\n        return {\n            index: this.value || 0,\n            isSliding: false,\n            intervalId: null,\n            transitionEndEvent: null,\n            slides: []\n        };\n    },\n\n    props: {\n        labelPrev: {\n            type: String,\n            default: 'Previous Slide'\n        },\n        labelNext: {\n            type: String,\n            default: 'Next Slide'\n        },\n        labelGotoSlide: {\n            type: String,\n            default: 'Goto Slide'\n        },\n        labelIndicators: {\n            type: String,\n            default: 'Select a slide to display'\n        },\n        interval: {\n            type: Number,\n            default: 5000\n        },\n        indicators: {\n            type: Boolean,\n            default: false\n        },\n        controls: {\n            type: Boolean,\n            default: false\n        },\n        imgWidth: {\n            // Sniffed by carousel-slide\n            type: [Number, String]\n        },\n        imgHeight: {\n            // Sniffed by carousel-slide\n            type: [Number, String]\n        },\n        background: {\n            type: String\n        },\n        value: {\n            type: Number,\n            default: 0\n        }\n    },\n    computed: {\n        isCycling: function isCycling() {\n            return Boolean(this.intervalId);\n        }\n    },\n    methods: {\n        // Set slide\n        setSlide: function setSlide(slide) {\n            var _this = this;\n\n            // Don't animate when page is not visible\n            if (typeof document !== 'undefined' && document.visibilityState && document.hidden) {\n                return;\n            }\n\n            var len = this.slides.length;\n\n            // Don't do anything if nothing to slide to\n            if (len === 0) {\n                return;\n            }\n\n            // Don't change slide while transitioning, wait until transition is done\n            if (this.isSliding) {\n                // Schedule slide after sliding complete\n                this.$once('sliding-end', function () {\n                    return _this.setSlide(slide);\n                });\n                return;\n            }\n\n            // Make sure we have an integer (you never know!)\n            slide = Math.floor(slide);\n\n            // Set new slide index. Wrap around if necessary\n            this.index = slide >= len ? 0 : slide >= 0 ? slide : len - 1;\n        },\n\n\n        // Previous slide\n        prev: function prev() {\n            this.setSlide(this.index - 1);\n        },\n\n\n        // Next slide\n        next: function next() {\n            this.setSlide(this.index + 1);\n        },\n\n\n        // Pause auto rotation\n        pause: function pause() {\n            if (this.isCycling) {\n                clearInterval(this.intervalId);\n                this.intervalId = null;\n\n                // Make current slide focusable for screen readers\n                this.slides[this.index].tabIndex = 0;\n            }\n        },\n\n\n        // Start auto rotate slides\n        start: function start() {\n            var _this2 = this;\n\n            // Don't start if no intetrval, or if we are already running\n            if (!Boolean(this.interval) || this.isCycling) {\n                return;\n            }\n            this.slides.forEach(function (slide) {\n                slide.tabIndex = -1;\n            });\n            this.intervalId = setInterval(function () {\n                _this2.next();\n            }, Math.max(1000, this.interval));\n        },\n\n\n        // Re-Start auto rotate slides when focus/hover leaves the carousel\n        restart: function restart(evt) {\n            if (!evt.relatedTarget || !this.$el.contains(evt.relatedTarget)) {\n                this.start();\n            }\n        },\n\n\n        // Update slide list\n        updateSlides: function updateSlides() {\n            var _this3 = this;\n\n            this.pause();\n\n            // Get all slides as DOM elements\n            this.slides = selectAll('.carousel-item', this.$refs.inner);\n\n            var numSlides = this.slides.length;\n\n            // Keep slide number in range\n            var index = Math.max(0, Math.min(Math.floor(this.index), numSlides - 1));\n\n            this.slides.forEach(function (slide, idx) {\n                var n = idx + 1;\n                var id = _this3.safeId('__BV_indicator_' + n + '_');\n                if (idx === index) {\n                    addClass(slide, 'active');\n                } else {\n                    removeClass(slide, 'active');\n                }\n                setAttr(slide, 'aria-current', idx === index ? 'true' : 'false');\n                setAttr(slide, 'aria-posinset', String(n));\n                setAttr(slide, 'aria-setsize', String(numSlides));\n                slide.tabIndex = -1;\n                if (id) {\n                    setAttr(slide, 'aria-controlledby', id);\n                }\n            });\n\n            // Set slide as active\n            this.setSlide(index);\n\n            this.start();\n        }\n    },\n    watch: {\n        value: function value(newVal, oldVal) {\n            if (newVal !== oldVal) {\n                this.setSlide(newVal);\n            }\n        },\n        interval: function interval(newVal, oldVal) {\n            if (newVal === oldVal) {\n                return;\n            }\n            if (!Boolean(newVal)) {\n                // Pausing slide show\n                this.pause();\n            } else {\n                // Restarting or Changing interval\n                this.pause();\n                this.start();\n            }\n        },\n        index: function index(val, oldVal) {\n            var _this4 = this;\n\n            if (val === oldVal || this.isSliding) {\n                return;\n            }\n\n            // Determine sliding direction\n            var direction = val > oldVal ? DIRECTION.next : DIRECTION.prev;\n\n            // Rotates\n            if (oldVal === 0 && val === this.slides.length - 1) {\n                direction = DIRECTION.prev;\n            } else if (oldVal === this.slides.length - 1 && val === 0) {\n                direction = DIRECTION.next;\n            }\n\n            // Determine current and next slides\n            var currentSlide = this.slides[oldVal];\n            var nextSlide = this.slides[val];\n\n            // Don't do anything if there aren't any slides to slide to\n            if (!currentSlide || !nextSlide) {\n                return;\n            }\n\n            // Start animating\n            this.isSliding = true;\n            this.$emit('sliding-start', val);\n\n            // Update v-model\n            this.$emit('input', this.index);\n\n            nextSlide.classList.add(direction.overlayClass);\n            // Trigger a reflow of next slide\n            reflow(nextSlide);\n\n            addClass(currentSlide, direction.dirClass);\n            addClass(nextSlide, direction.dirClass);\n\n            // Transition End handler\n            var called = false;\n            var onceTransEnd = function onceTransEnd(evt) {\n                if (called) {\n                    return;\n                }\n                called = true;\n                if (_this4.transitionEndEvent) {\n                    var events = _this4.transitionEndEvent.split(/\\s+/);\n                    events.forEach(function (event) {\n                        eventOff(currentSlide, event, onceTransEnd);\n                    });\n                }\n                _this4._animationTimeout = null;\n\n                removeClass(nextSlide, direction.dirClass);\n                removeClass(nextSlide, direction.overlayClass);\n                addClass(nextSlide, 'active');\n\n                removeClass(currentSlide, 'active');\n                removeClass(currentSlide, direction.dirClass);\n                removeClass(currentSlide, direction.overlayClass);\n\n                setAttr(currentSlide, 'aria-current', 'false');\n                setAttr(nextSlide, 'aria-current', 'true');\n                setAttr(currentSlide, 'aria-hidden', 'true');\n                setAttr(nextSlide, 'aria-hidden', 'false');\n\n                currentSlide.tabIndex = -1;\n                nextSlide.tabIndex = -1;\n\n                if (!_this4.isCycling) {\n                    // Focus the next slide for screen readers if not in play mode\n                    nextSlide.tabIndex = 0;\n                    _this4.$nextTick(function () {\n                        nextSlide.focus();\n                    });\n                }\n\n                _this4.isSliding = false;\n                // Notify ourselves that we're done sliding (slid)\n                _this4.$nextTick(function () {\n                    return _this4.$emit('sliding-end', val);\n                });\n            };\n\n            // Clear transition classes after transition ends\n            if (this.transitionEndEvent) {\n                var events = this.transitionEndEvent.split(/\\s+/);\n                events.forEach(function (event) {\n                    eventOn(currentSlide, event, onceTransEnd);\n                });\n            }\n            // Fallback to setTimeout\n            this._animationTimeout = setTimeout(onceTransEnd, TRANS_DURATION);\n        }\n    },\n    created: function created() {\n        // Create private non-reactive props\n        this._animationTimeout = null;\n    },\n    mounted: function mounted() {\n        // Cache current browser transitionend event name\n        this.transitionEndEvent = getTransisionEndEvent(this.$el) || null;\n\n        // Get all slides\n        this.updateSlides();\n\n        // Observe child changes so we can update slide list\n        observeDOM(this.$refs.inner, this.updateSlides.bind(this), {\n            subtree: false,\n            childList: true,\n            attributes: true,\n            attributeFilter: ['id']\n        });\n    },\n    destroyed: function destroyed() {\n        clearInterval(this.intervalId);\n        clearTimeout(this._animationTimeout);\n        this._animationTimeout = null;\n    }\n};\n\n// Blank image with fill template\nvar BLANK_TEMPLATE = '<svg width=\"%{w}\" height=\"%{h}\" ' + 'xmlns=\"http://www.w3.org/2000/svg\" ' + 'viewBox=\"0 0 %{w} %{h}\" preserveAspectRatio=\"none\">' + '<rect width=\"100%\" height=\"100%\" style=\"fill:%{f};\"></rect>' + '</svg>';\n\nfunction makeBlankImgSrc(width, height, color) {\n    var src = encodeURIComponent(BLANK_TEMPLATE.replace('%{w}', String(width)).replace('%{h}', String(height)).replace('%{f}', color));\n    return 'data:image/svg+xml;charset=UTF-8,' + src;\n}\n\nvar props$17 = {\n    src: {\n        type: String,\n        default: null\n    },\n    alt: {\n        type: String,\n        default: null\n    },\n    width: {\n        type: [Number, String],\n        default: null\n    },\n    height: {\n        type: [Number, String],\n        default: null\n    },\n    block: {\n        type: Boolean,\n        default: false\n    },\n    fluid: {\n        type: Boolean,\n        default: false\n    },\n    fluidGrow: {\n        // Gives fluid images class `w-100` to make them grow to fit container\n        type: Boolean,\n        default: false\n    },\n    rounded: {\n        // rounded can be:\n        //   false: no rounding of corners\n        //   true: slightly rounded corners\n        //   'top': top corners rounded\n        //   'right': right corners rounded\n        //   'bottom': bottom corners rounded\n        //   'left': left corners rounded\n        //   'circle': circle/oval\n        //   '0': force rounding off\n        type: [Boolean, String],\n        default: false\n    },\n    thumbnail: {\n        type: Boolean,\n        default: false\n    },\n    left: {\n        type: Boolean,\n        default: false\n    },\n    right: {\n        type: Boolean,\n        default: false\n    },\n    center: {\n        type: Boolean,\n        default: false\n    },\n    blank: {\n        type: Boolean,\n        default: false\n    },\n    blankColor: {\n        type: String,\n        default: 'transparent'\n    }\n};\n\nvar bImg = {\n    functional: true,\n    props: props$17,\n    render: function render(h, _ref) {\n        var _class;\n\n        var props = _ref.props,\n            data = _ref.data;\n\n        var src = props.src;\n        var width = Boolean(parseInt(props.width, 10)) ? parseInt(props.width, 10) : null;\n        var height = Boolean(parseInt(props.height, 10)) ? parseInt(props.height, 10) : null;\n        var align = null;\n        var block = props.block;\n        if (props.blank) {\n            if (!height && Boolean(width)) {\n                height = width;\n            } else if (!width && Boolean(height)) {\n                width = height;\n            }\n            if (!width && !height) {\n                width = 1;\n                height = 1;\n            }\n            // Make a blank SVG image\n            src = makeBlankImgSrc(width, height, props.blankColor || 'transparent');\n        }\n        if (props.left) {\n            align = 'float-left';\n        } else if (props.right) {\n            align = 'float-right';\n        } else if (props.center) {\n            align = 'mx-auto';\n            block = true;\n        }\n        return h('img', lib_common(data, {\n            attrs: {\n                'src': src,\n                'alt': props.alt,\n                'width': width ? String(width) : null,\n                'height': height ? String(height) : null\n            },\n            class: (_class = {\n                'img-thumbnail': props.thumbnail,\n                'img-fluid': props.fluid || props.fluidGrow,\n                'w-100': props.fluidGrow,\n                'rounded': props.rounded === '' || props.rounded === true\n            }, defineProperty$1(_class, 'rounded-' + props.rounded, typeof props.rounded === 'string' && props.rounded !== ''), defineProperty$1(_class, align, Boolean(align)), defineProperty$1(_class, 'd-block', block), _class)\n        }));\n    }\n};\n\nvar carouselSlide = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: \"carousel-item\", style: { background: _vm.background }, attrs: { \"role\": \"listitem\", \"id\": _vm.safeId() } }, [_vm._t(\"img\", [_vm.imgSrc || _vm.imgBlank ? _c('b-img', { attrs: { \"fluid-grow\": \"\", \"block\": \"\", \"blank\": _vm.imgBlank, \"blank-color\": _vm.imgBlankColor, \"src\": _vm.imgSrc, \"width\": _vm.computedWidth, \"height\": _vm.computedHeight, \"alt\": _vm.imgAlt } }) : _vm._e()]), _c(_vm.contentTag, { tag: \"div\", class: _vm.contentClasses }, [_vm.caption ? _c(_vm.captionTag, { tag: \"h3\", domProps: { \"innerHTML\": _vm._s(_vm.caption) } }) : _vm._e(), _vm.text ? _c(_vm.textTag, { tag: \"p\", domProps: { \"innerHTML\": _vm._s(_vm.text) } }) : _vm._e(), _vm._t(\"default\")], 2)], 2);\n    }, staticRenderFns: [],\n    components: { bImg: bImg },\n    mixins: [idMixin],\n    props: {\n        imgSrc: {\n            type: String,\n            default: function _default() {\n                if (this && this.src) {\n                    // Deprecate src\n                    warn(\"b-carousel-slide: prop 'src' has been deprecated. Use 'img-src' instead\");\n                    return this.src;\n                }\n                return null;\n            }\n        },\n        src: {\n            // Deprecated: use img-src instead\n            type: String\n        },\n        imgAlt: {\n            type: String\n        },\n        imgWidth: {\n            type: [Number, String]\n        },\n        imgHeight: {\n            type: [Number, String]\n        },\n        imgBlank: {\n            type: Boolean,\n            default: false\n        },\n        imgBlankColor: {\n            type: String,\n            default: 'transparent'\n        },\n        contentVisibleUp: {\n            type: String\n        },\n        contentTag: {\n            type: String,\n            default: \"div\"\n        },\n        caption: {\n            type: String\n        },\n        captionTag: {\n            type: String,\n            default: \"h3\"\n        },\n        text: {\n            type: String\n        },\n        textTag: {\n            type: String,\n            default: \"p\"\n        },\n        background: {\n            type: String\n        }\n    },\n    computed: {\n        contentClasses: function contentClasses() {\n            return ['carousel-caption', this.contentVisibleUp ? 'd-none' : '', this.contentVisibleUp ? 'd-' + this.contentVisibleUp + '-block' : ''];\n        },\n        computedWidth: function computedWidth() {\n            // Use local width, or try parent width\n            return this.imgWidth || this.$parent.imgWidth;\n        },\n        computedHeight: function computedHeight() {\n            // Use local height, or try parent height\n            return this.imgHeight || this.$parent.imgHeight;\n        }\n    }\n};\n\n/**\n * Generates a prop object with a type of\n * [Boolean, String, Number]\n */\nfunction boolStrNum() {\n    return {\n        type: [Boolean, String, Number],\n        default: false\n    };\n}\n\n/**\n * Generates a prop object with a type of\n * [String, Number]\n */\nfunction strNum() {\n    return {\n        type: [String, Number],\n        default: null\n    };\n}\n\nvar computeBkPtClass = memoize(function computeBkPt(type, breakpoint, val) {\n    var className = type;\n    if (val === false || val === null || val === undefined) {\n        return undefined;\n    }\n    if (breakpoint) {\n        className += \"-\" + breakpoint;\n    }\n    // Handling the boolean style prop when accepting [Boolean, String, Number]\n    // means Vue will not convert <b-col sm /> to sm: true for us.\n    // Since the default is false, an empty string indicates the prop's presence.\n    if (type === \"col\" && (val === \"\" || val === true)) {\n        // .col-md\n        return className.toLowerCase();\n    }\n    // .order-md-6\n    className += \"-\" + val;\n    return className.toLowerCase();\n});\n\nvar BREAKPOINTS = [\"sm\", \"md\", \"lg\", \"xl\"];\n// Supports classes like: .col-sm, .col-md-6, .col-lg-auto\nvar breakpointCol = BREAKPOINTS.reduce(function (propMap, breakpoint) {\n    return propMap[breakpoint] = boolStrNum(), propMap;\n}, create(null));\n// Supports classes like: .offset-md-1, .offset-lg-12\nvar breakpointOffset = BREAKPOINTS.reduce(function (propMap, breakpoint) {\n    return propMap[suffixPropName(breakpoint, \"offset\")] = strNum(), propMap;\n}, create(null));\n// Supports classes like: .order-md-1, .order-lg-12\nvar breakpointOrder = BREAKPOINTS.reduce(function (propMap, breakpoint) {\n    return propMap[suffixPropName(breakpoint, \"order\")] = strNum(), propMap;\n}, create(null));\n\n// For loop doesn't need to check hasOwnProperty\n// when using an object created from null\nvar breakpointPropMap = assign(create(null), {\n    col: keys(breakpointCol),\n    offset: keys(breakpointOffset),\n    order: keys(breakpointOrder)\n});\n\nvar props$18 = assign({}, breakpointCol, breakpointOffset, breakpointOrder, {\n    tag: {\n        type: String,\n        default: \"div\"\n    },\n    // Generic flexbox .col\n    col: {\n        type: Boolean,\n        default: false\n    },\n    // .col-[1-12]|auto\n    cols: strNum(),\n    // .offset-[1-12]\n    offset: strNum(),\n    // Flex ordering utility .order-[1-12]\n    order: strNum(),\n    alignSelf: {\n        type: String,\n        default: null,\n        validator: function validator(str) {\n            return arrayIncludes([\"auto\", \"start\", \"end\", \"center\", \"baseline\", \"stretch\"], str);\n        }\n    }\n});\n\n/**\n * We need \".col\" to default in when no other props are passed,\n * but always render when col=true.\n */\nvar col = {\n    functional: true,\n    props: props$18,\n    render: function render(h, _ref) {\n        var _classList$push;\n\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        var classList = [];\n        // Loop through `col`, `offset`, `order` breakpoint props\n        for (var type in breakpointPropMap) {\n            // Returns colSm, offset, offsetSm, orderMd, etc.\n            var _keys = breakpointPropMap[type];\n            for (var i = 0; i < _keys.length; i++) {\n                // computeBkPt(col, colSm => Sm, value=[String, Number, Boolean])\n                var c = computeBkPtClass(type, _keys[i].replace(type, \"\"), props[_keys[i]]);\n                // If a class is returned, push it onto the array.\n                if (c) {\n                    classList.push(c);\n                }\n            }\n        }\n\n        classList.push((_classList$push = {\n            // Default to .col if no other classes generated nor `cols` specified.\n            col: props.col || classList.length === 0 && !props.cols\n        }, defineProperty$1(_classList$push, \"col-\" + props.cols, props.cols), defineProperty$1(_classList$push, \"offset-\" + props.offset, props.offset), defineProperty$1(_classList$push, \"order-\" + props.order, props.order), defineProperty$1(_classList$push, \"align-self-\" + props.alignSelf, props.alignSelf), _classList$push));\n\n        return h(props.tag, lib_common(data, { class: classList }), children);\n    }\n};\n\n// Events we emit on $root\nvar EVENT_STATE = 'bv::collapse::state';\nvar EVENT_ACCORDION = 'bv::collapse::accordion';\n\n// Events we listen to on $root\nvar EVENT_TOGGLE = 'bv::toggle::collapse';\n\nvar collapse = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('transition', { attrs: { \"enter-class\": \"\", \"enter-active-class\": \"collapsing\", \"enter-to-class\": \"\", \"leave-class\": \"\", \"leave-active-class\": \"collapsing\", \"leave-to-class\": \"\" }, on: { \"enter\": _vm.onEnter, \"after-enter\": _vm.onAfterEnter, \"leave\": _vm.onLeave, \"after-leave\": _vm.onAfterLeave } }, [_c(_vm.tag, { directives: [{ name: \"show\", rawName: \"v-show\", value: _vm.show, expression: \"show\" }], tag: \"component\", class: _vm.classObject, attrs: { \"id\": _vm.id || null }, on: { \"click\": _vm.clickHandler } }, [_vm._t(\"default\")], 2)], 1);\n    }, staticRenderFns: [],\n    mixins: [listenOnRootMixin],\n    data: function data() {\n        return {\n            show: this.visible,\n            transitioning: false\n        };\n    },\n\n    model: {\n        prop: 'visible',\n        event: 'input'\n    },\n    props: {\n        id: {\n            type: String,\n            required: true\n        },\n        isNav: {\n            type: Boolean,\n            default: false\n        },\n        accordion: {\n            type: String,\n            default: null\n        },\n        visible: {\n            type: Boolean,\n            default: false\n        },\n        tag: {\n            type: String,\n            default: 'div'\n        }\n    },\n    watch: {\n        visible: function visible(newVal) {\n            if (newVal !== this.show) {\n                this.show = newVal;\n            }\n        },\n        show: function show(newVal, oldVal) {\n            if (newVal !== oldVal) {\n                this.emitState();\n            }\n        }\n    },\n    computed: {\n        classObject: function classObject() {\n            return {\n                'navbar-collapse': this.isNav,\n                'collapse': !this.transitioning,\n                'show': this.show && !this.transitioning\n            };\n        }\n    },\n    methods: {\n        toggle: function toggle() {\n            this.show = !this.show;\n        },\n        onEnter: function onEnter(el) {\n            el.style.height = 0;\n            reflow(el);\n            el.style.height = el.scrollHeight + 'px';\n            this.transitioning = true;\n            // This should be moved out so we can add cancellable events\n            this.$emit('show');\n        },\n        onAfterEnter: function onAfterEnter(el) {\n            el.style.height = null;\n            this.transitioning = false;\n            this.$emit('shown');\n        },\n        onLeave: function onLeave(el) {\n            el.style.height = 'auto';\n            el.style.display = 'block';\n            el.style.height = el.getBoundingClientRect().height + 'px';\n            reflow(el);\n            this.transitioning = true;\n            el.style.height = 0;\n            // This should be moved out so we can add cancellable events\n            this.$emit('hide');\n        },\n        onAfterLeave: function onAfterLeave(el) {\n            el.style.height = null;\n            this.transitioning = false;\n            this.$emit('hidden');\n        },\n        emitState: function emitState() {\n            this.$emit('input', this.show);\n            // Let v-b-toggle know the state of this collapse\n            this.$root.$emit(EVENT_STATE, this.id, this.show);\n            if (this.accordion && this.show) {\n                // Tell the other collapses in this accordion to close\n                this.$root.$emit(EVENT_ACCORDION, this.id, this.accordion);\n            }\n        },\n        clickHandler: function clickHandler(evt) {\n            // If we are in a nav/navbar, close the collapse when non-disabled link clicked\n            var el = evt.target;\n            if (!this.isNav || !el || getComputedStyle(this.$el).display !== 'block') {\n                return;\n            }\n            if (hasClass(el, 'nav-link') || hasClass(el, 'dropdown-item')) {\n                this.show = false;\n            }\n        },\n        handleToggleEvt: function handleToggleEvt(target) {\n            if (target !== this.id) {\n                return;\n            }\n            this.toggle();\n        },\n        handleAccordionEvt: function handleAccordionEvt(openedId, accordion) {\n            if (!this.accordion || accordion !== this.accordion) {\n                return;\n            }\n            if (openedId === this.id) {\n                // Open this collapse if not shown\n                if (!this.show) {\n                    this.toggle();\n                }\n            } else {\n                // Close this collapse if shown\n                if (this.show) {\n                    this.toggle();\n                }\n            }\n        },\n        handleResize: function handleResize() {\n            // Handler for orientation/resize to set collapsed state in nav/navbar\n            this.show = getComputedStyle(this.$el).display === 'block';\n        }\n    },\n    created: function created() {\n        // Listen for toggle events to open/close us\n        this.listenOnRoot(EVENT_TOGGLE, this.handleToggleEvt);\n        // Listen to otehr collapses for accordion events\n        this.listenOnRoot(EVENT_ACCORDION, this.handleAccordionEvt);\n    },\n    mounted: function mounted() {\n        if (this.isNav && typeof document !== 'undefined') {\n            // Set up handlers\n            window.addEventListener('resize', this.handleResize, false);\n            window.addEventListener('orientationchange', this.handleResize, false);\n            this.handleResize();\n        }\n        this.emitState();\n    },\n    beforeDestroy: function beforeDestroy() {\n        if (this.isNav && typeof document !== 'undefined') {\n            window.removeEventListener('resize', this.handleResize, false);\n            window.removeEventListener('orientationchange', this.handleResize, false);\n        }\n    }\n};\n\nvar props$19 = {\n    tag: {\n        type: String,\n        default: \"div\"\n    },\n    fluid: {\n        type: Boolean,\n        default: false\n    }\n};\n\nvar Container = {\n    functional: true,\n    props: props$19,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(props.tag, lib_common(data, {\n            class: {\n                'container': !props.fluid,\n                'container-fluid': props.fluid\n            }\n        }), children);\n    }\n};\n\nvar dropdown = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: _vm.dropdownClasses, attrs: { \"id\": _vm.safeId() } }, [_vm.split ? _c('b-button', { ref: \"button\", attrs: { \"id\": _vm.safeId('_BV_button_'), \"aria-haspopup\": _vm.split ? 'true' : null, \"aria-expanded\": _vm.split ? _vm.visible ? 'true' : 'false' : null, \"variant\": _vm.variant, \"size\": _vm.size, \"disabled\": _vm.disabled }, on: { \"click\": function click($event) {\n                    $event.stopPropagation();$event.preventDefault();_vm.click($event);\n                } } }, [_vm._t(\"button-content\", [_vm._t(\"text\", [_vm._v(_vm._s(_vm.text))])])], 2) : _vm._e(), _c('b-button', { ref: \"toggle\", class: ['dropdown-toggle', { 'dropdown-toggle-split': _vm.split }], attrs: { \"id\": _vm.safeId('_BV_toggle_'), \"aria-haspopup\": _vm.split ? null : 'true', \"aria-expanded\": _vm.split ? null : _vm.visible ? 'true' : 'false', \"variant\": _vm.variant, \"size\": _vm.size, \"disabled\": _vm.disabled }, on: { \"click\": function click($event) {\n                    $event.stopPropagation();$event.preventDefault();_vm.toggle($event);\n                } } }, [_vm.split ? _c('span', { staticClass: \"sr-only\" }, [_vm._v(_vm._s(_vm.toggleText))]) : _vm._t(\"button-content\", [_vm._t(\"text\", [_vm._v(_vm._s(_vm.text))])])], 2), _c('div', { ref: \"menu\", class: _vm.menuClasses, attrs: { \"role\": _vm.role, \"aria-labelledby\": _vm.safeId(_vm.split ? '_BV_toggle_' : '_BV_button_') }, on: { \"mouseover\": _vm.onMouseOver, \"keyup\": function keyup($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"esc\", 27)) {\n                        return null;\n                    }_vm.onEsc($event);\n                }, \"keydown\": [function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"tab\", 9)) {\n                        return null;\n                    }_vm.onTab($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"up\", 38)) {\n                        return null;\n                    }_vm.focusNext($event, true);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"down\", 40)) {\n                        return null;\n                    }_vm.focusNext($event, false);\n                }] } }, [_vm._t(\"default\")], 2)], 1);\n    }, staticRenderFns: [],\n    mixins: [idMixin, dropdownMixin],\n    components: { bButton: bBtn },\n    props: {\n        split: {\n            type: Boolean,\n            default: false\n        },\n        toggleText: {\n            type: String,\n            default: 'Toggle Dropdown'\n        },\n        size: {\n            type: String,\n            default: null\n        },\n        variant: {\n            type: String,\n            default: null\n        },\n        role: {\n            type: String,\n            default: 'menu'\n        }\n    },\n    computed: {\n        dropdownClasses: function dropdownClasses() {\n            return ['btn-group', 'b-dropdown', 'dropdown', this.dropup ? 'dropup' : '', this.visible ? 'show' : ''];\n        },\n        menuClasses: function menuClasses() {\n            return ['dropdown-menu', this.right ? 'dropdown-menu-right' : '', this.visible ? 'show' : ''];\n        }\n    }\n};\n\nvar props$20 = propsFactory();\n\nvar dropdownItem = {\n    functional: true,\n    props: props$20,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(bLink, lib_common(data, {\n            props: props,\n            staticClass: \"dropdown-item\",\n            attrs: { role: \"menuitem\" }\n        }), children);\n    }\n};\n\nvar props$21 = {\n    disabled: {\n        type: Boolean,\n        default: false\n    }\n};\n\nvar dropdownItemButton = {\n    functional: true,\n    props: props$21,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            parent = _ref.parent,\n            children = _ref.children;\n\n        return h(\"button\", lib_common(data, {\n            props: props,\n            staticClass: \"dropdown-item\",\n            attrs: { role: \"menuitem\", type: \"button\", disabled: props.disabled },\n            on: {\n                click: function click(e) {\n                    parent.$root.$emit(\"clicked::link\", e);\n                }\n            }\n        }), children);\n    }\n};\n\nvar props$22 = {\n    tag: {\n        type: String,\n        default: \"div\"\n    }\n};\n\nvar dropdownDivider = {\n    functional: true,\n    props: props$22,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data;\n\n        return h(props.tag, lib_common(data, {\n            staticClass: \"dropdown-divider\",\n            attrs: { role: \"separator\" }\n        }));\n    }\n};\n\nvar props$23 = {\n    id: {\n        type: String,\n        default: null\n    },\n    tag: {\n        type: String,\n        default: \"h6\"\n    }\n};\n\nvar dropdownHeader = {\n    functional: true,\n    props: props$23,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(props.tag, lib_common(data, {\n            staticClass: \"dropdown-header\",\n            attrs: { id: props.id || null }\n        }), children);\n    }\n};\n\nvar props$24 = {\n    type: {\n        type: String,\n        default: \"iframe\",\n        validator: function validator(str) {\n            return arrayIncludes([\"iframe\", \"embed\", \"video\", \"object\", \"img\", \"b-img\", \"b-img-lazy\"], str);\n        }\n    },\n    tag: {\n        type: String,\n        default: \"div\"\n    },\n    aspect: {\n        type: String,\n        default: \"16by9\"\n    }\n};\n\nvar embed = {\n    functional: true,\n    props: props$24,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(props.tag, {\n            ref: data.ref,\n            staticClass: \"embed-responsive\",\n            class: defineProperty$1({}, \"embed-responsive-\" + props.aspect, Boolean(props.aspect))\n        }, [h(props.type, lib_common(data, { ref: '', staticClass: \"embed-responsive-item\" }), children)]);\n    }\n};\n\nvar props$25 = {\n    id: {\n        type: String,\n        default: null\n    },\n    inline: {\n        type: Boolean,\n        default: false\n    },\n    novalidate: {\n        type: Boolean,\n        default: false\n    },\n    validated: {\n        type: Boolean,\n        default: false\n    }\n};\n\nvar Form = {\n    functional: true,\n    props: props$25,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(\"form\", lib_common(data, {\n            class: {\n                \"form-inline\": props.inline,\n                \"was-validated\": props.validated\n            },\n            attrs: {\n                id: props.id,\n                novalidate: props.novalidate\n            }\n        }), children);\n    }\n};\n\nvar props$26 = {\n    tag: {\n        type: String,\n        default: \"div\"\n    }\n};\n\nvar bFormRow = {\n    functional: true,\n    props: props$26,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(props.tag, lib_common(data, {\n            staticClass: \"form-row\"\n        }), children);\n    }\n};\n\nvar props$27 = {\n    id: {\n        type: String,\n        default: null\n    },\n    tag: {\n        type: String,\n        default: \"small\"\n    },\n    textVariant: {\n        type: String,\n        default: \"muted\"\n    },\n    inline: {\n        type: Boolean,\n        default: false\n    }\n};\n\nvar bFormText = {\n    functional: true,\n    props: props$27,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(props.tag, lib_common(data, {\n            class: defineProperty$1({\n                'form-text': !Boolean(props.inline)\n            }, \"text-\" + props.textVariant, Boolean(props.textVariant)),\n            attrs: {\n                id: props.id\n            }\n        }), children);\n    }\n};\n\nvar props$28 = {\n    id: {\n        type: String,\n        default: null\n    },\n    tag: {\n        type: String,\n        default: 'div'\n    }\n};\n\nvar bFormFeedback = {\n    functional: true,\n    props: props$28,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(props.tag, lib_common(data, {\n            staticClass: 'invalid-feedback',\n            attrs: {\n                id: props.id\n            }\n        }), children);\n    }\n};\n\n// Selector to find first input with an ID. This Order is important!\nvar INPUT_SELECTOR = ['[role=\"radiogroup\"][id]', '[role=\"group\"][id]', 'input[id]', 'select[id]', 'textarea[id]', '.form-control[id]', '.form-control-plaintext[id]', '.dropdown[id]', '.dropup[id]'].join(',');\n\nvar formGroup = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('b-form-row', { class: _vm.groupClasses, attrs: { \"id\": _vm.safeId(), \"role\": \"group\", \"aria-describedby\": _vm.describedByIds } }, [_vm.label || _vm.$slots['label'] || _vm.horizontal ? _c('label', { class: _vm.labelClasses, attrs: { \"for\": _vm.targetId, \"id\": _vm.labelId } }, [_vm._t(\"label\", [_c('span', { domProps: { \"innerHTML\": _vm._s(_vm.label) } })])], 2) : _vm._e(), _c('div', { ref: \"content\", class: _vm.inputLayoutClasses }, [_vm._t(\"default\"), _c('b-form-feedback', { directives: [{ name: \"show\", rawName: \"v-show\", value: _vm.feedback || _vm.$slots['feedback'], expression: \"feedback || $slots['feedback']\" }], attrs: { \"id\": _vm.feedbackId, \"role\": \"alert\", \"aria-live\": \"assertive\", \"aria-atomic\": \"true\" } }, [_vm._t(\"feedback\", [_c('span', { domProps: { \"innerHTML\": _vm._s(_vm.feedback) } })])], 2), _vm.description || _vm.$slots['description'] ? _c('b-form-text', { attrs: { \"id\": _vm.descriptionId } }, [_vm._t(\"description\", [_c('span', { domProps: { \"innerHTML\": _vm._s(_vm.description) } })])], 2) : _vm._e()], 2)]);\n    }, staticRenderFns: [],\n    mixins: [idMixin, formStateMixin],\n    components: {\n        bFormRow: bFormRow,\n        bFormText: bFormText,\n        bFormFeedback: bFormFeedback\n    },\n    data: function data() {\n        return {\n            targetId: null\n        };\n    },\n\n    props: {\n        labelFor: {\n            type: String,\n            default: null\n        },\n        validated: {\n            type: Boolean,\n            value: false\n        },\n        horizontal: {\n            type: Boolean,\n            default: false\n        },\n        labelCols: {\n            type: Number,\n            default: 3,\n            validator: function validator(value) {\n                if (value >= 1 && value <= 11) {\n                    return true;\n                }\n                warn('b-form-group: label-cols must be a value between 1 and 11');\n                return false;\n            }\n        },\n        breakpoint: {\n            type: String,\n            default: 'sm'\n        },\n        labelTextAlign: {\n            type: String,\n            default: null\n        },\n        label: {\n            type: String,\n            default: null\n        },\n        labelSrOnly: {\n            type: Boolean,\n            default: false\n        },\n        description: {\n            type: String,\n            default: null\n        },\n        feedback: {\n            type: String,\n            default: null\n        }\n    },\n    computed: {\n        inputState: function inputState() {\n            return this.stateClass;\n        },\n        groupClasses: function groupClasses() {\n            return ['b-form-group', 'form-group', this.validated ? 'was-validated' : null, this.inputState];\n        },\n        labelClasses: function labelClasses() {\n            return [this.labelSrOnly ? 'sr-only' : 'col-form-label', this.labelLayout, this.labelAlignClass];\n        },\n        labelLayout: function labelLayout() {\n            if (this.labelSrOnly) {\n                return null;\n            }\n            return this.horizontal ? 'col-' + this.breakpoint + '-' + this.labelCols : 'col-12';\n        },\n        labelAlignClass: function labelAlignClass() {\n            if (this.labelSrOnly) {\n                return null;\n            }\n            return this.labelTextAlign ? 'text-' + this.labelTextAlign : null;\n        },\n        inputLayoutClasses: function inputLayoutClasses() {\n            return [this.horizontal ? 'col-' + this.breakpoint + '-' + (12 - this.labelCols) : 'col-12'];\n        },\n        labelId: function labelId() {\n            return this.label || this.$slots['label'] ? this.safeId('_BV_label_') : null;\n        },\n        descriptionId: function descriptionId() {\n            if (this.description || this.$slots['description']) {\n                return this.safeId('_BV_description_');\n            }\n            return null;\n        },\n        feedbackId: function feedbackId() {\n            if (this.feedback || this.$slots['feedback']) {\n                return this.safeId('_BV_feedback_');\n            }\n            return null;\n        },\n        describedByIds: function describedByIds() {\n            if (this.id) {\n                return [this.labelId, this.descriptionId, this.feedbackId].filter(function (i) {\n                    return i;\n                }).join(' ');\n            }\n            return null;\n        }\n    },\n    methods: {\n        updateTargetId: function updateTargetId() {\n            if (this.labelFor) {\n                // User supplied for target\n                this.targetId = this.labelFor;\n                return;\n            }\n            // Else find first input with ID\n            var content = this.$refs.content;\n            if (!content) {\n                this.targetId = null;\n            } else {\n                // Find first input element with an ID\n                var input = select(INPUT_SELECTOR, content);\n                this.targetId = input && input.id ? input.id : null;\n            }\n        }\n    },\n    mounted: function mounted() {\n        var _this = this;\n\n        this.targetId = this.labelFor || null;\n        // We run in nextTick to ensure auto IDs are available\n        this.$nextTick(function () {\n            return _this.updateTargetId();\n        });\n    },\n    updated: function updated() {\n        var _this2 = this;\n\n        // We run in nextTick to ensure auto IDs are available\n        this.$nextTick(function () {\n            return _this2.updateTargetId();\n        });\n    }\n};\n\nvar bFormCheckbox = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _vm.is_Plain && !_vm.is_ButtonMode ? _c('div', { class: ['form-check', _vm.is_Stacked ? '' : 'form-check-inline'] }, [_c('label', { staticClass: \"form-check-label\" }, [_c('input', { directives: [{ name: \"model\", rawName: \"v-model\", value: _vm.computedLocalChecked, expression: \"computedLocalChecked\" }], ref: \"check\", staticClass: \"form-check-input\", attrs: { \"type\": \"checkbox\", \"id\": _vm.safeId(), \"name\": _vm.get_Name, \"true-value\": _vm.value, \"false-value\": _vm.uncheckedValue, \"disabled\": _vm.is_Disabled, \"required\": _vm.is_Required, \"autocomplete\": \"off\", \"aria-required\": _vm.is_Required ? 'true' : null }, domProps: { \"value\": _vm.value, \"checked\": Array.isArray(_vm.computedLocalChecked) ? _vm._i(_vm.computedLocalChecked, _vm.value) > -1 : _vm._q(_vm.computedLocalChecked, _vm.value) }, on: { \"change\": _vm.handleChange, \"__c\": function __c($event) {\n                    var $$a = _vm.computedLocalChecked,\n                        $$el = $event.target,\n                        $$c = $$el.checked ? _vm.value : _vm.uncheckedValue;if (Array.isArray($$a)) {\n                        var $$v = _vm.value,\n                            $$i = _vm._i($$a, $$v);if ($$el.checked) {\n                            $$i < 0 && (_vm.computedLocalChecked = $$a.concat($$v));\n                        } else {\n                            $$i > -1 && (_vm.computedLocalChecked = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));\n                        }\n                    } else {\n                        _vm.computedLocalChecked = $$c;\n                    }\n                } } }), _vm._t(\"default\")], 2)]) : _c('label', { class: _vm.is_ButtonMode ? _vm.buttonClasses : _vm.labelClasses }, [_c('input', { directives: [{ name: \"model\", rawName: \"v-model\", value: _vm.computedLocalChecked, expression: \"computedLocalChecked\" }], ref: \"check\", class: _vm.is_ButtonMode ? '' : 'custom-control-input', attrs: { \"type\": \"checkbox\", \"id\": _vm.safeId(), \"name\": _vm.get_Name, \"true-value\": _vm.value, \"false-value\": _vm.uncheckedValue, \"disabled\": _vm.is_Disabled, \"required\": _vm.is_Required, \"autocomplete\": \"off\", \"aria-required\": _vm.is_Required ? 'true' : null }, domProps: { \"value\": _vm.value, \"checked\": Array.isArray(_vm.computedLocalChecked) ? _vm._i(_vm.computedLocalChecked, _vm.value) > -1 : _vm._q(_vm.computedLocalChecked, _vm.value) }, on: { \"focus\": _vm.handleFocus, \"blur\": _vm.handleFocus, \"change\": _vm.handleChange, \"__c\": function __c($event) {\n                    var $$a = _vm.computedLocalChecked,\n                        $$el = $event.target,\n                        $$c = $$el.checked ? _vm.value : _vm.uncheckedValue;if (Array.isArray($$a)) {\n                        var $$v = _vm.value,\n                            $$i = _vm._i($$a, $$v);if ($$el.checked) {\n                            $$i < 0 && (_vm.computedLocalChecked = $$a.concat($$v));\n                        } else {\n                            $$i > -1 && (_vm.computedLocalChecked = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));\n                        }\n                    } else {\n                        _vm.computedLocalChecked = $$c;\n                    }\n                } } }), _vm._v(\" \"), !_vm.is_ButtonMode ? _c('span', { staticClass: \"custom-control-indicator\", attrs: { \"aria-hidden\": \"true\" } }) : _vm._e(), _vm._v(\" \"), _c('span', { class: _vm.is_ButtonMode ? '' : 'custom-control-description' }, [_vm._t(\"default\")], 2)]);\n    }, staticRenderFns: [],\n    mixins: [idMixin, formRadioCheckMixin, formMixin, formSizeMixin, formStateMixin, formCustomMixin],\n    props: {\n        value: {\n            default: true\n        },\n        uncheckedValue: {\n            // Not applicable in multi-check mode\n            default: false\n        },\n        indeterminate: {\n            // Not applicable in multi-check mode\n            type: Boolean,\n            default: false\n        }\n    },\n    computed: {\n        labelClasses: function labelClasses() {\n            return ['custom-control', 'custom-checkbox', Boolean(this.get_Size) ? 'form-control-' + this.get_Size : '', this.get_StateClass];\n        },\n        is_Checked: function is_Checked() {\n            var checked = this.computedLocalChecked;\n            if (isArray(checked)) {\n                for (var i = 0; i < checked.length; i++) {\n                    if (looseEqual(checked[i], this.value)) {\n                        return true;\n                    }\n                }\n                return false;\n            } else {\n                return looseEqual(checked, this.value);\n            }\n        }\n    },\n    watch: {\n        computedLocalChecked: function computedLocalChecked(newVal, oldVal) {\n            if (looseEqual(newVal, oldVal)) {\n                return;\n            }\n            this.$emit('input', newVal);\n            this.$emit('update:indeterminate', this.$refs.check.indeterminate);\n        },\n        checked: function checked(newVal, oldVal) {\n            if (this.is_Child || looseEqual(newVal, oldVal)) {\n                return;\n            }\n            this.computedLocalChecked = newVal;\n        },\n        indeterminate: function indeterminate(newVal, oldVal) {\n            this.setIndeterminate(newVal);\n        }\n    },\n    methods: {\n        handleChange: function handleChange(_ref) {\n            var checked = _ref.target.checked;\n\n            // Change event is only fired via user interaction\n            // And we only emit the value of this checkbox\n            if (this.is_Child || isArray(this.computedLocalChecked)) {\n                this.$emit('change', checked ? this.value : null);\n                if (this.is_Child) {\n                    // If we are a child of form-checkbbox-group, emit change on parent\n                    this.$parent.$emit('change', this.computedLocalChecked);\n                }\n            } else {\n                // Single radio mode supports unchecked value\n                this.$emit('change', checked ? this.value : this.uncheckedValue);\n            }\n            this.$emit('update:indeterminate', this.$refs.check.indeterminate);\n        },\n        setIndeterminate: function setIndeterminate(state) {\n            // Indeterminate only supported in single checkbox mode\n            if (this.is_Child || isArray(this.computedLocalChecked)) {\n                return;\n            }\n            this.$refs.check.indeterminate = state;\n            // Emit update event to prop\n            this.$emit('update:indeterminate', this.$refs.check.indeterminate);\n        }\n    },\n    mounted: function mounted() {\n        // Set initial indeterminate state\n        this.setIndeterminate(this.indeterminate);\n    }\n};\n\nvar formCheckboxGroup = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: _vm.groupClasses, attrs: { \"id\": _vm.safeId(), \"role\": \"group\", \"tabindex\": \"-1\", \"data-toggle\": _vm.buttons ? 'buttons' : null, \"aria-required\": _vm.required ? 'true' : null, \"aria-invalid\": _vm.computedAriaInvalid } }, [_vm._t(\"first\"), _vm._l(_vm.formOptions, function (option, idx) {\n            return _c('b-form-checkbox', { key: 'radio_' + idx + '_opt', ref: \"options\", refInFor: true, attrs: { \"id\": _vm.safeId('_BV_radio_' + idx + '_opt_'), \"name\": _vm.name, \"value\": option.value, \"required\": _vm.name && _vm.required, \"disabled\": option.disabled } }, [_c('span', { domProps: { \"innerHTML\": _vm._s(option.text) } })]);\n        }), _vm._t(\"default\")], 2);\n    }, staticRenderFns: [],\n    mixins: [idMixin, formMixin, formSizeMixin, formStateMixin, formCustomMixin, formOptionsMixin],\n    components: [bFormCheckbox],\n    data: function data() {\n        return {\n            localChecked: this.checked || [],\n            // Flag for children\n            is_RadioCheckGroup: true\n        };\n    },\n\n    model: {\n        prop: 'checked',\n        event: 'input'\n    },\n    props: {\n        checked: {\n            type: [String, Object, Array],\n            default: null\n        },\n        validated: {\n            type: Boolean,\n            default: false\n        },\n        ariaInvalid: {\n            type: [Boolean, String],\n            default: false\n        },\n        stacked: {\n            type: Boolean,\n            default: false\n        },\n        buttons: {\n            // Render as button style\n            type: Boolean,\n            default: false\n        },\n        buttonVariant: {\n            // Only applicable when rendered with button style\n            type: String,\n            default: 'secondary'\n        }\n    },\n    watch: {\n        checked: function checked(newVal, oldVal) {\n            this.localChecked = this.checked;\n        },\n        localChecked: function localChecked(newVal, oldVal) {\n            this.$emit('input', newVal);\n        }\n    },\n    computed: {\n        groupClasses: function groupClasses() {\n            if (this.buttons) {\n                return ['btn-group', this.size ? 'btn-group-' + this.size : '', this.stacked ? 'btn-group-vertical' : '', this.validated ? 'was-validated' : ''];\n            }\n            return [this.sizeFormClass, this.stacked && this.custom ? 'custom-controls-stacked' : '', this.validated ? 'was-validated' : ''];\n        },\n        computedAriaInvalid: function computedAriaInvalid() {\n            if (this.ariaInvalid === true || this.ariaInvalid === 'true' || this.ariaInvalid === '') {\n                return 'true';\n            }\n            return this.get_State === false ? 'true' : null;\n        },\n        get_State: function get_State() {\n            // This is a tri-state prop (true/valid, false/invalid, null)\n            if (typeof this.state === 'boolean') {\n                return this.state;\n            } else if (this.state === 'valid') {\n                return true;\n            } else if (this.state === 'invalid') {\n                return false;\n            }\n            return null;\n        }\n    }\n};\n\nvar bFormRadio = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _vm.is_Plain && !_vm.is_ButtonMode ? _c('div', { class: ['form-check', _vm.is_Stacked ? '' : 'form-check-inline'] }, [_c('label', { staticClass: \"form-check-label\" }, [_c('input', { directives: [{ name: \"model\", rawName: \"v-model\", value: _vm.computedLocalChecked, expression: \"computedLocalChecked\" }], ref: \"radio\", staticClass: \"form-check-input\", attrs: { \"id\": _vm.safeId(), \"name\": _vm.get_Name, \"required\": _vm.get_Name && _vm.is_Required, \"disabled\": _vm.is_Disabled, \"type\": \"radio\", \"autocomplete\": \"off\" }, domProps: { \"value\": _vm.value, \"checked\": _vm._q(_vm.computedLocalChecked, _vm.value) }, on: { \"focus\": _vm.handleFocus, \"blur\": _vm.handleFocus, \"change\": _vm.handleChange, \"__c\": function __c($event) {\n                    _vm.computedLocalChecked = _vm.value;\n                } } }), _vm._t(\"default\")], 2)]) : _c('label', { class: _vm.is_ButtonMode ? _vm.buttonClasses : _vm.labelClasses }, [_c('input', { directives: [{ name: \"model\", rawName: \"v-model\", value: _vm.computedLocalChecked, expression: \"computedLocalChecked\" }], ref: \"radio\", class: _vm.is_ButtonMode ? '' : 'custom-control-input', attrs: { \"id\": _vm.safeId(), \"name\": _vm.get_Name, \"required\": _vm.get_Name && _vm.is_Required, \"disabled\": _vm.is_Disabled, \"type\": \"radio\", \"autocomplete\": \"off\" }, domProps: { \"value\": _vm.value, \"checked\": _vm._q(_vm.computedLocalChecked, _vm.value) }, on: { \"focus\": _vm.handleFocus, \"blur\": _vm.handleFocus, \"change\": _vm.handleChange, \"__c\": function __c($event) {\n                    _vm.computedLocalChecked = _vm.value;\n                } } }), _vm._v(\" \"), !_vm.is_ButtonMode ? _c('span', { staticClass: \"custom-control-indicator\", attrs: { \"aria-hidden\": \"true\" } }) : _vm._e(), _vm._v(\" \"), _c('span', { class: !_vm.is_ButtonMode ? 'custom-control-description' : null }, [_vm._t(\"default\")], 2)]);\n    }, staticRenderFns: [],\n    mixins: [idMixin, formRadioCheckMixin, formMixin, formStateMixin],\n    watch: {\n        // Radio Groups can only have a single value, so our watchers are simple\n        checked: function checked(newVal, oldVal) {\n            this.computedLocalChceked = newVal;\n        },\n        computedLocalChceked: function computedLocalChceked(newVal, oldVal) {\n            this.$emit('input', this.computedLocalChceked);\n        }\n    },\n    computed: {\n        is_Checked: function is_Checked() {\n            return looseEqual(this.value, this.computedLocalChecked);\n        },\n        labelClasses: function labelClasses() {\n            // Specific to radio\n            return [Boolean(this.get_Size) ? 'form-control-' + this.get_Size : '', 'custom-control', 'custom-radio', this.get_StateClass];\n        }\n    },\n    methods: {\n        handleChange: function handleChange(_ref) {\n            var checked = _ref.target.checked;\n\n            // Change is only emitted on user interaction\n            this.$emit('change', checked ? this.value : null);\n            // If this is a child of form-radio-group, we emit a change event on it as well\n            if (this.is_Child) {\n                this.$parent.$emit('change', this.computedLocalChecked);\n            }\n        }\n    }\n};\n\nvar formRadioGroup = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: _vm.groupClasses, attrs: { \"id\": _vm.safeId(), \"role\": \"radiogroup\", \"tabindex\": \"-1\", \"data-toggle\": _vm.buttons ? 'buttons' : null, \"aria-required\": _vm.required ? 'true' : null, \"aria-invalid\": _vm.computedAriaInvalid } }, [_vm._t(\"first\"), _vm._l(_vm.formOptions, function (option, idx) {\n            return _c('b-form-radio', { key: 'radio_' + idx + '_opt', ref: \"options\", refInFor: true, attrs: { \"id\": _vm.safeId('_BV_radio_' + idx + '_opt_'), \"name\": _vm.name, \"value\": option.value, \"required\": _vm.name && _vm.required, \"disabled\": option.disabled } }, [_c('span', { domProps: { \"innerHTML\": _vm._s(option.text) } })]);\n        }), _vm._t(\"default\")], 2);\n    }, staticRenderFns: [],\n    mixins: [idMixin, formMixin, formSizeMixin, formStateMixin, formCustomMixin, formOptionsMixin],\n    components: [bFormRadio],\n    data: function data() {\n        return {\n            localChecked: this.checked,\n            // Flag for children\n            is_RadioCheckGroup: true\n        };\n    },\n\n    model: {\n        prop: 'checked',\n        event: 'input'\n    },\n    props: {\n        checked: {\n            type: [String, Object],\n            default: null\n        },\n        validated: {\n            type: Boolean,\n            default: false\n        },\n        ariaInvalid: {\n            type: [Boolean, String],\n            default: false\n        },\n        stacked: {\n            type: Boolean,\n            default: false\n        },\n        buttons: {\n            // Render as button style\n            type: Boolean,\n            default: false\n        },\n        buttonVariant: {\n            // Only applicable when rendered with button style\n            type: String,\n            default: 'secondary'\n        }\n    },\n    watch: {\n        checked: function checked(newVal, oldVal) {\n            this.localChecked = this.checked;\n        },\n        localChecked: function localChecked(newVal, oldVal) {\n            this.$emit('input', newVal);\n        }\n    },\n    computed: {\n        groupClasses: function groupClasses() {\n            if (this.buttons) {\n                return ['btn-group', this.size ? 'btn-group-' + this.size : '', this.stacked ? 'btn-group-vertical' : '', this.validated ? 'was-validated' : ''];\n            }\n            return [this.sizeFormClass, this.stacked && this.custom ? 'custom-controls-stacked' : '', this.validated ? 'was-validated' : ''];\n        },\n        computedAriaInvalid: function computedAriaInvalid() {\n            if (this.ariaInvalid === true || this.ariaInvalid === 'true' || this.ariaInvalid === '') {\n                return 'true';\n            }\n            return this.get_State === false ? 'true' : null;\n        },\n        get_State: function get_State() {\n            // This is a tri-state prop (true/valid, false/invalid, null)\n            if (typeof this.state === 'boolean') {\n                return this.state;\n            } else if (this.state === 'valid') {\n                return true;\n            } else if (this.state === 'invalid') {\n                return false;\n            }\n            return null;\n        }\n    }\n};\n\n// Valid input types\nvar TYPES = ['text', 'password', 'email', 'number', 'url', 'tel', 'search', 'range', 'color', 'date', 'time', 'datetime', 'datetime-local', 'month', 'week'];\n\nvar formInput = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('input', { class: _vm.inputClass, attrs: { \"id\": _vm.safeId(), \"name\": _vm.name, \"type\": _vm.localType, \"disabled\": _vm.disabled, \"required\": _vm.required, \"readonly\": _vm.readonly || _vm.plaintext, \"placeholder\": _vm.placeholder, \"autocomplete\": _vm.autocomplete || null, \"aria-required\": _vm.required ? 'true' : null, \"aria-invalid\": _vm.computedAriaInvalid }, domProps: { \"value\": _vm.localValue }, on: { \"input\": function input($event) {\n                    _vm.onInput($event.target.value, $event);\n                }, \"change\": function change($event) {\n                    _vm.onChange($event.target.value, $event);\n                } } });\n    }, staticRenderFns: [],\n    mixins: [idMixin, formMixin, formSizeMixin, formStateMixin],\n    data: function data() {\n        return {\n            localValue: this.value\n        };\n    },\n\n    props: {\n        value: {\n            default: null\n        },\n        type: {\n            type: String,\n            default: 'text',\n            validator: function validator(type) {\n                return arrayIncludes(TYPES, type);\n            }\n        },\n        ariaInvalid: {\n            type: [Boolean, String],\n            default: false\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        plaintext: {\n            type: Boolean,\n            default: false\n        },\n        autocomplete: {\n            type: String,\n            default: null\n        },\n        placeholder: {\n            type: String,\n            default: null\n        },\n        formatter: {\n            type: Function\n        },\n        lazyFormatter: {\n            type: Boolean,\n            default: false\n        }\n    },\n    computed: {\n        localType: function localType() {\n            // We only allow certain types\n            return arrayIncludes(TYPES, this.type) ? this.type : 'text';\n        },\n        inputClass: function inputClass() {\n            return [this.plaintext ? 'form-control-plaintext' : 'form-control', this.sizeFormClass, this.stateClass];\n        },\n        computedAriaInvalid: function computedAriaInvalid() {\n            if (!Boolean(this.ariaInvalid) || this.ariaInvalid === 'false') {\n                // this.ariaInvalid is null or false or 'false'\n                return this.computedState === false ? 'true' : null;\n            }\n            if (this.ariaInvalid === true) {\n                // User wants explicit aria-invalid=true\n                return 'true';\n            }\n            // Most likely a string value (which could be 'true')\n            return this.ariaInvalid;\n        }\n    },\n    watch: {\n        value: function value(newVal, oldVal) {\n            if (newVal !== oldVal) {\n                this.localValue = newVal;\n            }\n        },\n        localValue: function localValue(newVal, oldVal) {\n            if (newVal !== oldVal) {\n                this.$emit('input', newVal);\n            }\n        }\n    },\n    methods: {\n        format: function format(value, e) {\n            if (this.formatter) {\n                var formattedValue = this.formatter(value, e);\n                if (formattedValue !== value) {\n                    return formattedValue;\n                }\n            }\n            return value;\n        },\n        onInput: function onInput(value, e) {\n            if (this.lazyFormatter) {\n                // Update the model with the current unformated value\n                this.localValue = value;\n            } else {\n                this.localValue = this.format(value, e);\n            }\n        },\n        onChange: function onChange(value, e) {\n            this.localValue = this.format(value, e);\n            this.$emit('change', this.localValue);\n        },\n        focus: function focus() {\n            if (!this.disabled) {\n                this.$el.focus();\n            }\n        }\n    }\n};\n\nvar formTextarea = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('textarea', { directives: [{ name: \"model\", rawName: \"v-model\", value: _vm.localValue, expression: \"localValue\" }], class: _vm.inputClass, style: _vm.inputStyle, attrs: { \"id\": _vm.safeId(), \"name\": _vm.name, \"disabled\": _vm.disabled, \"placeholder\": _vm.placeholder, \"required\": _vm.required, \"autocomplete\": _vm.autocomplete || null, \"readonly\": _vm.readonly || _vm.plaintext, \"rows\": _vm.rowsCount, \"wrap\": _vm.wrap || null, \"aria-required\": _vm.required ? 'true' : null, \"aria-invalid\": _vm.computedAriaInvalid }, domProps: { \"value\": _vm.localValue }, on: { \"input\": function input($event) {\n                    if ($event.target.composing) {\n                        return;\n                    }_vm.localValue = $event.target.value;\n                } } });\n    }, staticRenderFns: [],\n    mixins: [idMixin, formMixin, formSizeMixin, formStateMixin],\n    data: function data() {\n        return {\n            localValue: this.value\n        };\n    },\n\n    props: {\n        value: {\n            type: String,\n            default: ''\n        },\n        ariaInvalid: {\n            type: [Boolean, String],\n            default: false\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        plaintext: {\n            type: Boolean,\n            default: false\n        },\n        autocomplete: {\n            type: String,\n            default: null\n        },\n        placeholder: {\n            type: String,\n            default: null\n        },\n        rows: {\n            type: [Number, String],\n            default: null\n        },\n        maxRows: {\n            type: [Number, String],\n            default: null\n        },\n        wrap: {\n            // 'soft', 'hard' or 'off'. Browser default is 'soft'\n            type: String,\n            default: 'soft'\n        },\n        noResize: {\n            type: Boolean,\n            default: false\n        }\n    },\n    computed: {\n        rowsCount: function rowsCount() {\n            var rows = parseInt(this.rows, 10) || 1;\n            var maxRows = parseInt(this.maxRows, 10) || 0;\n            var lines = (this.value || '').toString().split('\\n').length;\n            return maxRows ? Math.min(maxRows, Math.max(rows, lines)) : Math.max(rows, lines);\n        },\n        inputClass: function inputClass() {\n            return [this.plaintext ? 'form-control-plaintext' : 'form-control', this.sizeFormClass, this.stateClass];\n        },\n        inputStyle: function inputStyle() {\n            // We set width 100% in plaintext mode to get around a shortcoming in bootstrap CSS\n            // setting noResize to true will disable the ability for the user to resize the textarea\n            return {\n                width: this.plaintext ? '100%' : null,\n                resize: this.noResize ? 'none' : null\n            };\n        },\n        computedAriaInvalid: function computedAriaInvalid() {\n            if (!Boolean(this.ariaInvalid) || this.ariaInvalid === 'false') {\n                // this.ariaInvalid is null or false or 'false'\n                return this.computedState === false ? 'true' : null;\n            }\n            if (this.ariaInvalid === true) {\n                // User wants explicit aria-invalid=true\n                return 'true';\n            }\n            // Most likely a string value (which could be the string 'true')\n            return this.ariaInvalid;\n        }\n    },\n    watch: {\n        value: function value(newVal, oldVal) {\n            // Update our localValue\n            if (newVal !== oldVal) {\n                this.localValue = newVal;\n            }\n        },\n        localValue: function localValue(newVal, oldVal) {\n            // update Parent value\n            if (newVal !== oldVal) {\n                this.$emit('input', newVal);\n            }\n        }\n    },\n    methods: {\n        focus: function focus() {\n            // For external handler that may want a focus method\n            if (!this.disabled) {\n                this.$el.focus();\n            }\n        }\n    }\n};\n\nvar formFile = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _vm.plain ? _c('input', { ref: \"input\", class: ['form-control-file', _vm.sizeFormClass, _vm.stateClass], attrs: { \"type\": \"file\", \"id\": _vm.safeId(), \"name\": _vm.name, \"disabled\": _vm.disabled, \"required\": _vm.required, \"capture\": _vm.capture || null, \"aria-required\": _vm.required ? 'true' : null, \"accept\": _vm.accept || null, \"multiple\": _vm.multiple, \"webkitdirectory\": _vm.directory }, on: { \"change\": _vm.onFileChange } }) : _c('div', { class: ['custom-file', 'w-100', _vm.stateClass], attrs: { \"id\": _vm.safeId('_BV_file_outer_') }, on: { \"dragover\": function dragover($event) {\n                    $event.stopPropagation();$event.preventDefault();_vm.dragover($event);\n                } } }, [_vm.dragging ? _c('span', { staticClass: \"drop-here\", attrs: { \"data-drop\": _vm.dropLabel }, on: { \"dragover\": function dragover($event) {\n                    $event.stopPropagation();$event.preventDefault();_vm.dragover($event);\n                }, \"drop\": function drop($event) {\n                    $event.stopPropagation();$event.preventDefault();_vm.drop($event);\n                }, \"dragleave\": function dragleave($event) {\n                    $event.stopPropagation();$event.preventDefault();_vm.dragging = false;\n                } } }) : _vm._e(), _c('input', { ref: \"input\", class: ['custom-file-input', 'w-100', _vm.stateClass, _vm.hasFocus ? 'focus' : ''], attrs: { \"type\": \"file\", \"id\": _vm.safeId(), \"name\": _vm.name, \"disabled\": _vm.disabled, \"required\": _vm.required, \"capture\": _vm.capture || null, \"aria-required\": _vm.required ? 'true' : null, \"accept\": _vm.accept || null, \"multiple\": _vm.multiple, \"webkitdirectory\": _vm.directory, \"aria-describedby\": _vm.safeId('_BV_file_control_') }, on: { \"focusin\": _vm.focusHandler, \"focusout\": _vm.focusHandler, \"change\": _vm.onFileChange } }), _vm._v(\" \"), _c('span', { class: ['custom-file-control', _vm.dragging ? 'dragging' : null], attrs: { \"id\": _vm.safeId('_BV_file_control_'), \"data-choose\": _vm.computedChooseLabel, \"data-selected\": _vm.selectedLabel } })]);\n    }, staticRenderFns: [], _scopeId: 'data-v-c68bd5f8',\n    mixins: [idMixin, formMixin, formStateMixin, formCustomMixin],\n    data: function data() {\n        return {\n            selectedFile: null,\n            dragging: false,\n            hasFocus: false\n        };\n    },\n\n    props: {\n        accept: {\n            type: String,\n            default: ''\n        },\n        capture: {\n            // Instruct input to capture from camera\n            type: Boolean,\n            default: false\n        },\n        placeholder: {\n            type: String,\n            default: null\n        },\n        chooseLabel: {\n            type: String,\n            default: null\n        },\n        multiple: {\n            type: Boolean,\n            default: false\n        },\n        directory: {\n            type: Boolean,\n            default: false\n        },\n        noTraverse: {\n            type: Boolean,\n            default: false\n        },\n        selectedFormat: {\n            type: String,\n            default: ':count Files'\n        },\n        noDrop: {\n            type: Boolean,\n            default: false\n        },\n        dropLabel: {\n            type: String,\n            default: 'Drop files here'\n        }\n    },\n    computed: {\n        selectedLabel: function selectedLabel() {\n            if (!this.selectedFile || this.selectedFile.length === 0) {\n                return this.placeholder || 'No file chosen';\n            }\n\n            if (this.multiple) {\n                if (this.selectedFile.length === 1) {\n                    return this.selectedFile[0].name;\n                }\n\n                return this.selectedFormat.replace(':names', this.selectedFile.map(function (file) {\n                    return file.name;\n                }).join(',')).replace(':count', this.selectedFile.length);\n            }\n\n            return this.selectedFile.name;\n        },\n        computedChooseLabel: function computedChooseLabel() {\n            return this.chooseLabel || (this.multiple ? 'Choose Files' : 'Choose File');\n        }\n    },\n    watch: {\n        selectedFile: function selectedFile(newVal, oldVal) {\n            if (newVal === oldVal) {\n                return;\n            }\n\n            if (!newVal && this.multiple) {\n                this.$emit('input', []);\n            } else {\n                this.$emit('input', newVal);\n            }\n        }\n    },\n    methods: {\n        focusHandler: function focusHandler(evt) {\n            // Boostrap v4.beta doesn't have focus styling for custom file input\n            // Firefox has a borked '[type=file]:focus ~ sibling' selector, so we add\n            // A 'focus' class to get around this bug\n            if (this.plain || evt.type === 'focusout') {\n                this.hasFocus = false;\n            } else {\n                // Add focus styling for custom file input\n                this.hasFocus = true;\n            }\n        },\n        reset: function reset() {\n            try {\n                // Wrapped in try in case IE < 11 craps out\n                this.$refs.input.value = '';\n            } catch (e) {}\n\n            // IE < 11 doesn't support setting input.value to '' or null\n            // So we use this little extra hack to reset the value, just in case\n            // This also appears to work on modern browsers as well.\n            this.$refs.input.type = '';\n            this.$refs.input.type = 'file';\n\n            this.selectedFile = this.multiple ? [] : null;\n        },\n        onFileChange: function onFileChange(e) {\n            var _this = this;\n\n            // Always emit original event\n            this.$emit('change', e);\n\n            // Check if special `items` prop is available on event (drop mode)\n            // Can be disabled by setting no-traverse\n            var items = e.dataTransfer && e.dataTransfer.items;\n            if (items && !this.noTraverse) {\n                var queue = [];\n                for (var i = 0; i < items.length; i++) {\n                    var item = items[i].webkitGetAsEntry();\n                    if (item) {\n                        queue.push(this.traverseFileTree(item));\n                    }\n                }\n                Promise.all(queue).then(function (filesArr) {\n                    _this.setFiles(from(filesArr));\n                });\n                return;\n            }\n\n            // Normal handling\n            this.setFiles(e.target.files || e.dataTransfer.files);\n        },\n        setFiles: function setFiles(files) {\n            if (!files) {\n                this.selectedFile = null;\n                return;\n            }\n\n            if (!this.multiple) {\n                this.selectedFile = files[0];\n                return;\n            }\n\n            // Convert files to array\n            var filesArray = [];\n            for (var i = 0; i < files.length; i++) {\n                if (files[i].type.match(this.accept)) {\n                    filesArray.push(files[i]);\n                }\n            }\n\n            this.selectedFile = filesArray;\n        },\n        dragover: function dragover(e) {\n            if (this.noDrop || !this.custom) {\n                return;\n            }\n\n            this.dragging = true;\n            e.dataTransfer.dropEffect = 'copy';\n        },\n        drop: function drop(e) {\n            if (this.noDrop) {\n                return;\n            }\n\n            this.dragging = false;\n            if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n                this.onFileChange(e);\n            }\n        },\n        traverseFileTree: function traverseFileTree(item, path) {\n            var _this2 = this;\n\n            // Based on http://stackoverflow.com/questions/3590058\n            return new Promise(function (resolve) {\n                path = path || '';\n                if (item.isFile) {\n                    // Get file\n                    item.file(function (file) {\n                        file.$path = path; // Inject $path to file obj\n                        resolve(file);\n                    });\n                } else if (item.isDirectory) {\n                    // Get folder contents\n                    item.createReader().readEntries(function (entries) {\n                        var queue = [];\n                        for (var i = 0; i < entries.length; i++) {\n                            queue.push(_this2.traverseFileTree(entries[i], path + item.name + '/'));\n                        }\n                        Promise.all(queue).then(function (filesArr) {\n                            resolve(from(filesArr));\n                        });\n                    });\n                }\n            });\n        }\n    }\n};\n\nvar formSelect = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('select', { directives: [{ name: \"model\", rawName: \"v-model\", value: _vm.localValue, expression: \"localValue\" }], ref: \"input\", class: _vm.inputClass, attrs: { \"name\": _vm.name, \"id\": _vm.safeId(), \"multiple\": _vm.multiple || null, \"size\": _vm.multiple || _vm.selectSize > 1 ? _vm.selectSize : null, \"disabled\": _vm.disabled, \"required\": _vm.required, \"aria-required\": _vm.required ? 'true' : null, \"aria-invalid\": _vm.computedAriaInvalid }, on: { \"change\": function change($event) {\n                    var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {\n                        return o.selected;\n                    }).map(function (o) {\n                        var val = \"_value\" in o ? o._value : o.value;return val;\n                    });_vm.localValue = $event.target.multiple ? $$selectedVal : $$selectedVal[0];\n                } } }, [_vm._t(\"first\"), _vm._l(_vm.formOptions, function (option, idx) {\n            return _c('option', { key: 'option_' + idx + '_opt', attrs: { \"disabled\": option.disabled }, domProps: { \"value\": option.value, \"innerHTML\": _vm._s(option.text) } });\n        }), _vm._t(\"default\")], 2);\n    }, staticRenderFns: [],\n    mixins: [idMixin, formMixin, formSizeMixin, formStateMixin, formCustomMixin, formOptionsMixin],\n    data: function data() {\n        return {\n            localValue: this.value\n        };\n    },\n\n    watch: {\n        value: function value(newVal, oldVal) {\n            this.localValue = newVal;\n        },\n        localValue: function localValue(newVal, oldVal) {\n            this.$emit('input', this.localValue);\n        }\n    },\n    props: {\n        value: {},\n        multiple: {\n            type: Boolean,\n            default: false\n        },\n        selectSize: {\n            // Browsers default size to 0, which shows 4 rows in most browsers in multiple mode\n            // Size of 1 can bork out firefox\n            type: Number,\n            default: 0\n        },\n        ariaInvalid: {\n            type: [Boolean, String],\n            default: false\n        }\n    },\n    computed: {\n        inputClass: function inputClass() {\n            return ['form-control', this.stateClass, this.sizeFormClass, this.plain || this.multiple || this.selectSize > 1 ? null : 'custom-select'];\n        },\n        computedAriaInvalid: function computedAriaInvalid() {\n            if (this.ariaInvalid === true || this.ariaInvalid === 'true') {\n                return 'true';\n            }\n            return this.stateClass == 'is-invalid' ? 'true' : null;\n        }\n    }\n};\n\nvar THROTTLE = 100;\n\nvar imgLazy = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('b-img', { attrs: { \"src\": _vm.computedSrc, \"blank\": _vm.computedBlank, \"blank-color\": _vm.blankColor, \"width\": _vm.computedWidth, \"height\": _vm.computedHeight, \"fluid\": _vm.fluid, \"fluid-grow\": _vm.fluidGrow, \"block\": _vm.block, \"thumbnail\": _vm.thumbnail, \"rounded\": _vm.rounded, \"left\": _vm.left, \"right\": _vm.right, \"center\": _vm.center } });\n    }, staticRenderFns: [],\n    components: { bImg: bImg },\n    data: function data() {\n        return {\n            isShown: false,\n            scrollTimeout: null\n        };\n    },\n\n    props: {\n        src: {\n            type: String,\n            default: null,\n            rqeuired: true\n        },\n        width: {\n            type: [Number, String],\n            default: null\n        },\n        height: {\n            type: [Number, String],\n            default: null\n        },\n        blankSrc: {\n            // If null, a blank image is generated\n            type: String,\n            default: null\n        },\n        blankColor: {\n            type: String,\n            default: 'transparent'\n        },\n        blankWidth: {\n            type: [Number, String],\n            default: null\n        },\n        blankHeight: {\n            type: [Number, String],\n            default: null\n        },\n        fluid: {\n            type: Boolean,\n            default: false\n        },\n        fluidGrow: {\n            type: Boolean,\n            default: false\n        },\n        block: {\n            type: Boolean,\n            default: false\n        },\n        thumbnail: {\n            type: Boolean,\n            default: false\n        },\n        rounded: {\n            type: [Boolean, String],\n            default: false\n        },\n        left: {\n            type: Boolean,\n            default: false\n        },\n        right: {\n            type: Boolean,\n            default: false\n        },\n        center: {\n            type: Boolean,\n            default: false\n        },\n        offset: {\n            type: [Number, String],\n            default: 360\n        },\n        throttle: {\n            type: [Number, String],\n            default: THROTTLE\n        }\n    },\n    computed: {\n        computedSrc: function computedSrc() {\n            return !this.blankSrc || this.isShown ? this.src : this.blankSrc;\n        },\n        computedBlank: function computedBlank() {\n            return this.isShown || this.blankSrc ? false : true;\n        },\n        computedWidth: function computedWidth() {\n            return this.isShown ? this.width : this.blankWidth || this.width;\n        },\n        computedHeight: function computedHeight() {\n            return this.isShown ? this.height : this.blankHeight || this.height;\n        }\n    },\n    mounted: function mounted() {\n        this.setListeners(true);\n        this.checkView();\n    },\n    activated: function activated() {\n        this.setListeners(true);\n        this.checkView();\n    },\n    deactivated: function deactivated() {\n        this.setListeners(false);\n    },\n    beforeDdestroy: function beforeDdestroy() {\n        this.setListeners(false);\n    },\n\n    methods: {\n        setListeners: function setListeners(on) {\n            clearTimeout(this.scrollTimer);\n            this.scrollTimout = null;\n            var root = window;\n            if (on) {\n                eventOn(root, 'scroll', this.onScroll);\n                eventOn(root, 'resize', this.onScroll);\n                eventOn(root, 'orientationchange', this.onScroll);\n            } else {\n                eventOff(root, 'scroll', this.onScroll);\n                eventOff(root, 'resize', this.onScroll);\n                eventOff(root, 'orientationchange', this.onScroll);\n            }\n        },\n        checkView: function checkView() {\n            // check bounding box + offset to see if we should show \n            if (!isVisible(this.$el)) {\n                // Element is hidden, so skip for now\n                return;\n            }\n            var offset$$1 = parseInt(this.offset, 10) || 0;\n            var docElement = document.documentElement;\n            var view = {\n                l: 0 - offset$$1,\n                t: 0 - offset$$1,\n                b: docElement.clientHeight + offset$$1,\n                r: docElement.clientWidth + offset$$1\n            };\n            var box = getBCR(this.$el);\n            if (box.right >= view.l && box.bottom >= view.t && box.left <= view.r && box.top <= view.b) {\n                // image is in view (or about to be in view)\n                this.isShown = true;\n                this.setListeners(false);\n            }\n        },\n        onScroll: function onScroll() {\n            if (this.isShown) {\n                this.setListeners(false);\n            } else {\n                clearTimeout(this.scrollTimeout);\n                this.scrollTimeout = setTimeout(this.checkView, parseInt(this.throttle, 10) || THROTTLE);\n            }\n        }\n    }\n};\n\nvar props$29 = {\n    fluid: {\n        type: Boolean,\n        default: false\n    },\n    containerFluid: {\n        type: Boolean,\n        default: false\n    },\n    header: {\n        type: String,\n        default: null\n    },\n    headerTag: {\n        type: String,\n        default: 'h1'\n    },\n    headerLevel: {\n        type: [Number, String],\n        default: '3'\n    },\n    lead: {\n        type: String,\n        default: null\n    },\n    leadTag: {\n        type: String,\n        default: 'p'\n    },\n    tag: {\n        type: String,\n        default: 'div'\n    },\n    bgVariant: {\n        type: String,\n        default: null\n    },\n    borderVariant: {\n        type: String,\n        default: null\n    },\n    textVariant: {\n        type: String,\n        default: null\n    }\n};\n\nvar jumbotron = {\n    functional: true,\n    props: props$29,\n    render: function render(h, _ref) {\n        var _class2;\n\n        var props = _ref.props,\n            data = _ref.data,\n            slots = _ref.slots;\n\n        // The order of the conditionals matter.\n        // We are building the component markup in order.\n        var childNodes = [];\n\n        // Header\n        if (props.header || slots().header) {\n            childNodes.push(h(props.headerTag, {\n                class: defineProperty$1({}, \"display-\" + props.headerLevel, Boolean(props.headerLevel))\n            }, slots().header || props.header));\n        }\n\n        // Lead\n        if (props.lead || slots().lead) {\n            childNodes.push(h(props.leadTag, { staticClass: 'lead' }, slots().lead || props.lead));\n        }\n\n        // Default slot\n        if (slots().default) {\n            childNodes.push(slots().default);\n        }\n\n        // If fluid, wrap content in a container/container-fluid\n        if (props.fluid) {\n            // Children become a child of a container\n            childNodes = [h(Container, { props: { 'fluid': props.containerFluid } }, childNodes)];\n        }\n        // Return the jumbotron\n        return h(props.tag, lib_common(data, {\n            staticClass: \"jumbotron\",\n            class: (_class2 = {\n                'jumbotron-fluid': props.fluid\n            }, defineProperty$1(_class2, \"text-\" + props.textVariant, Boolean(props.textVariant)), defineProperty$1(_class2, \"bg-\" + props.bgVariant, Boolean(props.bgVariant)), defineProperty$1(_class2, \"border-\" + props.borderVariant, Boolean(props.borderVariant)), defineProperty$1(_class2, 'border', Boolean(props.borderVariant)), _class2)\n        }), childNodes);\n    }\n};\n\nvar props$30 = {\n    tag: {\n        type: String,\n        default: \"div\"\n    },\n    flush: {\n        type: Boolean,\n        default: false\n    }\n};\n\nvar listGroup = {\n    functional: true,\n    props: props$30,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        var componentData = {\n            staticClass: \"list-group\",\n            class: { \"list-group-flush\": props.flush }\n        };\n\n        return h(props.tag, lib_common(data, componentData), children);\n    }\n};\n\nvar actionTags = [\"a\", \"router-link\", \"button\", \"b-link\"];\nvar linkProps$1 = propsFactory();\ndelete linkProps$1.href.default;\ndelete linkProps$1.to.default;\n\nvar props$31 = assign(linkProps$1, {\n    tag: {\n        type: String,\n        default: \"div\"\n    },\n    action: {\n        type: Boolean,\n        default: null\n    },\n    variant: {\n        type: String,\n        default: null\n    }\n});\n\nvar listGroupItem = {\n    functional: true,\n    props: props$31,\n    render: function render(h, _ref) {\n        var _class;\n\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        var tag = !props.href && !props.to ? props.tag : bLink;\n\n        var componentData = {\n            staticClass: \"list-group-item\",\n            class: (_class = {\n                \"list-group-flush\": props.flush\n            }, defineProperty$1(_class, \"list-group-item-\" + props.variant, Boolean(props.variant)), defineProperty$1(_class, \"active\", props.active), defineProperty$1(_class, \"disabled\", props.disabled), defineProperty$1(_class, \"list-group-item-action\", Boolean(props.href || props.to || props.action || arrayIncludes(actionTags, props.tag))), _class),\n            props: pluckProps(linkProps$1, props)\n        };\n\n        return h(tag, lib_common(data, componentData), children);\n    }\n};\n\nvar props$33 = {\n    tag: {\n        type: String,\n        default: \"div\"\n    }\n};\n\nvar MediaBody = {\n    functional: true,\n    props: props$33,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(props.tag, lib_common(data, {\n            staticClass: \"media-body\"\n        }), children);\n    }\n};\n\nvar props$34 = {\n    tag: {\n        type: String,\n        default: \"div\"\n    },\n    verticalAlign: {\n        type: String,\n        default: \"top\"\n    }\n};\n\nvar MediaAside = {\n    functional: true,\n    props: props$34,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(props.tag, lib_common(data, {\n            staticClass: \"d-flex\",\n            class: defineProperty$1({}, \"align-self-\" + props.verticalAlign, props.verticalAlign)\n        }), children);\n    }\n};\n\nvar props$32 = {\n    tag: {\n        type: String,\n        default: \"div\"\n    },\n    rightAlign: {\n        type: Boolean,\n        default: false\n    },\n    verticalAlign: {\n        type: String,\n        default: \"top\"\n    },\n    noBody: {\n        type: Boolean,\n        default: false\n    }\n};\n\nvar media = {\n    functional: true,\n    props: props$32,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            slots = _ref.slots,\n            children = _ref.children;\n\n        var childNodes = props.noBody ? children : [];\n\n        if (!props.noBody) {\n            if (slots().aside && !props.rightAlign) {\n                childNodes.push(h(MediaAside, { staticClass: \"mr-3\", props: { verticalAlign: props.verticalAlign } }, slots().aside));\n            }\n\n            childNodes.push(h(MediaBody, slots().default));\n\n            if (slots().aside && props.rightAlign) {\n                childNodes.push(h(MediaAside, { staticClass: \"ml-3\", props: { verticalAlign: props.verticalAlign } }, slots().aside));\n            }\n        }\n\n        return h(props.tag, lib_common(data, { staticClass: \"media\" }), childNodes);\n    }\n};\n\nvar BvEvent = function () {\n    function BvEvent(type) {\n        var eventInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        classCallCheck(this, BvEvent);\n\n        // Start by emulating native Event constructor.\n        if (!type) {\n            throw new TypeError(\"Failed to construct '\" + this.constructor.name + \"'. 1 argument required, \" + arguments.length + \" given.\");\n        }\n        // Assign defaults first, the eventInit,\n        // and the type last so it can't be overwritten.\n        assign(this, BvEvent.defaults(), eventInit, { type: type });\n        // Freeze some props as readonly, but leave them enumerable.\n        defineProperties(this, {\n            type: readonlyDescriptor(),\n            cancelable: readonlyDescriptor(),\n            nativeEvent: readonlyDescriptor(),\n            target: readonlyDescriptor(),\n            relatedTarget: readonlyDescriptor(),\n            vueTarget: readonlyDescriptor()\n        });\n        // Create a private variable using closure scoping.\n        var defaultPrevented = false;\n        // Recreate preventDefault method. One way setter.\n        this.preventDefault = function preventDefault() {\n            if (this.cancelable) {\n                defaultPrevented = true;\n            }\n        };\n        // Create 'defaultPrevented' publicly accessible prop\n        // that can only be altered by the preventDefault method.\n        defineProperty(this, \"defaultPrevented\", {\n            enumerable: true,\n            get: function get$$1() {\n                return defaultPrevented;\n            }\n        });\n    }\n\n    createClass(BvEvent, null, [{\n        key: \"defaults\",\n        value: function defaults$$1() {\n            return {\n                type: \"\",\n                cancelable: true,\n                nativeEvent: null,\n                target: null,\n                relatedTarget: null,\n                vueTarget: null\n            };\n        }\n    }]);\n    return BvEvent;\n}();\n\nvar NAME = 'tooltp';\nvar CLASS_PREFIX = 'bs-tooltip';\nvar BSCLS_PREFIX_REGEX = new RegExp('\\\\b' + CLASS_PREFIX + '\\\\S+', 'g');\n\nvar TRANSITION_DURATION = 150;\n\n// Modal $root event (prepare for future evnt name change)\nvar MODAL_CLOSE_EVENT = 'bv::modal::hidden';\nvar MODAL_CLASS = '.modal';\n\nvar AttachmentMap$1 = {\n    AUTO: 'auto',\n    TOP: 'top',\n    RIGHT: 'right',\n    BOTTOM: 'bottom',\n    LEFT: 'left',\n    TOPLEFT: 'top',\n    TOPRIGHT: 'top',\n    RIGHTTOP: 'right',\n    RIGHTBOTTOM: 'right',\n    BOTTOMLEFT: 'bottom',\n    BOTTOMRIGHT: 'bottom',\n    LEFTTOP: 'left',\n    LEFTBOTTOM: 'left'\n};\n\nvar OffsetMap = {\n    AUTO: 0,\n    TOPLEFT: -1,\n    TOP: 0,\n    TOPRIGHT: +1,\n    RIGHTTOP: -1,\n    RIGHT: 0,\n    RIGHTBOTTOM: +1,\n    BOTTOMLEFT: -1,\n    BOTTOM: 0,\n    BOTTOMRIGHT: +1,\n    LEFTTOP: -1,\n    LEFT: 0,\n    LEFTBOTTOM: +1\n};\n\nvar HoverState = {\n    SHOW: 'show',\n    OUT: 'out'\n};\n\nvar ClassName = {\n    FADE: 'fade',\n    SHOW: 'show'\n};\n\nvar Selector$1 = {\n    TOOLTIP: '.tooltip',\n    TOOLTIP_INNER: '.tooltip-inner',\n    ARROW: '.arrow'\n};\n\nvar Defaults$1 = {\n    animation: true,\n    template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"arrow\"></div>' + '<div class=\"tooltip-inner\"></div>' + '</div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    placement: 'top',\n    offset: 0,\n    arrowPadding: 6,\n    container: false,\n    fallbackPlacement: 'flip',\n    callbacks: {}\n};\n\n// Transition Event names\nvar TransitionEndEvents$1 = {\n    WebkitTransition: ['webkitTransitionEnd'],\n    MozTransition: ['transitionend'],\n    OTransition: ['otransitionend', 'oTransitionEnd'],\n    transition: ['transitionend']\n};\n\n// Client Side Tip ID counter for aria-describedby attribute\n// Could use Alex's uid generator util\n// Each tooltip requires a unique client side ID\nvar NEXTID = 1;\nfunction generateId(name) {\n    return '__BV_' + name + '_' + NEXTID++ + '__';\n}\n\n/*\n * ToolTip Class definition\n */\n\nvar ToolTip = function () {\n\n    // Main constructor\n    function ToolTip(element, config, $root) {\n        classCallCheck(this, ToolTip);\n\n        // New tooltip object\n        this.$fadeTimeout = null;\n        this.$hoverTimeout = null;\n        this.$visibleInterval = null;\n        this.$hoverState = '';\n        this.$activeTrigger = {};\n        this.$popper = null;\n        this.$element = element;\n        this.$tip = null;\n        this.$id = generateId(this.constructor.NAME);\n        this.$root = $root || null;\n        this.$routeWatcher = null;\n        this.updateConfig(config);\n    }\n\n    // NOTE: Overridden by PopOver class\n\n\n    createClass(ToolTip, [{\n        key: 'updateConfig',\n\n\n        // Update config\n        value: function updateConfig(config) {\n            // Merge config into defaults. We use \"this\" here because PopOver overrides Default\n            var updatedConfig = assign({}, this.constructor.Default, config);\n\n            // Sanitize delay\n            if (config.delay && typeof config.delay === 'number') {\n                updatedConfig.delay = {\n                    show: config.delay,\n                    hide: config.delay\n                };\n            }\n\n            // Title for tooltip and popover\n            if (config.title && typeof config.title === 'number') {\n                updatedConfig.title = config.title.toString();\n            }\n\n            // Content only for popover\n            if (config.content && typeof config.content === 'number') {\n                updatedConfig.content = config.content.toString();\n            }\n\n            // Hide element original title if needed\n            this.fixTitle();\n            // Update the config\n            this.$config = updatedConfig;\n            // Stop/Restart listening\n            this.unListen();\n            this.listen();\n        }\n\n        // Destroy this instance\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            // Stop listening to trigger events\n            this.unListen();\n            // Disable while open listeners/watchers\n            this.setWhileOpenListeners(false);\n            // Clear any timouts\n            clearTimeout(this.$hoverTimeout);\n            this.$hoverTimeout = null;\n            clearTimeout(this.$fadeTimeout);\n            this.$fadeTimeout = null;\n            // Remove popper\n            if (this.$popper) {\n                this.$popper.destroy();\n            }\n            this.$popper = null;\n            // Remove tip from document\n            if (this.$tip && this.$tip.parentElement) {\n                this.$tip.parentElement.removeChild(this.$tip);\n            }\n            this.$tip = null;\n            // Null out other properties\n            this.$id = null;\n            this.$root = null;\n            this.$element = null;\n            this.$config = null;\n            this.$hoverState = null;\n            this.$activeTrigger = null;\n        }\n\n        // Click toggler\n\n    }, {\n        key: 'toggle',\n        value: function toggle(event) {\n            if (event) {\n                this.$activeTrigger.click = !this.$activeTrigger.click;\n\n                if (this.isWithActiveTrigger()) {\n                    this.enter(null);\n                } else {\n                    this.leave(null);\n                }\n            } else {\n                if (hasClass(this.getTipElement(), ClassName.SHOW)) {\n                    this.leave(null);\n                } else {\n                    this.enter(null);\n                }\n            }\n        }\n\n        // Show tooltip\n\n    }, {\n        key: 'show',\n        value: function show() {\n            var _this = this;\n\n            if (!document.body.contains(this.$element)) {\n                // If trigger element isn't in the DOM\n                return;\n            }\n\n            // Build tooltip element (also sets this.$tip)\n            var tip = this.getTipElement();\n            this.fixTitle();\n            this.setContent(tip);\n            if (!this.isWithContent(tip)) {\n                // if No content, dont bother showing\n                this.$tip = null;\n                return;\n            }\n\n            // Set ID on tip and aria-describedby on element\n            setAttr(tip, 'id', this.$id);\n            this.addAriaDescribedby();\n\n            // Set animation on or off\n            if (this.$config.animation) {\n                addClass(tip, ClassName.FADE);\n            } else {\n                removeClass(tip, ClassName.FADE);\n            }\n\n            var placement = this.getPlacement();\n            var attachment = this.constructor.getAttachment(placement);\n            this.addAttachmentClass(attachment);\n\n            // Create a cancelable BvEvent\n            var showEvt = new BvEvent('show', {\n                cancelable: true,\n                target: this.$element,\n                relatedTarget: tip\n            });\n            this.emitEvent(showEvt);\n            if (showEvt.defaultPrevented) {\n                // Don't show if event cancelled\n                this.$tip = null;\n                return;\n            }\n\n            // Insert tooltip if needed\n            var container = this.getContainer();\n            if (!document.body.contains(tip)) {\n                container.appendChild(tip);\n            }\n\n            // Refresh popper\n            this.removePopper();\n            this.$popper = new Popper(this.$element, tip, this.getPopperConfig(placement, tip));\n\n            // Transitionend Callback\n            var complete = function complete() {\n                if (_this.$config.animation) {\n                    _this.fixTransition(tip);\n                }\n                var prevHoverState = _this.$hoverState;\n                _this.$hoverState = null;\n                if (prevHoverState === HoverState.OUT) {\n                    _this.leave(null);\n                }\n                // Create a non-cancelable BvEvent\n                var shownEvt = new BvEvent('shown', {\n                    cancelable: false,\n                    target: _this.$element,\n                    relatedTarget: tip\n                });\n                _this.emitEvent(shownEvt);\n            };\n\n            // Enable while open listeners/watchers\n            this.setWhileOpenListeners(true);\n\n            // Show tip\n            addClass(tip, ClassName.SHOW);\n\n            // Start the transition/animation\n            this.transitionOnce(tip, complete);\n        }\n\n        // handler for periodic visibility check\n\n    }, {\n        key: 'visibleCheck',\n        value: function visibleCheck(on) {\n            var _this2 = this;\n\n            clearInterval(this.$visibleInterval);\n            this.$visibleInterval = null;\n            if (on) {\n                this.$visibleInterval = setInterval(function () {\n                    var tip = _this2.getTipElement();\n                    if (tip && !isVisible(_this2.$element) && hasClass(tip, ClassName.SHOW)) {\n                        // Element is no longer visible, so force-hide the tooltip\n                        _this2.forceHide();\n                    }\n                }, 100);\n            }\n        }\n    }, {\n        key: 'setWhileOpenListeners',\n        value: function setWhileOpenListeners(on) {\n            // Modal close events\n            this.setModalListener(on);\n            // Periodic $element visibility check\n            // For handling when tip is in <keepalive>, tabs, carousel, etc\n            this.visibleCheck(on);\n            // Route change events\n            this.setRouteWatcher(on);\n            // Global hide events\n            this.setRootListener(on);\n            // Ontouch start listeners\n            this.setOnTouchStartListener(on);\n        }\n\n        // force hide of tip (internal method)\n\n    }, {\n        key: 'forceHide',\n        value: function forceHide() {\n            // Disable while open listeners/watchers\n            this.setWhileOpenListeners(false);\n            if (!this.$tip) {\n                return;\n            }\n            // Clear any hover enter/leave event\n            clearTimeout(this.$hoverTimeout);\n            this.$hoverTimeout = null;\n            this.$hoverState = '';\n            // Hide the tip\n            this.hide(null, true);\n        }\n\n        // Hide tooltip\n\n    }, {\n        key: 'hide',\n        value: function hide(callback, force) {\n            var _this3 = this;\n\n            var tip = this.$tip;\n            if (!tip) {\n                return;\n            }\n\n            // Create a canelable BvEvent\n            var hideEvt = new BvEvent('hide', {\n                // We disable cancelling if force is true\n                cancelable: !Boolean(force),\n                target: this.$element,\n                relatedTarget: tip\n            });\n            this.emitEvent(hideEvt);\n            if (hideEvt.defaultPrevented) {\n                // Don't hide if event cancelled\n                return;\n            }\n\n            // Transitionend Callback\n            var complete = function complete() {\n                if (_this3.$hoverState !== HoverState.SHOW && tip.parentNode) {\n                    // Remove tip from dom (but leaves reference in this.$tip)\n                    tip.parentNode.removeChild(tip);\n                }\n                _this3.removeAriaDescribedby();\n                _this3.removePopper();\n                // Force a re-compile (next time shown) of tip in case template has changed.\n                _this3.$tip = null;\n                if (callback) {\n                    callback();\n                }\n                // Create a non-cancelable BvEvent\n                var hiddenEvt = new BvEvent('hidden', {\n                    cancelable: false,\n                    target: _this3.$element,\n                    relatedTarget: null\n                });\n                _this3.emitEvent(hiddenEvt);\n            };\n\n            // Disable while open listeners/watchers\n            this.setWhileOpenListeners(false);\n\n            // If forced close, disable animation\n            if (force) {\n                removeClass(tip, ClassName.FADE);\n            }\n            // Hide tip\n            removeClass(tip, ClassName.SHOW);\n\n            this.$activeTrigger.click = false;\n            this.$activeTrigger.focus = false;\n            this.$activeTrigger.hover = false;\n\n            // Start the hide transition\n            this.transitionOnce(tip, complete);\n\n            this.$hoverState = '';\n        }\n    }, {\n        key: 'emitEvent',\n        value: function emitEvent(evt) {\n            var evtName = evt.type;\n            if (this.$root && this.$root.$emit) {\n                // Emit an event on $root\n                this.$root.$emit('bv::' + this.constructor.NAME + '::' + evtName, evt);\n            }\n            var callbacks = this.$config.callbacks || {};\n            if (typeof callbacks[evtName] === 'function') {\n                callbacks[evtName](evt);\n            }\n        }\n    }, {\n        key: 'getContainer',\n        value: function getContainer() {\n            var container = this.$config.container;\n            var body = document.body;\n            // If we are in a modal, we append to the modal instead of body, unless a container is specified\n            return container === false ? closest(MODAL_CLASS, this.$element) || body : select(container, body) || body;\n        }\n\n        // Will be overritten by popover if neede\n\n    }, {\n        key: 'addAriaDescribedby',\n        value: function addAriaDescribedby() {\n            // Add aria-describedby on trigger element, without removing any other IDs\n            var desc = getAttr(this.$element, 'aria-describedby') || '';\n            desc = desc.split(/\\s+/).concat(this.$id).join(' ').trim();\n            setAttr(this.$element, 'aria-describedby', desc);\n        }\n\n        // Will be overritten by popover if neede\n\n    }, {\n        key: 'removeAriaDescribedby',\n        value: function removeAriaDescribedby() {\n            var desc = getAttr(this.$element, 'aria-describedby') || '';\n            desc = desc.replace(this.$id, '').replace(/\\s+/g, ' ').trim();\n            if (desc) {\n                setAttr(this.$element, 'aria-describedby', desc);\n            } else {\n                removeAttr(this.$element, 'aria-describedby');\n            }\n        }\n    }, {\n        key: 'removePopper',\n        value: function removePopper() {\n            if (this.$popper) {\n                this.$popper.destroy();\n            }\n            this.$popper = null;\n        }\n    }, {\n        key: 'transitionOnce',\n        value: function transitionOnce(tip, complete) {\n            var _this4 = this;\n\n            var transEvents = this.getTransitionEndEvents();\n            var called = false;\n            clearTimeout(this.$fadeTimeout);\n            this.$fadeTimeout = null;\n            var fnOnce = function fnOnce() {\n                if (called) {\n                    return;\n                }\n                called = true;\n                clearTimeout(_this4.$fadeTimeout);\n                _this4.$fadeTimeout = null;\n                transEvents.forEach(function (evtName) {\n                    eventOff(tip, evtName, fnOnce);\n                });\n                // Call complete callback\n                complete();\n            };\n            if (hasClass(tip, ClassName.FADE)) {\n                transEvents.forEach(function (evtName) {\n                    eventOn(tip, evtName, fnOnce);\n                });\n                // Fallback to setTimeout\n                this.$fadeTimeout = setTimeout(fnOnce, TRANSITION_DURATION);\n            } else {\n                fnOnce();\n            }\n        }\n\n        // What transitionend event(s) to use? (returns array of event names)\n\n    }, {\n        key: 'getTransitionEndEvents',\n        value: function getTransitionEndEvents() {\n            for (var name in TransitionEndEvents$1) {\n                if (this.$element.style[name] !== undefined) {\n                    return TransitionEndEvents$1[name];\n                }\n            }\n            // fallback\n            return [];\n        }\n    }, {\n        key: 'update',\n        value: function update() {\n            if (this.$popper !== null) {\n                this.$popper.scheduleUpdate();\n            }\n        }\n\n        // NOTE: Overridden by PopOver class\n\n    }, {\n        key: 'isWithContent',\n        value: function isWithContent(tip) {\n            tip = tip || this.$tip;\n            if (!tip) {\n                return false;\n            }\n            return Boolean((select(Selector$1.TOOLTIP_INNER, tip) || {}).innerHTML);\n        }\n\n        // NOTE: Overridden by PopOver class\n\n    }, {\n        key: 'addAttachmentClass',\n        value: function addAttachmentClass(attachment) {\n            addClass(this.getTipElement(), CLASS_PREFIX + '-' + attachment);\n        }\n    }, {\n        key: 'getTipElement',\n        value: function getTipElement() {\n            if (!this.$tip) {\n                // Try and compile user supplied template, or fallback to default template\n                this.$tip = this.compileTemplate(this.$config.template) || this.compileTemplate(this.constructor.Default.template);\n            }\n            return this.$tip;\n        }\n    }, {\n        key: 'compileTemplate',\n        value: function compileTemplate(html) {\n            if (!html || typeof html !== 'string') {\n                return null;\n            }\n            var div = document.createElement('div');\n            div.innerHTML = html.trim();\n            var node = div.firstElementChild ? div.removeChild(div.firstElementChild) : null;\n            div = null;\n            return node;\n        }\n\n        // NOTE: Overridden by PopOver class\n\n    }, {\n        key: 'setContent',\n        value: function setContent(tip) {\n            this.setElementContent(select(Selector$1.TOOLTIP_INNER, tip), this.getTitle());\n            removeClass(tip, ClassName.FADE);\n            removeClass(tip, ClassName.SHOW);\n        }\n    }, {\n        key: 'setElementContent',\n        value: function setElementContent(container, content) {\n            if (!container) {\n                // If container element doesn't exist, just return\n                return;\n            }\n            var allowHtml = this.$config.html;\n            if ((typeof content === 'undefined' ? 'undefined' : _typeof(content)) === 'object' && content.nodeType) {\n                // content is a DOM node\n                if (allowHtml) {\n                    if (content.parentElement !== container) {\n                        container.innerHtml = '';\n                        container.appendChild(content);\n                    }\n                } else {\n                    container.innerText = content.innerText;\n                }\n            } else {\n                // We have a plain HTML string or Text\n                container[allowHtml ? 'innerHTML' : 'innerText'] = content;\n            }\n        }\n\n        // NOTE: Overridden by PopOver class\n\n    }, {\n        key: 'getTitle',\n        value: function getTitle() {\n            var title = this.$config.title || '';\n            if (typeof title === 'function') {\n                // Call the function to get the title value\n                title = title(this.$element);\n            }\n            if ((typeof title === 'undefined' ? 'undefined' : _typeof(title)) === 'object' && title.nodeType && !title.innerHTML.trim()) {\n                // We have a DOM node, but without inner content, so just return empty string\n                title = '';\n            }\n            if (typeof title === 'string') {\n                title = title.trim();\n            }\n            if (!title) {\n                // If an explicit title is not given, try element's title atributes\n                title = getAttr(this.$element, 'title') || getAttr(this.$element, 'data-original-title') || '';\n                title = title.trim();\n            }\n\n            return title;\n        }\n    }, {\n        key: 'listen',\n        value: function listen() {\n            var _this5 = this;\n\n            var triggers = this.$config.trigger.trim().split(/\\s+/);\n            var el = this.$element;\n\n            // Using 'this' as the handler will get automagically directed to this.handleEvent\n            // And maintain our binding to 'this'\n            triggers.forEach(function (trigger) {\n                if (trigger === 'click') {\n                    eventOn(el, 'click', _this5);\n                } else if (trigger === 'focus') {\n                    eventOn(el, 'focusin', _this5);\n                    eventOn(el, 'focusout', _this5);\n                } else if (trigger === 'blur') {\n                    // Used to close $tip when element looses focus\n                    eventOn(el, 'focusout', _this5);\n                } else if (trigger === 'hover') {\n                    eventOn(el, 'mouseenter', _this5);\n                    eventOn(el, 'mouseleave', _this5);\n                }\n            }, this);\n        }\n    }, {\n        key: 'unListen',\n        value: function unListen() {\n            var _this6 = this;\n\n            var events = ['click', 'focusin', 'focusout', 'mouseenter', 'mouseleave'];\n            // Using \"this\" as the handler will get automagically directed to this.handleEvent\n            events.forEach(function (evt) {\n                eventOff(_this6.$element, evt, _this6);\n            }, this);\n        }\n    }, {\n        key: 'handleEvent',\n        value: function handleEvent(e) {\n            // This special method allows us to use \"this\" as the event handlers\n            if (isDisabled(this.$element)) {\n                // If disabled, don't do anything. Note: if tip is shown before element gets\n                // disabled, then tip not close until no longer disabled or forcefully closed.\n                return;\n            }\n            var type = e.type;\n            if (type === 'click') {\n                this.toggle(e);\n            } else if (type === 'focusin' || type === 'mouseenter') {\n                this.enter(e);\n            } else if (type === 'focusout' || type === 'mouseleave') {\n                this.leave(e);\n            }\n        }\n    }, {\n        key: 'setRouteWatcher',\n        value: function setRouteWatcher(on) {\n            var _this7 = this;\n\n            if (on) {\n                this.setRouteWatcher(false);\n                if (this.$root && Boolean(this.$root.$route)) {\n                    this.$routeWatcher = this.$root.$watch('$route', function (newVal, oldVal) {\n                        if (newVal === oldVal) {\n                            return;\n                        }\n                        // If route has changed, we force hide the tooltip/popover\n                        _this7.forceHide();\n                    });\n                }\n            } else {\n                if (this.$routeWatcher) {\n                    // cancel the route watcher by calling hte stored reference\n                    this.$routeWatcher();\n                    this.$routeWatcher = null;\n                }\n            }\n        }\n    }, {\n        key: 'setModalListener',\n        value: function setModalListener(on) {\n            var modal = closest(MODAL_CLASS, this.$element);\n            if (!modal) {\n                // If we are not in a modal, don't worry. be happy\n                return;\n            }\n            // We can listen for modal hidden events on $root\n            if (this.$root) {\n                this.$root[on ? '$on' : '$off'](MODAL_CLOSE_EVENT, this.forceHide.bind(this));\n            }\n        }\n    }, {\n        key: 'setRootListener',\n        value: function setRootListener(on) {\n            // We can listen for global 'bv::hide::popover/tooltip' hide request event\n            if (this.$root) {\n                this.$root[on ? '$on' : '$off']('bv::hide::' + this.constructor.NAME, this.forceHide.bind(this));\n            }\n        }\n    }, {\n        key: 'setOnTouchStartListener',\n        value: function setOnTouchStartListener(on) {\n            var _this8 = this;\n\n            // if this is a touch-enabled device we add extra\n            // empty mouseover listeners to the body's immediate children;\n            // only needed because of broken event delegation on iOS\n            // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n            if ('ontouchstart' in document.documentElement) {\n                from(document.body.children).forEach(function (el) {\n                    if (on) {\n                        eventOn(el, 'mouseover', _this8._noop);\n                    } else {\n                        eventOff(el, 'mouseover', _this8._noop);\n                    }\n                });\n            }\n        }\n    }, {\n        key: '_noop',\n        value: function _noop() {\n            // Empty noop handler for ontouchstart devices\n        }\n    }, {\n        key: 'fixTitle',\n        value: function fixTitle() {\n            var el = this.$element;\n            var titleType = _typeof(getAttr(el, 'data-original-title'));\n            if (getAttr(el, 'title') || titleType !== 'string') {\n                setAttr(el, 'data-original-title', getAttr(el, 'title') || '');\n                setAttr(el, 'title', '');\n            }\n        }\n\n        // Enter handler\n\n    }, {\n        key: 'enter',\n        value: function enter(e) {\n            var _this9 = this;\n\n            if (e) {\n                this.$activeTrigger[e.type === 'focusin' ? 'focus' : 'hover'] = true;\n            }\n            if (hasClass(this.getTipElement(), ClassName.SHOW) || this.$hoverState === HoverState.SHOW) {\n                this.$hoverState = HoverState.SHOW;\n                return;\n            }\n            clearTimeout(this.$hoverTimeout);\n            this.$hoverState = HoverState.SHOW;\n            if (!this.$config.delay || !this.$config.delay.show) {\n                this.show();\n                return;\n            }\n            this.$hoverTimeout = setTimeout(function () {\n                if (_this9.$hoverState === HoverState.SHOW) {\n                    _this9.show();\n                }\n            }, this.$config.delay.show);\n        }\n\n        // Leave handler\n\n    }, {\n        key: 'leave',\n        value: function leave(e) {\n            var _this10 = this;\n\n            if (e) {\n                this.$activeTrigger[e.type === 'focusout' ? 'focus' : 'hover'] = false;\n                if (e.type === 'focusout' && /blur/.test(this.$config.trigger)) {\n                    // Special case for `blur`: we clear out the other triggers\n                    this.$activeTrigger.click = false;\n                    this.$activeTrigger.hover = false;\n                }\n            }\n            if (this.isWithActiveTrigger()) {\n                return;\n            }\n            clearTimeout(this.$hoverTimeout);\n            this.$hoverState = HoverState.OUT;\n            if (!this.$config.delay || !this.$config.delay.hide) {\n                this.hide();\n                return;\n            }\n            this.$hoverTimeout = setTimeout(function () {\n                if (_this10.$hoverState === HoverState.OUT) {\n                    _this10.hide();\n                }\n            }, this.$config.delay.hide);\n        }\n    }, {\n        key: 'getPopperConfig',\n        value: function getPopperConfig(placement, tip) {\n            var _this11 = this;\n\n            return {\n                placement: this.constructor.getAttachment(placement),\n                modifiers: {\n                    offset: { offset: this.getOffset(placement, tip) },\n                    flip: { behavior: this.$config.fallbackPlacement },\n                    arrow: { element: '.arrow' }\n                },\n                onCreate: function onCreate(data) {\n                    // Handle flipping arrow classes\n                    if (data.originalPlacement !== data.placement) {\n                        _this11.handlePopperPlacementChange(data);\n                    }\n                },\n                onUpdate: function onUpdate(data) {\n                    // Handle flipping arrow classes\n                    _this11.handlePopperPlacementChange(data);\n                }\n            };\n        }\n    }, {\n        key: 'getOffset',\n        value: function getOffset(placement, tip) {\n            if (!this.$config.offset) {\n                var arrow = select(Selector$1.ARROW, tip);\n                var arrowOffset = parseFloat(getCS(arrow).width) + parseFloat(this.$config.arrowPadding);\n                switch (OffsetMap[placement.toUpperCase()]) {\n                    case +1:\n                        return '+50%p - ' + arrowOffset + 'px';\n                    case -1:\n                        return '-50%p + ' + arrowOffset + 'px';\n                    default:\n                        return 0;\n                }\n            }\n            return parseFloat(this.$config.offset);\n        }\n    }, {\n        key: 'getPlacement',\n        value: function getPlacement() {\n            var placement = this.$config.placement;\n            if (typeof placement === 'function') {\n                return placement.call(this, this.$tip, this.$element);\n            }\n            return placement;\n        }\n    }, {\n        key: 'isWithActiveTrigger',\n        value: function isWithActiveTrigger() {\n            for (var trigger in this.$activeTrigger) {\n                if (this.$activeTrigger[trigger]) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        // NOTE: Overridden by PopOver class\n\n    }, {\n        key: 'cleanTipClass',\n        value: function cleanTipClass() {\n            var tip = this.getTipElement();\n            var tabClass = tip.className.match(BSCLS_PREFIX_REGEX);\n            if (tabClass !== null && tabClass.length > 0) {\n                tabClass.forEach(function (cls) {\n                    removeClass(tip, cls);\n                });\n            }\n        }\n    }, {\n        key: 'handlePopperPlacementChange',\n        value: function handlePopperPlacementChange(data) {\n            this.cleanTipClass();\n            this.addAttachmentClass(this.constructor.getAttachment(data.placement));\n        }\n    }, {\n        key: 'fixTransition',\n        value: function fixTransition(tip) {\n            var initConfigAnimation = this.$config.animation || false;\n            if (getAttr(tip, 'x-placement') !== null) {\n                return;\n            }\n            removeClass(tip, ClassName.FADE);\n            this.$config.animation = false;\n            this.hide();\n            this.show();\n            this.$config.animation = initConfigAnimation;\n        }\n    }], [{\n        key: 'getAttachment',\n        value: function getAttachment(placement) {\n            return AttachmentMap$1[placement.toUpperCase()];\n        }\n    }, {\n        key: 'Default',\n        get: function get$$1() {\n            return Defaults$1;\n        }\n\n        // NOTE: Overridden by PopOver class\n\n    }, {\n        key: 'NAME',\n        get: function get$$1() {\n            return NAME;\n        }\n    }]);\n    return ToolTip;\n}();\n\nvar NAME$1 = 'popover';\nvar CLASS_PREFIX$1 = 'bs-popover';\nvar BSCLS_PREFIX_REGEX$1 = new RegExp('\\\\b' + CLASS_PREFIX$1 + '\\\\S+', 'g');\n\nvar Defaults$2 = assign({}, ToolTip.Default, {\n    placement: 'right',\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div></div>'\n});\n\nvar ClassName$1 = {\n    FADE: 'fade',\n    SHOW: 'show'\n};\n\nvar Selector$2 = {\n    TITLE: '.popover-header',\n    CONTENT: '.popover-body'\n};\n\nvar PopOver = function (_ToolTip) {\n    inherits(PopOver, _ToolTip);\n\n    function PopOver() {\n        classCallCheck(this, PopOver);\n        return possibleConstructorReturn(this, (PopOver.__proto__ || Object.getPrototypeOf(PopOver)).apply(this, arguments));\n    }\n\n    createClass(PopOver, [{\n        key: 'isWithContent',\n\n\n        // Method overrides\n\n        value: function isWithContent(tip) {\n            tip = tip || this.$tip;\n            if (!tip) {\n                return false;\n            }\n            var hasTitle = Boolean((select(Selector$2.TITLE, tip) || {}).innerHTML);\n            var hasContent = Boolean((select(Selector$2.CONTENT, tip) || {}).innerHTML);\n            return hasTitle || hasContent;\n        }\n    }, {\n        key: 'addAttachmentClass',\n        value: function addAttachmentClass(attachment) {\n            addClass(this.getTipElement(), CLASS_PREFIX$1 + '-' + attachment);\n        }\n    }, {\n        key: 'setContent',\n        value: function setContent(tip) {\n            // we use append for html objects to maintain js events/components\n            this.setElementContent(select(Selector$2.TITLE, tip), this.getTitle());\n            this.setElementContent(select(Selector$2.CONTENT, tip), this.getContent());\n\n            removeClass(tip, ClassName$1.FADE);\n            removeClass(tip, ClassName$1.SHOW);\n        }\n\n        // This method may look identical to ToolTip version, but it uses a different RegEx defined above\n\n    }, {\n        key: 'cleanTipClass',\n        value: function cleanTipClass() {\n            var tip = this.getTipElement();\n            var tabClass = tip.className.match(BSCLS_PREFIX_REGEX$1);\n            if (tabClass !== null && tabClass.length > 0) {\n                tabClass.forEach(function (cls) {\n                    removeClass(tip, cls);\n                });\n            }\n        }\n    }, {\n        key: 'getTitle',\n        value: function getTitle() {\n            var title = this.$config.title || '';\n            if (typeof title === 'function') {\n                title = title(this.$element);\n            }\n            if ((typeof title === 'undefined' ? 'undefined' : _typeof(title)) === 'object' && title.nodeType && !title.innerHTML.trim()) {\n                // We have a dom node, but without inner content, so just return an empty string\n                title = '';\n            }\n            if (typeof title === 'string') {\n                title = title.trim();\n            }\n            if (!title) {\n                // Try and grab element's title attribute\n                title = getAttr(this.$element, 'title') || getAttr(this.$element, 'data-original-title') || '';\n                title = title.trim();\n            }\n            return title;\n        }\n\n        // New methods\n\n    }, {\n        key: 'getContent',\n        value: function getContent() {\n            var content = this.$config.content || '';\n            if (typeof content === 'function') {\n                content = content(this.$element);\n            }\n            if ((typeof content === 'undefined' ? 'undefined' : _typeof(content)) === 'object' && content.nodeType && !content.innerHTML.trim()) {\n                // We have a dom node, but without inner content, so just return an empty string\n                content = '';\n            }\n            if (typeof content === 'string') {\n                content = content.trim();\n            }\n            return content;\n        }\n    }], [{\n        key: 'Default',\n\n\n        // Getter overrides\n\n        get: function get$$1() {\n            return Defaults$2;\n        }\n    }, {\n        key: 'NAME',\n        get: function get$$1() {\n            return NAME$1;\n        }\n    }]);\n    return PopOver;\n}(ToolTip);\n\n/*\n * ScrollSpy class definition\n */\n\n/*\n * Constants / Defaults\n */\n\nvar NAME$2 = 'v-b-scrollspy';\nvar ACTIVATE_EVENT = 'bv::scrollspy::activate';\n\nvar Default = {\n    element: 'body',\n    offset: 10,\n    method: 'auto',\n    throttle: 75\n};\n\nvar DefaultType = {\n    element: '(string|element|component)',\n    offset: 'number',\n    method: 'string',\n    throttle: 'number'\n};\n\nvar ClassName$2 = {\n    DROPDOWN_ITEM: 'dropdown-item',\n    ACTIVE: 'active'\n};\n\nvar Selector$3 = {\n    ACTIVE: '.active',\n    NAV_LIST_GROUP: '.nav, .list-group',\n    NAV_LINKS: '.nav-link',\n    NAV_ITEMS: '.nav-item',\n    LIST_ITEMS: '.list-group-item',\n    DROPDOWN: '.dropdown, dropup',\n    DROPDOWN_ITEMS: '.dropdown-item',\n    DROPDOWN_TOGGLE: '.dropdown-toggle'\n};\n\nvar OffsetMethod = {\n    OFFSET: 'offset',\n    POSITION: 'position'\n};\n\n// HREFs must start with # but can be === '#', or start with '#/' or '#!' (which can be router links)\nvar HREF_REGEX = /^#[^/!]+/;\n\n// Transition Events\nvar TransitionEndEvents$2 = ['webkitTransitionEnd', 'transitionend', 'otransitionend', 'oTransitionEnd'];\n\n/*\n * Utility Methods\n */\n\n// Better var type detection\nfunction toType(obj) {\n    return {}.toString.call(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n}\n\n// Check config properties for expected types\nfunction typeCheckConfig(componentName, config, configTypes) {\n    for (var property in configTypes) {\n        if (Object.prototype.hasOwnProperty.call(configTypes, property)) {\n            var expectedTypes = configTypes[property];\n            var value = config[property];\n            var valueType = value && isElement(value) ? 'element' : toType(value);\n            // handle Vue instances\n            valueType = value && value._isVue ? 'component' : valueType;\n\n            if (!new RegExp(expectedTypes).test(valueType)) {\n                warn(componentName + ': Option \"' + property + '\" provided type \"' + valueType + '\", but expected type \"' + expectedTypes + '\"');\n            }\n        }\n    }\n}\n\n/*\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nvar ScrollSpy = function () {\n    function ScrollSpy(element, config, $root) {\n        classCallCheck(this, ScrollSpy);\n\n        // The element we activate links in\n        this.$el = element;\n        this.$scroller = null;\n        this.$selector = [Selector$3.NAV_LINKS, Selector$3.LIST_ITEMS, Selector$3.DROPDOWN_ITEMS].join(',');\n        this.$offsets = [];\n        this.$targets = [];\n        this.$activeTarget = null;\n        this.$scrollHeight = 0;\n        this.$resizeTimeout = null;\n        this.$obs_scroller = null;\n        this.$obs_targets = null;\n        this.$root = $root || null;\n        this.$config = null;\n\n        this.updateConfig(config);\n    }\n\n    createClass(ScrollSpy, [{\n        key: 'updateConfig',\n        value: function updateConfig(config, $root) {\n            if (this.$scroller) {\n                // Just in case out scroll element has changed\n                this.unlisten();\n                this.$scroller = null;\n            }\n            var cfg = assign({}, this.constructor.Default, config);\n            if ($root) {\n                this.$root = $root;\n            }\n            typeCheckConfig(this.constructor.Name, cfg, this.constructor.DefaultType);\n            this.$config = cfg;\n\n            if (this.$root) {\n                var self = this;\n                this.$root.$nextTick(function () {\n                    self.listen();\n                });\n            } else {\n                this.listen();\n            }\n        }\n    }, {\n        key: 'dispose',\n        value: function dispose() {\n            this.unlisten();\n            clearTimeout(this.$resizeTimeout);\n            this.$resizeTimeout = null;\n            this.$el = null;\n            this.$config = null;\n            this.$scroller = null;\n            this.$selector = null;\n            this.$offsets = null;\n            this.$targets = null;\n            this.$activeTarget = null;\n            this.$scrollHeight = null;\n        }\n    }, {\n        key: 'listen',\n        value: function listen() {\n            var _this = this;\n\n            var scroller = this.getScroller();\n            if (scroller && scroller.tagName !== 'BODY') {\n                eventOn(scroller, 'scroll', this);\n            }\n            eventOn(window, 'scroll', this);\n            eventOn(window, 'resize', this);\n            eventOn(window, 'orientationchange', this);\n            TransitionEndEvents$2.forEach(function (evtName) {\n                eventOn(window, evtName, _this);\n            });\n            this.setObservers(true);\n            // Scedule a refresh\n            this.handleEvent('refresh');\n        }\n    }, {\n        key: 'unlisten',\n        value: function unlisten() {\n            var _this2 = this;\n\n            var scroller = this.getScroller();\n            this.setObservers(false);\n            if (scroller && scroller.tagName !== 'BODY') {\n                eventOff(scroller, 'scroll', this);\n            }\n            eventOff(window, 'scroll', this);\n            eventOff(window, 'resize', this);\n            eventOff(window, 'orientationchange', this);\n            TransitionEndEvents$2.forEach(function (evtName) {\n                eventOff(window, evtName, _this2);\n            });\n        }\n    }, {\n        key: 'setObservers',\n        value: function setObservers(on) {\n            var _this3 = this;\n\n            // We observe both the scroller for content changes, and the target links\n            if (this.$obs_scroller) {\n                this.$obs_scroller.disconnect();\n                this.$obs_scroller = null;\n            }\n            if (this.$obs_targets) {\n                this.$obs_targets.disconnect();\n                this.$obs_targets = null;\n            }\n            if (on) {\n                this.$obs_targets = observeDOM(this.$el, function () {\n                    _this3.handleEvent('mutation');\n                }, {\n                    subtree: true,\n                    childList: true,\n                    attributes: true,\n                    attributeFilter: ['href']\n                });\n                this.$obs_scroller = observeDOM(this.getScroller(), function () {\n                    _this3.handleEvent('mutation');\n                }, {\n                    subtree: true,\n                    childList: true,\n                    characterData: true,\n                    attributes: true,\n                    attributeFilter: ['id', 'style', 'class']\n                });\n            }\n        }\n\n        // general event handler\n\n    }, {\n        key: 'handleEvent',\n        value: function handleEvent(evt) {\n            var type = typeof evt === 'string' ? evt : evt.type;\n\n            var self = this;\n            function resizeThrottle() {\n                if (!self.$resizeTimeout) {\n                    self.$resizeTimeout = setTimeout(function () {\n                        self.refresh();\n                        self.process();\n                        self.$resizeTimeout = null;\n                    }, self.$config.throttle);\n                }\n            }\n\n            if (type === 'scroll') {\n                if (!this.$obs_scroller) {\n                    // Just in case we are added to the DOM before the scroll target is\n                    // We re-instantiate our listeners, just in case\n                    this.listen();\n                }\n                this.process();\n            } else if (/(resize|orientationchange|mutation|refresh)/.test(type)) {\n                // Postpone these events by throttle time\n                resizeThrottle();\n            }\n        }\n\n        // Refresh the list of target links on the element we are applied to\n\n    }, {\n        key: 'refresh',\n        value: function refresh() {\n            var _this4 = this;\n\n            var scroller = this.getScroller();\n            if (!scroller) {\n                return;\n            }\n            var autoMethod = scroller !== scroller.window ? OffsetMethod.POSITION : OffsetMethod.OFFSET;\n            var method = this.$config.method === 'auto' ? autoMethod : this.$config.method;\n            var methodFn = method === OffsetMethod.POSITION ? position : offset;\n            var offsetBase = method === OffsetMethod.POSITION ? this.getScrollTop() : 0;\n\n            this.$offsets = [];\n            this.$targets = [];\n\n            this.$scrollHeight = this.getScrollHeight();\n\n            // Find all the unique link href's\n            selectAll(this.$selector, this.$el).map(function (link) {\n                return getAttr(link, 'href');\n            }).filter(function (href) {\n                return HREF_REGEX.test(href || '');\n            }).map(function (href) {\n                var el = select(href, scroller);\n                if (isVisible(el)) {\n                    return {\n                        offset: parseInt(methodFn(el).top, 10) + offsetBase,\n                        target: href\n                    };\n                }\n                return null;\n            }).filter(function (item) {\n                return item;\n            }).sort(function (a, b) {\n                return a.offset - b.offset;\n            }).reduce(function (memo, item) {\n                // record only unique targets/offfsets\n                if (!memo[item.target]) {\n                    _this4.$offsets.push(item.offset);\n                    _this4.$targets.push(item.target);\n                    memo[item.target] = true;\n                }\n                return memo;\n            }, {});\n\n            return this;\n        }\n\n        // Handle activating/clearing\n\n    }, {\n        key: 'process',\n        value: function process() {\n            var scrollTop = this.getScrollTop() + this.$config.offset;\n            var scrollHeight = this.getScrollHeight();\n            var maxScroll = this.$config.offset + scrollHeight - this.getOffsetHeight();\n\n            if (this.$scrollHeight !== scrollHeight) {\n                this.refresh();\n            }\n\n            if (scrollTop >= maxScroll) {\n                var target = this.$targets[this.$targets.length - 1];\n                if (this.$activeTarget !== target) {\n                    this.activate(target);\n                }\n                return;\n            }\n\n            if (this.$activeTarget && scrollTop < this.$offsets[0] && this.$offsets[0] > 0) {\n                this.$activeTarget = null;\n                this.clear();\n                return;\n            }\n\n            for (var i = this.$offsets.length; i--;) {\n                var isActiveTarget = this.$activeTarget !== this.$targets[i] && scrollTop >= this.$offsets[i] && (typeof this.$offsets[i + 1] === 'undefined' || scrollTop < this.$offsets[i + 1]);\n\n                if (isActiveTarget) {\n                    this.activate(this.$targets[i]);\n                }\n            }\n        }\n    }, {\n        key: 'getScroller',\n        value: function getScroller() {\n            if (this.$scroller) {\n                return this.$scroller;\n            }\n            var scroller = this.$config.element;\n            if (!scroller) {\n                return null;\n            } else if (isElement(scroller.$el)) {\n                scroller = scroller.$el;\n            } else if (typeof scroller === 'string') {\n                scroller = select(scroller);\n            }\n            if (!scroller) {\n                return null;\n            }\n            this.$scroller = scroller.tagName === 'BODY' ? window : scroller;\n            return this.$scroller;\n        }\n    }, {\n        key: 'getScrollTop',\n        value: function getScrollTop() {\n            var scroller = this.getScroller();\n            return scroller === window ? scroller.pageYOffset : scroller.scrollTop;\n        }\n    }, {\n        key: 'getScrollHeight',\n        value: function getScrollHeight() {\n            return this.getScroller().scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n        }\n    }, {\n        key: 'getOffsetHeight',\n        value: function getOffsetHeight() {\n            var scroller = this.getScroller();\n            return scroller === window ? window.innerHeight : getBCR(scroller).height;\n        }\n    }, {\n        key: 'activate',\n        value: function activate(target) {\n            var _this5 = this;\n\n            this.$activeTarget = target;\n            this.clear();\n\n            // Grab the list of target links (<a href=\"{$target}\">)\n            var links = selectAll(this.$selector.split(',').map(function (selector) {\n                return selector + '[href=\"' + target + '\"]';\n            }).join(','), this.$el);\n\n            links.forEach(function (link) {\n                if (hasClass(link, ClassName$2.DROPDOWN_ITEM)) {\n                    // This is a dropdown item, so find the .dropdown-toggle and set it's state\n                    var dropdown = closest(Selector$3.DROPDOWN, link);\n                    if (dropdown) {\n                        _this5.setActiveState(select(Selector$3.DROPDOWN_TOGGLE, dropdown), true);\n                    }\n                    // Also set this link's state\n                    _this5.setActiveState(link, true);\n                } else {\n                    // Set triggered link as active\n                    _this5.setActiveState(link, true);\n                    if (matches(link.parentElement, Selector$3.NAV_ITEMS)) {\n                        // Handle nav-link inside nav-item, and set nav-item active\n                        _this5.setActiveState(link.parentElement, true);\n                    }\n                    // Set triggered links parents as active\n                    // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n                    var el = link;\n                    while (el) {\n                        el = closest(Selector$3.NAV_LIST_GROUP, el);\n                        var sibling = el ? el.previousElementSibling : null;\n                        if (matches(sibling, Selector$3.NAV_LINKS + ', ' + Selector$3.LIST_ITEMS)) {\n                            _this5.setActiveState(sibling, true);\n                        }\n                        // Handle special case where nav-link is inside a nav-item\n                        if (matches(sibling, Selector$3.NAV_ITEMS)) {\n                            _this5.setActiveState(select(Selector$3.NAV_LINKS, sibling), true);\n                            // Add active state to nav-item as well\n                            _this5.setActiveState(sibling, true);\n                        }\n                    }\n                }\n            });\n\n            // Signal event to via $root, passing ID of activaed target and reference to array of links\n            if (links && links.length > 0 && this.$root) {\n                this.$root.$emit(ACTIVATE_EVENT, target, links);\n            }\n        }\n    }, {\n        key: 'clear',\n        value: function clear() {\n            var _this6 = this;\n\n            selectAll(this.$selector + ', ' + Selector$3.NAV_ITEMS, this.$el).filter(function (el) {\n                return hasClass(el, ClassName$2.ACTIVE);\n            }).forEach(function (el) {\n                return _this6.setActiveState(el, false);\n            });\n        }\n    }, {\n        key: 'setActiveState',\n        value: function setActiveState(el, active) {\n            if (!el) {\n                return;\n            }\n            if (active) {\n                addClass(el, ClassName$2.ACTIVE);\n            } else {\n                removeClass(el, ClassName$2.ACTIVE);\n            }\n        }\n    }], [{\n        key: 'Name',\n        get: function get$$1() {\n            return NAME$2;\n        }\n    }, {\n        key: 'Default',\n        get: function get$$1() {\n            return Default;\n        }\n    }, {\n        key: 'DefaultType',\n        get: function get$$1() {\n            return DefaultType;\n        }\n    }]);\n    return ScrollSpy;\n}();\n\nvar Selector = {\n    FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\n    STICKY_CONTENT: '.sticky-top',\n    NAVBAR_TOGGLER: '.navbar-toggler'\n};\n\nvar OBSERVER_CONFIG$1 = {\n    subtree: true,\n    childList: true,\n    characterData: true,\n    attributes: true,\n    attributeFilter: ['style', 'class']\n};\n\nvar modal = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return !_vm.is_hidden ? _c('div', { attrs: { \"id\": _vm.safeId('__BV_modal_outer_') } }, [_c('transition', { attrs: { \"enter-class\": \"\", \"enter-to-class\": \"\", \"enter-active-class\": \"\", \"leave-class\": \"\", \"leave-active-class\": \"\", \"leave-to-class\": \"\" }, on: { \"before-enter\": _vm.onBeforeEnter, \"enter\": _vm.onEnter, \"after-enter\": _vm.onAfterEnter, \"before-leave\": _vm.onBeforeLeave, \"leave\": _vm.onLeave, \"after-leave\": _vm.onAfterLeave } }, [_c('div', { directives: [{ name: \"show\", rawName: \"v-show\", value: _vm.is_visible, expression: \"is_visible\" }], ref: \"modal\", class: _vm.modalClasses, attrs: { \"id\": _vm.safeId(), \"aria-hidden\": _vm.is_visible ? null : 'true', \"role\": \"dialog\" }, on: { \"click\": _vm.onClickOut, \"keyup\": function keyup($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"esc\", 27)) {\n                        return null;\n                    }_vm.onEsc($event);\n                } } }, [_c('div', { class: _vm.dialogClasses }, [_c('div', { ref: \"content\", staticClass: \"modal-content\", attrs: { \"tabindex\": \"-1\", \"role\": \"document\", \"aria-labelledby\": _vm.hideHeader ? null : _vm.safeId('__BV_modal_header_'), \"aria-describedby\": _vm.safeId('__BV_modal_body_') }, on: { \"focusout\": _vm.onFocusout, \"click\": function click($event) {\n                    $event.stopPropagation();\n                } } }, [!_vm.hideHeader ? _c('header', { ref: \"header\", class: _vm.headerClasses, attrs: { \"id\": _vm.safeId('__BV_modal_header_') } }, [_vm._t(\"modal-header\", [_c(_vm.titleTag, { tag: \"h5\", staticClass: \"modal-title\" }, [_vm._t(\"modal-title\", [_vm._v(_vm._s(_vm.title))])], 2), !_vm.hideHeaderClose ? _c('b-btn-close', { attrs: { \"disabled\": _vm.is_transitioning, \"aria-label\": _vm.headerCloseLabel, \"text-variant\": _vm.headerTextVariant }, on: { \"click\": function click($event) {\n                    _vm.hide('headerclose');\n                } } }, [_vm._t(\"modal-header-close\")], 2) : _vm._e()])], 2) : _vm._e(), _c('div', { ref: \"body\", class: _vm.bodyClasses, attrs: { \"id\": _vm.safeId('__BV_modal_body_') } }, [_vm._t(\"default\")], 2), !_vm.hideFooter ? _c('footer', { ref: \"footer\", class: _vm.footerClasses, attrs: { \"id\": _vm.safeId('__BV_modal_footer_') } }, [_vm._t(\"modal-footer\", [!_vm.okOnly ? _c('b-btn', { attrs: { \"variant\": _vm.cancelVariant, \"size\": _vm.buttonSize, \"disabled\": _vm.is_transitioning }, on: { \"click\": function click($event) {\n                    _vm.hide('cancel');\n                } } }, [_vm._t(\"modal-cancel\", [_vm._v(_vm._s(_vm.cancelTitle))])], 2) : _vm._e(), _c('b-btn', { attrs: { \"variant\": _vm.okVariant, \"size\": _vm.buttonSize, \"disabled\": _vm.okDisabled || _vm.is_transitioning }, on: { \"click\": function click($event) {\n                    _vm.hide('ok');\n                } } }, [_vm._t(\"modal-ok\", [_vm._v(_vm._s(_vm.okTitle))])], 2)])], 2) : _vm._e()])])])]), !_vm.hideBackdrop && (_vm.is_visible || _vm.is_transitioning) ? _c('div', { class: _vm.backdropClasses, attrs: { \"id\": _vm.safeId('__BV_modal_backdrop_') } }) : _vm._e()], 1) : _vm._e();\n    }, staticRenderFns: [],\n    mixins: [idMixin, listenOnRootMixin],\n    components: { bBtn: bBtn, bBtnClose: bBtnClose },\n    data: function data() {\n        return {\n            is_hidden: this.lazy || false,\n            is_visible: false,\n            is_transitioning: false,\n            is_show: false,\n            is_block: false,\n            scrollbarWidth: 0,\n            isBodyOverflowing: false,\n            return_focus: this.returnFocus || null\n        };\n    },\n\n    model: {\n        prop: 'visible',\n        event: 'change'\n    },\n    props: {\n        title: {\n            type: String,\n            default: ''\n        },\n        titleTag: {\n            type: String,\n            default: 'h5'\n        },\n        size: {\n            type: String,\n            default: 'md'\n        },\n        buttonSize: {\n            type: String,\n            default: ''\n        },\n        noFade: {\n            type: Boolean,\n            default: false\n        },\n        noCloseOnBackdrop: {\n            type: Boolean,\n            default: false\n        },\n        noCloseOnEsc: {\n            type: Boolean,\n            default: false\n        },\n        noEnforceFocus: {\n            type: Boolean,\n            default: false\n        },\n        headerBgVariant: {\n            type: String,\n            default: null\n        },\n        headerBorderVariant: {\n            type: String,\n            default: null\n        },\n        headerTextVariant: {\n            type: String,\n            default: null\n        },\n        bodyBgVariant: {\n            type: String,\n            default: null\n        },\n        bodyTextVariant: {\n            type: String,\n            default: null\n        },\n        footerBgVariant: {\n            type: String,\n            default: null\n        },\n        footerBorderVariant: {\n            type: String,\n            default: null\n        },\n        footerTextVariant: {\n            type: String,\n            default: null\n        },\n        hideHeader: {\n            type: Boolean,\n            default: false\n        },\n        hideFooter: {\n            type: Boolean,\n            default: false\n        },\n        hideHeaderClose: {\n            type: Boolean,\n            default: false\n        },\n        hideBackdrop: {\n            type: Boolean,\n            default: false\n        },\n        okOnly: {\n            type: Boolean,\n            default: false\n        },\n        okDisabled: {\n            type: Boolean,\n            default: false\n        },\n        visible: {\n            type: Boolean,\n            default: false\n        },\n        returnFocus: {\n            default: null\n        },\n        headerCloseLabel: {\n            type: String,\n            default: 'Close'\n        },\n        cancelTitle: {\n            type: String,\n            default: 'Cancel'\n        },\n        okTitle: {\n            type: String,\n            default: 'OK'\n        },\n        cancelVariant: {\n            type: String,\n            default: 'secondary'\n        },\n        okVariant: {\n            type: String,\n            default: 'primary'\n        },\n        lazy: {\n            type: Boolean,\n            default: false\n        }\n    },\n    computed: {\n        modalClasses: function modalClasses() {\n            return ['modal', {\n                fade: !this.noFade,\n                show: this.is_show,\n                'd-block': this.is_block\n            }];\n        },\n        dialogClasses: function dialogClasses() {\n            return ['modal-dialog', defineProperty$1({}, 'modal-' + this.size, Boolean(this.size))];\n        },\n        backdropClasses: function backdropClasses() {\n            return ['modal-backdrop', {\n                fade: !this.noFade,\n                show: this.is_show || this.noFade\n            }];\n        },\n        headerClasses: function headerClasses() {\n            var _ref2;\n\n            return ['modal-header', (_ref2 = {\n                'rounded-top': Boolean(this.headerBgVariant)\n            }, defineProperty$1(_ref2, 'bg-' + this.headerBgVariant, Boolean(this.headerBgVariant)), defineProperty$1(_ref2, 'text-' + this.headerTextVariant, Boolean(this.headerTextVariant)), defineProperty$1(_ref2, 'border-' + this.headerBorderVariant, Boolean(this.headerBorderVariant)), _ref2)];\n        },\n        bodyClasses: function bodyClasses() {\n            var _ref3;\n\n            return ['modal-body', (_ref3 = {}, defineProperty$1(_ref3, 'bg-' + this.bodyBgVariant, Boolean(this.bodyBgVariant)), defineProperty$1(_ref3, 'text-' + this.bodyTextVariant, Boolean(this.bodyTextVariant)), _ref3)];\n        },\n        footerClasses: function footerClasses() {\n            var _ref4;\n\n            return ['modal-footer', (_ref4 = {\n                'rounded-bottom': Boolean(this.footerBgVariant)\n            }, defineProperty$1(_ref4, 'bg-' + this.footerBgVariant, Boolean(this.footerBgVariant)), defineProperty$1(_ref4, 'text-' + this.footerTextVariant, Boolean(this.footerTextVariant)), defineProperty$1(_ref4, 'border-' + this.footerBorderVariant, Boolean(this.footerBorderVariant)), _ref4)];\n        }\n    },\n    watch: {\n        visible: function visible(new_val, old_val) {\n            if (new_val === old_val) {\n                return;\n            }\n            this[new_val ? 'show' : 'hide']();\n        }\n    },\n    methods: {\n        // Public Methods\n        show: function show() {\n            var _this = this;\n\n            if (this.is_visible) {\n                return;\n            }\n            var showEvt = new BvEvent('show', {\n                cancelable: true,\n                vueTarget: this,\n                target: this.$refs.modal,\n                relatedTarget: null\n            });\n            this.emitEvent(showEvt);\n            // Show if not canceled\n            if (showEvt.defaultPrevented || this.is_visible) {\n                return;\n            }\n            this.is_hidden = false;\n            this.$nextTick(function () {\n                // We do this in nextTick to ensure hte modal is in DOM first before we show it\n                _this.is_visible = true;\n                _this.$emit('change', true);\n                // Observe changes in modal content and adjust if necessary\n                _this._observer = observeDOM(_this.$refs.content, _this.adjustDialog.bind(_this), OBSERVER_CONFIG$1);\n            });\n        },\n        hide: function hide(trigger) {\n            if (!this.is_visible) {\n                return;\n            }\n            var hideEvt = new BvEvent('hide', {\n                cancelable: true,\n                vueTarget: this,\n                target: this.$refs.modal,\n                relatedTarget: null, // this could be the trigger element/component reference\n                isOK: trigger || null,\n                trigger: trigger || null,\n                cancel: function cancel() {\n                    // Backwards compatibility\n                    warn('b-modal: evt.cancel() is deprecated. Please use evt.preventDefault().');\n                    this.preventDefault();\n                }\n            });\n            if (trigger === 'ok') {\n                this.$emit('ok', hideEvt);\n            } else if (trigger === 'cancel') {\n                this.$emit('cancel', hideEvt);\n            }\n            this.emitEvent(hideEvt);\n            // Hide if not canceled\n            if (hideEvt.defaultPrevented || !this.is_visible) {\n                return;\n            }\n            // stop observing for content changes\n            if (this._observer) {\n                this._observer.disconnect();\n                this._observer = null;\n            }\n            this.is_visible = false;\n            this.$emit('change', false);\n        },\n\n        // Transition Handlers\n        onBeforeEnter: function onBeforeEnter() {\n            this.is_transitioning = true;\n            this.checkScrollbar();\n            this.setScrollbar();\n            addClass(document.body, 'modal-open');\n            this.setResizeEvent(true);\n        },\n        onEnter: function onEnter() {\n            this.is_block = true;\n            this.$refs.modal.scrollTop = 0;\n        },\n        onAfterEnter: function onAfterEnter() {\n            var _this2 = this;\n\n            this.is_show = true;\n            this.is_transitioning = false;\n            this.$nextTick(function () {\n                _this2.focusFirst();\n                var shownEvt = new BvEvent('shown', {\n                    cancelable: false,\n                    vueTarget: _this2,\n                    target: _this2.$refs.modal,\n                    relatedTarget: null\n                });\n                _this2.emitEvent(shownEvt);\n            });\n        },\n        onBeforeLeave: function onBeforeLeave() {\n            this.is_transitioning = true;\n            this.setResizeEvent(false);\n        },\n        onLeave: function onLeave() {\n            // Remove the 'show' class\n            this.is_show = false;\n        },\n        onAfterLeave: function onAfterLeave() {\n            var _this3 = this;\n\n            removeClass(document.body, 'modal-open');\n            this.is_block = false;\n            this.resetAdjustments();\n            this.resetScrollbar();\n            this.is_transitioning = false;\n            this.$nextTick(function () {\n                _this3.is_hidden = _this3.lazy || false;\n                _this3.returnFocusTo();\n                var hiddenEvt = new BvEvent('hidden', {\n                    cancelable: false,\n                    vueTarget: _this3,\n                    target: _this3.lazy ? null : _this3.$refs.modal,\n                    relatedTarget: null\n                });\n                _this3.emitEvent(hiddenEvt);\n            });\n        },\n\n        // Event emitter\n        emitEvent: function emitEvent(bvEvt) {\n            var type = bvEvt.type;\n            this.$emit(type, bvEvt);\n            this.$root.$emit('bv::modal::' + type, bvEvt);\n        },\n\n        // UI Event Handlers\n        onClickOut: function onClickOut() {\n            // If backdrop clicked, hide modal\n            if (this.is_visible && !this.noCloseOnBackdrop) {\n                this.hide('backdrop');\n            }\n        },\n        onEsc: function onEsc() {\n            // If ESC pressed, hide modal\n            if (this.is_visible && !this.noCloseOnEsc) {\n                this.hide('esc');\n            }\n        },\n        onFocusout: function onFocusout(evt) {\n            // If focus leaves modal, bring it back\n            // 'focusout' Event Listener bound on content\n            var content = this.$refs.content;\n            if (!this.noEnforceFocus && this.is_visible && content && !content.contains(evt.relatedTarget)) {\n                content.focus();\n            }\n        },\n\n        // Resize Listener\n        setResizeEvent: function setResizeEvent(on) {\n            var _this4 = this;\n\n            ['resize', 'orientationchange'].forEach(function (evtName) {\n                if (on) {\n                    eventOn(window, evtName, _this4.adjustDialog);\n                } else {\n                    eventOff(window, evtName, _this4.adjustDialog);\n                }\n            });\n        },\n\n        // Root Listener handlers\n        showHandler: function showHandler(id, triggerEl) {\n            if (id === this.id) {\n                this.return_focus = triggerEl || null;\n                this.show();\n            }\n        },\n        hideHandler: function hideHandler(id) {\n            if (id === this.id) {\n                this.hide();\n            }\n        },\n        modalListener: function modalListener(bvEvt) {\n            // If another modal opens, close this one\n            if (bvEvt.vueTarget !== this) {\n                this.hide();\n            }\n        },\n\n        // Focus control handlers\n        focusFirst: function focusFirst() {\n            // Don't try and focus if we are SSR\n            if (typeof document === 'undefined') {\n                return;\n            }\n            var content = this.$refs.content;\n            var activeElement = document.activeElement;\n            if (activeElement && content && content.contains(activeElement)) {\n                // If activeElement is child of content, no need to change focus\n                return;\n            } else if (content) {\n                // Focus the modal content wrapper\n                content.focus();\n            }\n        },\n        returnFocusTo: function returnFocusTo() {\n            // Prefer returnFocus prop over event specified return_focus value\n            var el = this.returnFocus || this.return_focus || null;\n            if (typeof el === 'string') {\n                // CSS Selector\n                el = select(el);\n            }\n            if (el) {\n                el = el.$el || el;\n                if (isVisible(el)) {\n                    el.focus();\n                }\n            }\n        },\n\n        // Utility methods\n        getScrollbarWidth: function getScrollbarWidth() {\n            var scrollDiv = document.createElement('div');\n            scrollDiv.className = 'modal-scrollbar-measure';\n            document.body.appendChild(scrollDiv);\n            this.scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;\n            document.body.removeChild(scrollDiv);\n        },\n        adjustDialog: function adjustDialog() {\n            if (!this.is_visible) {\n                return;\n            }\n            var modal = this.$refs.modal;\n            var isModalOverflowing = modal.scrollHeight > document.documentElement.clientHeight;\n\n            if (!this.isBodyOverflowing && isModalOverflowing) {\n                modal.style.paddingLeft = this.scrollbarWidth + 'px';\n            }\n\n            if (this.isBodyOverflowing && !isModalOverflowing) {\n                modal.style.paddingRight = this.scrollbarWidth + 'px';\n            }\n        },\n        resetAdjustments: function resetAdjustments() {\n            var modal = this.$refs.modal;\n            modal.style.paddingLeft = '';\n            modal.style.paddingRight = '';\n        },\n        checkScrollbar: function checkScrollbar() {\n            var rect = getBCR(document.body);\n            this.isBodyOverflowing = rect.left + rect.right < window.innerWidth;\n        },\n        setScrollbar: function setScrollbar() {\n            var _this5 = this;\n\n            if (this.isBodyOverflowing) {\n                // Note: DOMNode.style.paddingRight returns the actual value or '' if not set\n                //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set\n\n                var computedStyle = window.getComputedStyle;\n                var body = document.body;\n                selectAll(Selector.FIXED_CONTENT).forEach(function (el) {\n                    var actualPadding = el.style.paddingRight;\n                    var calculatedPadding = computedStyle(el).paddingRight || 0;\n                    setAttr(el, 'data-padding-right', actualPadding);\n                    el.style.paddingRight = parseFloat(calculatedPadding) + _this5.scrollbarWidth + 'px';\n                });\n\n                // Adjust sticky content margin\n                selectAll(Selector.STICKY_CONTENT).forEach(function (el) {\n                    var actualMargin = el.style.marginRight;\n                    var calculatedMargin = computedStyle(el).marginRight || 0;\n                    setAttr(el, 'data-margin-right', actualMargin);\n                    el.style.marginRight = parseFloat(calculatedMargin) - _this5.scrollbarWidth + 'px';\n                });\n\n                // Adjust navbar-toggler margin\n                selectAll(Selector.NAVBAR_TOGGLER).forEach(function (el) {\n                    var actualMargin = el.style.marginRight;\n                    var calculatedMargin = computedStyle(el).marginRight || 0;\n                    setAttr(el, 'data-margin-right', actualMargin);\n                    el.style.marginRight = parseFloat(calculatedMargin) + _this5.scrollbarWidth + 'px';\n                });\n\n                // Adjust body padding\n                var actualPadding = body.style.paddingRight;\n                var calculatedPadding = computedStyle(body).paddingRight;\n                setAttr(body, 'data-padding-right', actualPadding);\n                body.style.paddingRight = parseFloat(calculatedPadding) + this.scrollbarWidth + 'px';\n            }\n        },\n        resetScrollbar: function resetScrollbar() {\n            // Restore fixed content padding\n            selectAll(Selector.FIXED_CONTENT).forEach(function (el) {\n                el.style.paddingRight = getAttr(el, 'data-padding-right') || '';\n                removeAttr(el, 'data-padding-right');\n            });\n\n            // Restore sticky content and navbar-toggler margin\n            selectAll(Selector.STICKY_CONTENT + ', ' + Selector.NAVBAR_TOGGLER).forEach(function (el) {\n                el.style.marginRight = getAttr(el, 'data-margin-right') || '';\n                removeAttr(el, 'data-margin-right');\n            });\n\n            // Restore body padding\n            var body = document.body;\n            body.style.paddingRight = getAttr(body, 'data-padding-right') || '';\n            removeAttr(body, 'data-padding-right');\n        }\n    },\n    created: function created() {\n        // create non-reactive property\n        this._observer = null;\n    },\n    mounted: function mounted() {\n        // Measure scrollbar\n        this.getScrollbarWidth();\n        // Listen for events from others to either open or close ourselves\n        this.listenOnRoot('bv::show::modal', this.showHandler);\n        this.listenOnRoot('bv::hide::modal', this.hideHandler);\n        // Listen for bv:modal::show events, and close ourselves if the opening modal not us\n        this.listenOnRoot('bv::modal::show', this.modalListener);\n        // Initially show modal?\n        if (this.visible === true) {\n            this.show();\n        }\n    },\n    beforeDestroy: function beforeDestroy() {\n        if (this._observer) {\n            this._observer.disconnect();\n            this._observer = null;\n        }\n        this.setResizeEvent(false);\n    }\n};\n\nvar props$35 = {\n    tag: {\n        type: String,\n        default: \"ul\"\n    },\n    fill: {\n        type: Boolean,\n        default: false\n    },\n    justified: {\n        type: Boolean,\n        default: false\n    },\n    tabs: {\n        type: Boolean,\n        default: false\n    },\n    pills: {\n        type: Boolean,\n        default: false\n    },\n    vertical: {\n        type: Boolean,\n        default: false\n    },\n    isNavBar: {\n        type: Boolean,\n        default: false\n    }\n};\n\nvar nav = {\n    functional: true,\n    props: props$35,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(props.tag, lib_common(data, {\n            staticClass: \"nav\",\n            class: {\n                \"navbar-nav\": props.isNavBar,\n                \"nav-tabs\": props.tabs,\n                \"nav-pills\": props.pills,\n                \"flex-column\": props.vertical,\n                \"nav-fill\": props.fill,\n                \"nav-justified\": props.justified\n            }\n        }), children);\n    }\n};\n\nvar props$36 = propsFactory();\n\nvar navItem = {\n    functional: true,\n    props: props$36,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(\"li\", lib_common(data, {\n            staticClass: \"nav-item\"\n        }), [h(bLink, { staticClass: \"nav-link\", props: props }, children)]);\n    }\n};\n\nvar navItemDropdown = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('li', { class: _vm.dropdownClasses, attrs: { \"id\": _vm.safeId() } }, [_c('a', { ref: \"toggle\", class: _vm.toggleClasses, attrs: { \"href\": \"#\", \"id\": _vm.safeId('_BV_button_'), \"aria-haspopup\": \"true\", \"aria-expanded\": _vm.visible ? 'true' : 'false', \"disabled\": _vm.disabled }, on: { \"click\": function click($event) {\n                    $event.stopPropagation();$event.preventDefault();_vm.toggle($event);\n                }, \"keydown\": [function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13)) {\n                        return null;\n                    }$event.stopPropagation();$event.preventDefault();_vm.toggle($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"space\", 32)) {\n                        return null;\n                    }$event.stopPropagation();$event.preventDefault();_vm.toggle($event);\n                }] } }, [_vm._t(\"button-content\", [_vm._t(\"text\", [_c('span', { domProps: { \"innerHTML\": _vm._s(_vm.text) } })])])], 2), _c('div', { ref: \"menu\", class: _vm.menuClasses, attrs: { \"role\": _vm.role, \"aria-labelledby\": _vm.safeId('_BV_button_') }, on: { \"mouseover\": _vm.onMouseOver, \"keyup\": function keyup($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"esc\", 27)) {\n                        return null;\n                    }_vm.onEsc($event);\n                }, \"keydown\": [function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"tab\", 9)) {\n                        return null;\n                    }_vm.onTab($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"up\", 38)) {\n                        return null;\n                    }_vm.focusNext($event, true);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"down\", 40)) {\n                        return null;\n                    }_vm.focusNext($event, false);\n                }] } }, [_vm._t(\"default\")], 2)]);\n    }, staticRenderFns: [],\n    mixins: [idMixin, dropdownMixin],\n    computed: {\n        isNav: function isNav() {\n            // Signal to dropdown mixin that we are in a navbar\n            return true;\n        },\n        dropdownClasses: function dropdownClasses() {\n            return ['nav-item', 'b-nav-dropdown', 'dropdown', this.dropup ? 'dropup' : '', this.visible ? 'show' : ''];\n        },\n        toggleClasses: function toggleClasses() {\n            return ['nav-link', this.noCaret ? '' : 'dropdown-toggle', this.disabled ? disabled : ''];\n        },\n        menuClasses: function menuClasses() {\n            return ['dropdown-menu', this.right ? 'dropdown-menu-right' : 'dropdown-menu-left', this.visible ? 'show' : ''];\n        }\n    },\n    props: {\n        noCaret: {\n            type: Boolean,\n            default: false\n        },\n        role: {\n            type: String,\n            default: 'menu'\n        }\n    }\n};\n\nvar navToggle = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('button', { class: _vm.classObject, attrs: { \"type\": \"button\", \"aria-label\": _vm.label, \"aria-controls\": _vm.target.id ? _vm.target.id : _vm.target, \"aria-expanded\": _vm.toggleState ? 'true' : 'false' }, on: { \"click\": _vm.onclick } }, [_vm._t(\"default\", [_c('span', { staticClass: \"navbar-toggler-icon\" })])], 2);\n    }, staticRenderFns: [],\n    mixins: [listenOnRootMixin],\n    computed: {\n        classObject: function classObject() {\n            return ['navbar-toggler', 'navbar-toggler-' + this.position];\n        }\n    },\n    data: function data() {\n        return {\n            toggleState: false\n        };\n    },\n\n    props: {\n        label: {\n            type: String,\n            default: 'Toggle navigation'\n        },\n        position: {\n            type: String,\n            default: 'right'\n        },\n        target: {\n            required: true\n        }\n    },\n    methods: {\n        onclick: function onclick() {\n            var target = this.target;\n            if (target.toggle) {\n                target.toggle();\n            }\n            this.$root.$emit('bv::toggle::collapse', this.target);\n        },\n        handleStateEvt: function handleStateEvt(target, state) {\n            if (target === this.target || target === this.target.id) {\n                this.toggleState = state;\n            }\n        }\n    },\n    created: function created() {\n        this.listenOnRoot('bv::collapse::state', this.handleStateEvt);\n    }\n};\n\nvar props$37 = {\n    tag: {\n        type: String,\n        default: \"nav\"\n    },\n    type: {\n        type: String,\n        default: \"light\"\n    },\n    variant: {\n        type: String\n    },\n    toggleable: {\n        type: [Boolean, String],\n        default: false\n    },\n    toggleBreakpoint: {\n        // Deprecated.  Set toggleable to a string breakpoint\n        type: String,\n        default: null\n    },\n    fixed: {\n        type: String\n    },\n    sticky: {\n        type: Boolean,\n        default: false\n    }\n};\n\nvar navbar = {\n    functional: true,\n    props: props$37,\n    render: function render(h, _ref) {\n        var _class;\n\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        var breakpoint = props.toggleBreakpoint || (props.toggleable === true ? 'sm' : props.toggleable) || 'sm';\n        return h(props.tag, lib_common(data, {\n            staticClass: \"navbar\",\n            class: (_class = {}, defineProperty$1(_class, \"navbar-\" + props.type, Boolean(props.type)), defineProperty$1(_class, \"bg-\" + props.variant, Boolean(props.variant)), defineProperty$1(_class, \"fixed-\" + props.fixed, Boolean(props.fixed)), defineProperty$1(_class, \"sticky-top\", props.sticky), defineProperty$1(_class, \"navbar-expand-\" + breakpoint, props.toggleable !== false), _class)\n        }), children);\n    }\n};\n\nvar linkProps$2 = propsFactory();\nlinkProps$2.href.default = undefined;\nlinkProps$2.to.default = undefined;\n\nvar props$38 = assign(linkProps$2, {\n    tag: {\n        type: String,\n        default: \"div\"\n    }\n});\n\nvar navbarBrand = {\n    functional: true,\n    props: props$38,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        var isLink = Boolean(props.to || props.href);\n        var tag = isLink ? bLink : props.tag;\n\n        return h(tag, lib_common(data, {\n            staticClass: \"navbar-brand\",\n            props: isLink ? pluckProps(linkProps$2, props) : {}\n        }), children);\n    }\n};\n\nvar props$39 = {\n    tag: {\n        type: String,\n        default: \"span\"\n    }\n};\n\nvar navText = {\n    functional: true,\n    props: props$39,\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(props.tag, lib_common(data, { staticClass: \"navbar-text\" }), children);\n    }\n};\n\nvar navForm = {\n    functional: true,\n    props: {\n        id: {\n            type: String,\n            default: null\n        }\n    },\n    render: function render(h, _ref) {\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(Form, lib_common(data, { attrs: { id: props.id }, props: { inline: true } }), children);\n    }\n};\n\nvar COMMON_ALIGNMENT = [\"start\", \"end\", \"center\"];\n\nvar props$40 = {\n    tag: {\n        type: String,\n        default: \"div\"\n    },\n    noGutters: {\n        type: Boolean,\n        default: false\n    },\n    alignV: {\n        type: String,\n        default: null,\n        validator: function validator(str) {\n            return arrayIncludes(COMMON_ALIGNMENT.concat([\"baseline\", \"stretch\"]), str);\n        }\n    },\n    alignH: {\n        type: String,\n        default: null,\n        validator: function validator(str) {\n            return arrayIncludes(COMMON_ALIGNMENT.concat([\"between\", \"around\"]), str);\n        }\n    },\n    alignContent: {\n        type: String,\n        default: null,\n        validator: function validator(str) {\n            return arrayIncludes(COMMON_ALIGNMENT.concat([\"between\", \"around\", \"stretch\"]), str);\n        }\n    }\n};\n\nvar row = {\n    functional: true,\n    props: props$40,\n    render: function render(h, _ref) {\n        var _class;\n\n        var props = _ref.props,\n            data = _ref.data,\n            children = _ref.children;\n\n        return h(props.tag, lib_common(data, {\n            staticClass: \"row\",\n            class: (_class = {\n                \"no-gutters\": props.noGutters\n            }, defineProperty$1(_class, \"align-items-\" + props.alignV, props.alignV), defineProperty$1(_class, \"justify-content-\" + props.alignH, props.alignH), defineProperty$1(_class, \"align-content-\" + props.alignContent, props.alignContent), _class)\n        }), children);\n    }\n};\n\nvar props$41 = {\n    perPage: {\n        type: Number,\n        default: 20\n    },\n    totalRows: {\n        type: Number,\n        default: 20\n    },\n    ariaControls: {\n        type: String,\n        default: null\n    }\n};\n\nvar pagination = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ul', { class: ['pagination', _vm.btnSize, _vm.alignment], attrs: { \"aria-disabled\": _vm.disabled ? 'true' : 'false', \"aria-label\": _vm.ariaLabel ? _vm.ariaLabel : null, \"role\": \"menubar\" }, on: { \"focusin\": function focusin($event) {\n                    if ($event.target !== $event.currentTarget) {\n                        return null;\n                    }_vm.focusCurrent($event);\n                }, \"keydown\": [function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"left\", 37)) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 0) {\n                        return null;\n                    }$event.preventDefault();_vm.focusPrev($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"right\", 39)) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 2) {\n                        return null;\n                    }$event.preventDefault();_vm.focusNext($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"left\", 37)) {\n                        return null;\n                    }if (!$event.shiftKey) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 0) {\n                        return null;\n                    }$event.preventDefault();_vm.focusFirst($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"right\", 39)) {\n                        return null;\n                    }if (!$event.shiftKey) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 2) {\n                        return null;\n                    }$event.preventDefault();_vm.focusLast($event);\n                }] } }, [!_vm.hideGotoEndButtons ? [_vm.isActive(1) || _vm.disabled ? _c('li', { staticClass: \"page-item disabled\", attrs: { \"role\": \"none presentation\", \"aria-hidden\": \"true\" } }, [_c('span', { staticClass: \"page-link\", domProps: { \"innerHTML\": _vm._s(_vm.firstText) } })]) : _c('li', { staticClass: \"page-item\", attrs: { \"role\": \"none presentation\" } }, [_c('a', { staticClass: \"page-link\", attrs: { \"aria-label\": _vm.labelFirstPage, \"aria-controls\": _vm.ariaControls || null, \"role\": \"menuitem\", \"href\": \"#\", \"tabindex\": \"-1\" }, on: { \"click\": function click($event) {\n                    $event.preventDefault();_vm.setPage($event, 1);\n                }, \"keydown\": [function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13)) {\n                        return null;\n                    }$event.preventDefault();_vm.setPage($event, 1);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"space\", 32)) {\n                        return null;\n                    }$event.preventDefault();_vm.setPage($event, 1);\n                }] } }, [_c('span', { attrs: { \"aria-hidden\": \"true\" }, domProps: { \"innerHTML\": _vm._s(_vm.firstText) } })])])] : _vm._e(), _vm.isActive(1) || _vm.disabled ? _c('li', { staticClass: \"page-item disabled\", attrs: { \"role\": \"none presentation\", \"aria-hidden\": \"true\" } }, [_c('span', { staticClass: \"page-link\", domProps: { \"innerHTML\": _vm._s(_vm.prevText) } })]) : _c('li', { staticClass: \"page-item\", attrs: { \"role\": \"none presentation\" } }, [_c('a', { staticClass: \"page-link\", attrs: { \"aria-label\": _vm.labelPrevPage, \"aria-controls\": _vm.ariaControls || null, \"role\": \"menuitem\", \"href\": \"#\", \"tabindex\": \"-1\" }, on: { \"click\": function click($event) {\n                    $event.preventDefault();_vm.setPage($event, _vm.currentPage - 1);\n                }, \"keydown\": [function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13)) {\n                        return null;\n                    }$event.preventDefault();_vm.setPage($event, _vm.currentPage - 1);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"space\", 32)) {\n                        return null;\n                    }$event.preventDefault();_vm.setPage($event, _vm.currentPage - 1);\n                }] } }, [_c('span', { attrs: { \"aria-hidden\": \"true\" }, domProps: { \"innerHTML\": _vm._s(_vm.prevText) } })])]), _vm.showFirstDots ? _c('li', { staticClass: \"page-item disabled d-none d-sm-flex\", attrs: { \"role\": \"separator\" } }, [_c('span', { staticClass: \"page-link\", domProps: { \"innerHTML\": _vm._s(_vm.ellipsisText) } })]) : _vm._e(), _vm._l(_vm.pageList, function (page) {\n            return _c('li', { key: page.number, class: _vm.pageItemClasses(page), attrs: { \"role\": \"none presentation\" } }, [_c('a', { class: _vm.pageLinkClasses(page), attrs: { \"disabled\": _vm.disabled, \"aria-disabled\": _vm.disabled ? 'true' : null, \"aria-label\": _vm.labelPage + ' ' + page.number, \"aria-checked\": _vm.isActive(page.number) ? 'true' : 'false', \"aria-controls\": _vm.ariaControls || null, \"aria-posinset\": page.number, \"aria-setsize\": _vm.numberOfPages, \"role\": \"menuitemradio\", \"href\": \"#\", \"tabindex\": \"-1\" }, on: { \"click\": function click($event) {\n                        $event.preventDefault();_vm.setPage($event, page.number);\n                    }, \"keydown\": [function ($event) {\n                        if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13)) {\n                            return null;\n                        }$event.preventDefault();_vm.setPage($event, page.number);\n                    }, function ($event) {\n                        if (!('button' in $event) && _vm._k($event.keyCode, \"space\", 32)) {\n                            return null;\n                        }$event.preventDefault();_vm.setPage($event, page.number);\n                    }] } }, [_vm._v(_vm._s(page.number))])]);\n        }), _vm.showLastDots ? _c('li', { staticClass: \"page-item disabled d-none d-sm-flex\", attrs: { \"role\": \"separator\" } }, [_c('span', { staticClass: \"page-link\", domProps: { \"innerHTML\": _vm._s(_vm.ellipsisText) } })]) : _vm._e(), _vm.isActive(_vm.numberOfPages) || _vm.disabled ? _c('li', { staticClass: \"page-item disabled\", attrs: { \"role\": \"none presentation\", \"aria-hidden\": \"true\" } }, [_c('span', { staticClass: \"page-link\", domProps: { \"innerHTML\": _vm._s(_vm.nextText) } })]) : _c('li', { staticClass: \"page-item\", attrs: { \"role\": \"none presentation\" } }, [_c('a', { staticClass: \"page-link\", attrs: { \"aria-label\": _vm.labelNextPage, \"aria-controls\": _vm.ariaControls || null, \"role\": \"menuitem\", \"href\": \"#\", \"tabindex\": \"-1\" }, on: { \"click\": function click($event) {\n                    $event.preventDefault();_vm.setPage($event, _vm.currentPage + 1);\n                }, \"keydown\": [function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13)) {\n                        return null;\n                    }$event.preventDefault();_vm.setPage($event, _vm.currentPage + 1);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"space\", 32)) {\n                        return null;\n                    }$event.preventDefault();_vm.setPage($event, _vm.currentPage + 1);\n                }] } }, [_c('span', { attrs: { \"aria-hidden\": \"true\" }, domProps: { \"innerHTML\": _vm._s(_vm.nextText) } })])]), !_vm.hideGotoEndButtons ? [_vm.isActive(_vm.numberOfPages) || _vm.disabled ? _c('li', { staticClass: \"page-item disabled\", attrs: { \"role\": \"none presentation\", \"aria-hidden\": \"true\" } }, [_c('span', { staticClass: \"page-link\", domProps: { \"innerHTML\": _vm._s(_vm.lastText) } })]) : _c('li', { staticClass: \"page-item\", attrs: { \"role\": \"none presentation\" } }, [_c('a', { staticClass: \"page-link\", attrs: { \"aria-label\": _vm.labelLastPage, \"aria-controls\": _vm.ariaControls || null, \"role\": \"menuitem\", \"href\": \"#\", \"tabindex\": \"-1\" }, on: { \"click\": function click($event) {\n                    $event.preventDefault();_vm.setPage($event, _vm.numberOfPages);\n                }, \"keydown\": [function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13)) {\n                        return null;\n                    }$event.preventDefault();_vm.setPage($event, _vm.numberOfPages);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"space\", 32)) {\n                        return null;\n                    }$event.preventDefault();_vm.setPage($event, _vm.numberOfPages);\n                }] } }, [_c('span', { attrs: { \"aria-hidden\": \"true\" }, domProps: { \"innerHTML\": _vm._s(_vm.lastText) } })])])] : _vm._e()], 2);\n    }, staticRenderFns: [], _scopeId: 'data-v-2792960b',\n    mixins: [paginationMixin],\n    props: props$41,\n    computed: {\n        numberOfPages: function numberOfPages() {\n            var result = Math.ceil(this.totalRows / this.perPage);\n            return result < 1 ? 1 : result;\n        }\n    },\n    methods: {\n        setPage: function setPage(e, num) {\n            var _this = this;\n\n            if (this.disabled) {\n                e.preventDefault();\n                e.stopPropagation();\n                return;\n            }\n            if (num > this.numberOfPages) {\n                this.currentPage = this.numberOfPages;\n            } else if (num < 1) {\n                this.currentpage = 1;\n            } else {\n                this.currentPage = num;\n            }\n            this.$nextTick(function () {\n                // Keep the current button focused if possible\n                if (isVisible(e.target) && e.target.focus) {\n                    e.target.focus();\n                } else {\n                    _this.focusCurrent();\n                }\n            });\n            this.$emit('change', this.currentPage);\n        }\n    }\n};\n\n// Props needed for router links\nvar routerProps = pickLinkProps('activeClass', 'exactActiveClass', 'append', 'exact', 'replace', 'target', 'rel');\n\n// Props object\nvar props$42 = assign(\n// pagination-nav specific props\n{\n    numberOfPages: {\n        type: Number,\n        default: 1\n    },\n    baseUrl: {\n        type: String,\n        default: '/'\n    },\n    useRouter: {\n        type: Boolean,\n        default: false\n    },\n    linkGen: {\n        type: Function,\n        default: null\n    },\n    pageGen: {\n        type: Function,\n        default: null\n    }\n},\n// Router specific props\nrouterProps);\n\nvar paginationNav = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('nav', [_c('ul', { class: ['pagination', _vm.btnSize, _vm.alignment], attrs: { \"aria-disabled\": _vm.disabled ? 'true' : 'false', \"aria-label\": _vm.ariaLabel ? _vm.ariaLabel : null, \"role\": \"menubar\" }, on: { \"focusin\": function focusin($event) {\n                    if ($event.target !== $event.currentTarget) {\n                        return null;\n                    }_vm.focusCurrent($event);\n                }, \"keydown\": [function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"left\", 37)) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 0) {\n                        return null;\n                    }$event.preventDefault();_vm.focusPrev($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"right\", 39)) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 2) {\n                        return null;\n                    }$event.preventDefault();_vm.focusNext($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"left\", 37)) {\n                        return null;\n                    }if (!$event.shiftKey) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 0) {\n                        return null;\n                    }$event.preventDefault();_vm.focusFirst($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"right\", 39)) {\n                        return null;\n                    }if (!$event.shiftKey) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 2) {\n                        return null;\n                    }$event.preventDefault();_vm.focusLast($event);\n                }] } }, [!_vm.hideGotoEndButtons ? [_vm.isActive(1) || _vm.disabled ? _c('li', { staticClass: \"page-item disabled\", attrs: { \"role\": \"none presentation\", \"aria-hidden\": \"true\" } }, [_c('span', { staticClass: \"page-link\", domProps: { \"innerHTML\": _vm._s(_vm.firstText) } })]) : _c('li', { staticClass: \"page-item\", attrs: { \"role\": \"none presentation\" } }, [_c('b-link', _vm._b({ staticClass: \"page-link\", attrs: { \"aria-label\": _vm.labelFirstPage, \"role\": \"menuitem\", \"tabindex\": \"-1\" }, on: { \"click\": function click($event) {\n                    _vm.onClick(1);\n                } } }, 'b-link', _vm.linkProps(1), false), [_c('span', { attrs: { \"aria-hidden\": \"true\" }, domProps: { \"innerHTML\": _vm._s(_vm.firstText) } })])], 1)] : _vm._e(), _vm.isActive(1) || _vm.disabled ? _c('li', { staticClass: \"page-item disabled\", attrs: { \"role\": \"none presentation\", \"aria-hidden\": \"true\" } }, [_c('span', { staticClass: \"page-link\", domProps: { \"innerHTML\": _vm._s(_vm.prevText) } })]) : _c('li', { staticClass: \"page-item\", attrs: { \"role\": \"none presentation\" } }, [_c('b-link', _vm._b({ staticClass: \"page-link\", attrs: { \"aria-label\": _vm.labelPrevPage, \"role\": \"menuitem\", \"tabindex\": \"-1\" }, on: { \"click\": function click($event) {\n                    _vm.onClick(_vm.currentPage - 1);\n                } } }, 'b-link', _vm.linkProps(_vm.currentPage - 1), false), [_c('span', { attrs: { \"aria-hidden\": \"true\" }, domProps: { \"innerHTML\": _vm._s(_vm.prevText) } })])], 1), _vm.showFirstDots ? _c('li', { staticClass: \"page-item disabled d-none d-sm-flex\", attrs: { \"role\": \"separator\" } }, [_c('span', { staticClass: \"page-link\", domProps: { \"innerHTML\": _vm._s(_vm.ellipsisText) } })]) : _vm._e(), _vm._l(_vm.pageList, function (page) {\n            return _c('li', { key: page.number, class: _vm.pageItemClasses(page), attrs: { \"role\": \"none presentation\" } }, [_vm.disabled ? _c('span', { staticClass: \"page-link\" }, [_vm._v(_vm._s(page.number))]) : _c('b-link', _vm._b({ class: _vm.pageLinkClasses(page), attrs: { \"disabled\": _vm.disabled, \"aria-disabled\": _vm.disabled ? 'true' : null, \"aria-label\": _vm.labelPage + ' ' + page.number, \"aria-checked\": _vm.isActive(page.number) ? 'true' : 'false', \"aria-posinset\": page.number, \"aria-setsize\": _vm.numberOfPages, \"role\": \"menuitemradio\", \"tabindex\": \"-1\" }, domProps: { \"innerHTML\": _vm._s(_vm.makePage(page.number)) }, on: { \"click\": function click($event) {\n                        _vm.onClick(page.number);\n                    } } }, 'b-link', _vm.linkProps(page.number), false))], 1);\n        }), _vm.showLastDots ? _c('li', { staticClass: \"page-item disabled d-none d-sm-flex\", attrs: { \"role\": \"separator\" } }, [_c('span', { staticClass: \"page-link\", domProps: { \"innerHTML\": _vm._s(_vm.ellipsisText) } })]) : _vm._e(), _vm.isActive(_vm.numberOfPages) || _vm.disabled ? _c('li', { staticClass: \"page-item disabled\", attrs: { \"role\": \"none presentation\", \"aria-hidden\": \"true\" } }, [_c('span', { staticClass: \"page-link\", domProps: { \"innerHTML\": _vm._s(_vm.nextText) } })]) : _c('li', { staticClass: \"page-item\", attrs: { \"role\": \"none presentation\" } }, [_c('b-link', _vm._b({ staticClass: \"page-link\", attrs: { \"aria-label\": _vm.labelNextPage, \"role\": \"menuitem\", \"tabindex\": \"-1\" }, on: { \"click\": function click($event) {\n                    _vm.onClick(_vm.currentPage + 1);\n                } } }, 'b-link', _vm.linkProps(_vm.currentPage + 1), false), [_c('span', { attrs: { \"aria-hidden\": \"true\" }, domProps: { \"innerHTML\": _vm._s(_vm.nextText) } })])], 1), !_vm.hideGotoEndButtons ? [_vm.isActive(_vm.numberOfPages) || _vm.disabled ? _c('li', { staticClass: \"page-item disabled\", attrs: { \"role\": \"none presentation\", \"aria-hidden\": \"true\" } }, [_c('span', { staticClass: \"page-link\", domProps: { \"innerHTML\": _vm._s(_vm.lastText) } })]) : _c('li', { staticClass: \"page-item\", attrs: { \"role\": \"none presentation\" } }, [_c('b-link', _vm._b({ staticClass: \"page-link\", attrs: { \"aria-label\": _vm.labelLastPage, \"role\": \"menuitem\" }, on: { \"click\": function click($event) {\n                    _vm.onClick(_vm.numberOfPages);\n                } } }, 'b-link', _vm.linkProps(_vm.numberOfPages), false), [_c('span', { attrs: { \"aria-hidden\": \"true\" }, domProps: { \"innerHTML\": _vm._s(_vm.lastText) } })])], 1)] : _vm._e()], 2)]);\n    }, staticRenderFns: [], _scopeId: 'data-v-20c4e761',\n    components: { bLink: bLink },\n    mixins: [paginationMixin],\n    props: props$42,\n    methods: {\n        onClick: function onClick(pageNum) {\n            this.currentPage = pageNum;\n        },\n        makeLink: function makeLink(pagenum) {\n            if (this.linkGen && typeof this.linkGen === 'function') {\n                return this.linkGen(pagenum);\n            }\n            var link = '' + this.baseUrl + pagenum;\n            return this.useRouter ? { path: link } : link;\n        },\n        makePage: function makePage(pagenum) {\n            if (this.pageGen && typeof this.pageGen === 'function') {\n                return this.pageGen(pagenum);\n            }\n            return pagenum;\n        },\n        linkProps: function linkProps(pagenum) {\n            var link = this.makeLink(pagenum);\n            var props = {\n                href: typeof link === 'string' ? link : void 0,\n                target: this.target || null,\n                rel: this.rel || null,\n                disabled: this.disabled\n            };\n            if (this.useRouter || (typeof link === 'undefined' ? 'undefined' : _typeof(link)) === 'object') {\n                props = assign(props, {\n                    to: link,\n                    exact: this.exact,\n                    activeClass: this.activeClass,\n                    exactActiveClass: this.exactActiveClass,\n                    append: this.append,\n                    replace: this.replace\n                });\n            }\n            return props;\n        }\n    }\n};\n\nvar popover = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { directives: [{ name: \"show\", rawName: \"v-show\", value: false, expression: \"false\" }], staticClass: \"d-none\", attrs: { \"aria-hidden\": \"true\" } }, [_c('div', { ref: \"title\" }, [_vm._t(\"title\")], 2), _c('div', { ref: \"content\" }, [_vm._t(\"default\")], 2)]);\n    }, staticRenderFns: [],\n    mixins: [toolpopMixin],\n    data: function data() {\n        return {};\n    },\n\n    props: {\n        title: {\n            type: String,\n            default: ''\n        },\n        content: {\n            type: String,\n            default: ''\n        },\n        triggers: {\n            type: [String, Array],\n            default: 'click'\n        },\n        placement: {\n            type: String,\n            default: 'right'\n        }\n    },\n    methods: {\n        createToolpop: function createToolpop() {\n            // getTarget is in toolpop mixin\n            var target = this.getTarget();\n            if (target) {\n                this._toolpop = new PopOver(target, this.getConfig(), this.$root);\n            } else {\n                this._toolpop = null;\n                warn(\"b-popover: 'target' element not found!\");\n            }\n            return this._toolpop;\n        }\n    }\n};\n\nvar bProgressBar = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: _vm.progressBarClasses, style: _vm.progressBarStyles, attrs: { \"role\": \"progressbar\", \"aria-valuenow\": _vm.value.toFixed(_vm.computedPrecision), \"aria-valuemin\": \"0\", \"aria-valuemax\": _vm.computedMax } }, [_vm._t(\"default\", [_vm.label ? _c('span', { domProps: { \"innerHTML\": _vm._s(_vm.label) } }) : _vm.computedShowProgress ? [_vm._v(_vm._s(_vm.progress.toFixed(_vm.computedPrecision)) + \"%\")] : _vm.computedShowValue ? [_vm._v(_vm._s(_vm.value.toFixed(_vm.computedPrecision)))] : _vm._e()])], 2);\n    }, staticRenderFns: [],\n    computed: {\n        progressBarClasses: function progressBarClasses() {\n            return ['progress-bar', this.computedVariant ? \"bg-\" + this.computedVariant : '', this.computedStriped || this.computedAnimated ? 'progress-bar-striped' : '', this.computedAnimated ? 'progress-bar-animated' : ''];\n        },\n        progressBarStyles: function progressBarStyles() {\n            return {\n                width: 100 * (this.value / this.computedMax) + '%',\n                height: this.computedHeight,\n                lineHeight: this.computedHeight\n            };\n        },\n        progress: function progress() {\n            var p = Math.pow(10, this.computedPrecision);\n            return Math.round(100 * p * this.value / this.computedMax) / p;\n        },\n        computedMax: function computedMax() {\n            // Prefer our max over parent setting\n            return typeof this.max === 'number' ? this.max : this.$parent.max || 100;\n        },\n        computedHeight: function computedHeight() {\n            // Prefer parent height over our height\n            return this.$parent.height || this.height || '1rem';\n        },\n        computedVariant: function computedVariant() {\n            // Prefer our variant over parent setting\n            return this.variant || this.$parent.variant;\n        },\n        computedPrecision: function computedPrecision() {\n            // Prefer our precision over parent setting\n            return typeof this.precision === 'number' ? this.precision : this.$parent.precision || 0;\n        },\n        computedStriped: function computedStriped() {\n            // Prefer our striped over parent setting\n            return typeof this.striped === 'boolean' ? this.striped : this.$parent.striped || false;\n        },\n        computedAnimated: function computedAnimated() {\n            // Prefer our animated over parent setting\n            return typeof this.animated === 'boolean' ? this.animated : this.$parent.animated || false;\n        },\n        computedShowProgress: function computedShowProgress() {\n            // Prefer our showProgress over parent setting\n            return typeof this.showProgress === 'boolean' ? this.showProgress : this.$parent.showProgress || false;\n        },\n        computedShowValue: function computedShowValue() {\n            // Prefer our showValue over parent setting\n            return typeof this.showValue === 'boolean' ? this.showValue : this.$parent.showValue || false;\n        }\n    },\n    props: {\n        value: {\n            type: Number,\n            default: 0\n        },\n        label: {\n            type: String,\n            value: null\n        },\n        // $parent prop values take precedence over the following props\n        // Which is why they are defaulted to null\n        max: {\n            type: Number,\n            default: null\n        },\n        precision: {\n            type: Number,\n            default: null\n        },\n        variant: {\n            type: String,\n            default: null\n        },\n        striped: {\n            type: Boolean,\n            default: null\n        },\n        animated: {\n            type: Boolean,\n            default: null\n        },\n        showProgress: {\n            type: Boolean,\n            default: null\n        },\n        showValue: {\n            type: Boolean,\n            default: null\n        },\n        height: {\n            type: String,\n            default: null\n        }\n    }\n};\n\nvar progress = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: \"progress\" }, [_vm._t(\"default\", [_c('b-progress-bar', { attrs: { \"value\": _vm.value, \"max\": _vm.max, \"precision\": _vm.precision, \"variant\": _vm.variant, \"animated\": _vm.animated, \"striped\": _vm.striped, \"show-progress\": _vm.showProgress, \"show-value\": _vm.showValue, \"height\": _vm.height } })])], 2);\n    }, staticRenderFns: [],\n    components: { bProgressBar: bProgressBar },\n    props: {\n        // These props can be inherited via the child b-progress-bar(s)\n        variant: {\n            type: String,\n            default: null\n        },\n        striped: {\n            type: Boolean,\n            default: false\n        },\n        animated: {\n            type: Boolean,\n            default: false\n        },\n        height: {\n            type: String,\n            default: '1rem'\n        },\n        precision: {\n            type: Number,\n            default: 0\n        },\n        showProgress: {\n            type: Boolean,\n            default: false\n        },\n        showValue: {\n            type: Boolean,\n            default: false\n        },\n        max: {\n            type: Number,\n            default: 100\n        },\n        // This prop is not inherited by child b-progress-bar(s)\n        value: {\n            type: Number,\n            default: 0\n        }\n    }\n};\n\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/** Used to match Latin Unicode letters (excluding mathematical operators). */\nvar reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff';\nvar rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23';\nvar rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0';\nvar rsDingbatRange = '\\\\u2700-\\\\u27bf';\nvar rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff';\nvar rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7';\nvar rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf';\nvar rsPunctuationRange = '\\\\u2000-\\\\u206f';\nvar rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000';\nvar rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde';\nvar rsVarRange = '\\\\ufe0e\\\\ufe0f';\nvar rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\";\nvar rsAstral = '[' + rsAstralRange + ']';\nvar rsBreak = '[' + rsBreakRange + ']';\nvar rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']';\nvar rsDigits = '\\\\d+';\nvar rsDingbat = '[' + rsDingbatRange + ']';\nvar rsLower = '[' + rsLowerRange + ']';\nvar rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']';\nvar rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]';\nvar rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';\nvar rsNonAstral = '[^' + rsAstralRange + ']';\nvar rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\nvar rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\nvar rsUpper = '[' + rsUpperRange + ']';\nvar rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')';\nvar rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')';\nvar rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?';\nvar rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?';\nvar reOptMod = rsModifier + '?';\nvar rsOptVar = '[' + rsVarRange + ']?';\nvar rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';\nvar rsSeq = rsOptVar + reOptMod + rsOptJoin;\nvar rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\nvar rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n */\nvar reComboMark = RegExp(rsCombo, 'g');\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')', rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr, rsUpper + '+' + rsOptUpperContr, rsDigits, rsEmoji].join('|'), 'g');\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n\n/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/** Used to map Latin Unicode letters to basic Latin letters. */\nvar deburredLetters = {\n  // Latin-1 Supplement block.\n  '\\xc0': 'A', '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n  '\\xe0': 'a', '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n  '\\xc7': 'C', '\\xe7': 'c',\n  '\\xd0': 'D', '\\xf0': 'd',\n  '\\xc8': 'E', '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n  '\\xe8': 'e', '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n  '\\xcc': 'I', '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n  '\\xec': 'i', '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n  '\\xd1': 'N', '\\xf1': 'n',\n  '\\xd2': 'O', '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n  '\\xf2': 'o', '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n  '\\xd9': 'U', '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n  '\\xf9': 'u', '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n  '\\xdd': 'Y', '\\xfd': 'y', '\\xff': 'y',\n  '\\xc6': 'Ae', '\\xe6': 'ae',\n  '\\xde': 'Th', '\\xfe': 'th',\n  '\\xdf': 'ss',\n  // Latin Extended-A block.\n  '\\u0100': 'A', '\\u0102': 'A', '\\u0104': 'A',\n  '\\u0101': 'a', '\\u0103': 'a', '\\u0105': 'a',\n  '\\u0106': 'C', '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n  '\\u0107': 'c', '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n  '\\u010e': 'D', '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n  '\\u0112': 'E', '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n  '\\u0113': 'e', '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n  '\\u011c': 'G', '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n  '\\u011d': 'g', '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n  '\\u0124': 'H', '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n  '\\u0128': 'I', '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n  '\\u0129': 'i', '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n  '\\u0134': 'J', '\\u0135': 'j',\n  '\\u0136': 'K', '\\u0137': 'k', '\\u0138': 'k',\n  '\\u0139': 'L', '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n  '\\u013a': 'l', '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n  '\\u0143': 'N', '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n  '\\u0144': 'n', '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n  '\\u014c': 'O', '\\u014e': 'O', '\\u0150': 'O',\n  '\\u014d': 'o', '\\u014f': 'o', '\\u0151': 'o',\n  '\\u0154': 'R', '\\u0156': 'R', '\\u0158': 'R',\n  '\\u0155': 'r', '\\u0157': 'r', '\\u0159': 'r',\n  '\\u015a': 'S', '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n  '\\u015b': 's', '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n  '\\u0162': 'T', '\\u0164': 'T', '\\u0166': 'T',\n  '\\u0163': 't', '\\u0165': 't', '\\u0167': 't',\n  '\\u0168': 'U', '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n  '\\u0169': 'u', '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n  '\\u0174': 'W', '\\u0175': 'w',\n  '\\u0176': 'Y', '\\u0177': 'y', '\\u0178': 'Y',\n  '\\u0179': 'Z', '\\u017b': 'Z', '\\u017d': 'Z',\n  '\\u017a': 'z', '\\u017c': 'z', '\\u017e': 'z',\n  '\\u0132': 'IJ', '\\u0133': 'ij',\n  '\\u0152': 'Oe', '\\u0153': 'oe',\n  '\\u0149': \"'n\", '\\u017f': 'ss'\n};\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function (key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n * letters to basic Latin letters.\n *\n * @private\n * @param {string} letter The matched letter to deburr.\n * @returns {string} Returns the deburred letter.\n */\nvar deburrLetter = basePropertyOf(deburredLetters);\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);\n}\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol$1 = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;\nvar symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : end - start >>> 0;\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return !start && end >= length ? array : baseSlice(array, start, end);\n}\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function (string) {\n    string = toString$1(string);\n\n    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;\n\n    var chr = strSymbols ? strSymbols[0] : string.charAt(0);\n\n    var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function (string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString$1(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Deburrs `string` by converting\n * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n * letters to basic Latin letters and removing\n * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to deburr.\n * @returns {string} Returns the deburred string.\n * @example\n *\n * _.deburr('déjà vu');\n * // => 'deja vu'\n */\nfunction deburr(string) {\n  string = toString$1(string);\n  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n}\n\n/**\n * Converts `string` to\n * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n *\n * @static\n * @memberOf _\n * @since 3.1.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the start cased string.\n * @example\n *\n * _.startCase('--foo-bar--');\n * // => 'Foo Bar'\n *\n * _.startCase('fooBar');\n * // => 'Foo Bar'\n *\n * _.startCase('__FOO_BAR__');\n * // => 'FOO BAR'\n */\nvar startCase = createCompounder(function (result, word, index) {\n  return result + (index ? ' ' : '') + upperFirst$1(word);\n});\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst$1 = createCaseFirst('toUpperCase');\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString$1(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nvar lodash_startcase = startCase;\n\nfunction toString(v) {\n    if (!v) {\n        return '';\n    }\n    if (v instanceof Object) {\n        return keys(v).map(function (k) {\n            return toString(v[k]);\n        }).join(' ');\n    }\n    return String(v);\n}\n\nfunction recToString(obj) {\n    if (!(obj instanceof Object)) {\n        return '';\n    }\n\n    return toString(keys(obj).reduce(function (o, k) {\n        // Ignore fields that start with _\n        if (!/^_/.test(k)) {\n            o[k] = obj[k];\n        }\n        return o;\n    }, {}));\n}\n\nfunction defaultSortCompare(a, b, sortBy) {\n    if (typeof a[sortBy] === 'number' && typeof b[sortBy] === 'number') {\n        return a[sortBy] < b[sortBy] && -1 || a[sortBy] > b[sortBy] && 1 || 0;\n    }\n    return toString(a[sortBy]).localeCompare(toString(b[sortBy]), undefined, {\n        numeric: true\n    });\n}\n\nfunction processField(key, value) {\n    var field = null;\n    if (typeof value === 'string') {\n        // Label shortcut\n        field = { key: key, label: lodash_startcase(value) };\n    } else if (typeof value === 'function') {\n        // Formatter shortcut\n        field = { key: key, formatter: value };\n    } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n        field = assign({}, value);\n        field.key = field.key || key;\n    } else if (value !== false) {\n        // Fallback to just key\n        field = { key: key };\n    }\n    return field;\n}\n\nvar table = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('table', { class: _vm.tableClasses, attrs: { \"id\": _vm.id || null, \"aria-busy\": _vm.computedBusy ? 'true' : 'false' } }, [_c('thead', { class: _vm.headClasses }, [_c('tr', _vm._l(_vm.computedFields, function (field) {\n            return _c('th', { key: field.key, class: _vm.fieldClasses(field), style: field.thStyle || {}, attrs: { \"aria-label\": field.sortable ? _vm.localSortDesc && _vm.localSortBy === field.key ? _vm.labelSortAsc : _vm.labelSortDesc : null, \"aria-sort\": field.sortable && _vm.localSortBy === field.key ? _vm.localSortDesc ? 'descending' : 'ascending' : null, \"tabindex\": field.sortable ? '0' : null }, on: { \"click\": function click($event) {\n                        $event.stopPropagation();$event.preventDefault();_vm.headClicked($event, field);\n                    }, \"keydown\": [function ($event) {\n                        if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13)) {\n                            return null;\n                        }$event.stopPropagation();$event.preventDefault();_vm.headClicked($event, field);\n                    }, function ($event) {\n                        if (!('button' in $event) && _vm._k($event.keyCode, \"space\", 32)) {\n                            return null;\n                        }$event.stopPropagation();$event.preventDefault();_vm.headClicked($event, field);\n                    }] } }, [_vm._t('HEAD_' + field.key, [_c('div', { domProps: { \"innerHTML\": _vm._s(field.label) } })], { label: field.label, column: field.key, field: field })], 2);\n        }))]), _vm.footClone ? _c('tfoot', { class: _vm.footClasses }, [_c('tr', _vm._l(_vm.computedFields, function (field) {\n            return _c('th', { key: field.key, class: _vm.fieldClasses(field), style: field.thStyle || {}, attrs: { \"aria-label\": field.sortable ? _vm.localSortDesc && _vm.localSortBy === field.key ? _vm.labelSortAsc : _vm.labelSortDesc : null, \"aria-sort\": field.sortable && _vm.localSortBy === field.key ? _vm.localSortDesc ? 'descending' : 'ascending' : null, \"tabindex\": field.sortable ? '0' : null }, on: { \"click\": function click($event) {\n                        $event.stopPropagation();$event.preventDefault();_vm.headClicked($event, field);\n                    }, \"keydown\": [function ($event) {\n                        if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13)) {\n                            return null;\n                        }$event.stopPropagation();$event.preventDefault();_vm.headClicked($event, field);\n                    }, function ($event) {\n                        if (!('button' in $event) && _vm._k($event.keyCode, \"space\", 32)) {\n                            return null;\n                        }$event.stopPropagation();$event.preventDefault();_vm.headClicked($event, field);\n                    }] } }, [_vm.$scopedSlots['FOOT_' + field.key] ? _vm._t('FOOT_' + field.key, [_c('div', { domProps: { \"innerHTML\": _vm._s(field.label) } })], { label: field.label, column: field.key, field: field }) : _vm._t('HEAD_' + field.key, [_c('div', { domProps: { \"innerHTML\": _vm._s(field.label) } })], { label: field.label, column: field.key, field: field })], 2);\n        }))]) : _vm._e(), _c('tbody', [_vm.$scopedSlots['top-row'] ? _c('tr', [_vm._t(\"top-row\", null, { columns: _vm.computedFields.length, fields: _vm.computedFields })], 2) : _vm._e(), _vm._l(_vm.computedItems, function (item, index) {\n            return _c('tr', { key: index, class: _vm.rowClasses(item), on: { \"click\": function click($event) {\n                        _vm.rowClicked($event, item, index);\n                    }, \"dblclick\": function dblclick($event) {\n                        _vm.rowDblClicked($event, item, index);\n                    }, \"mouseenter\": function mouseenter($event) {\n                        _vm.rowHovered($event, item, index);\n                    } } }, [_vm._l(_vm.computedFields, function (field) {\n                return [_vm.$scopedSlots[field.key] ? _c('td', { key: field.key, class: _vm.tdClasses(field, item) }, [_vm._t(field.key, null, { value: _vm.getFormattedValue(item, field), unformatted: item[field.key], item: item, index: index })], 2) : _c('td', { key: field.key, class: _vm.tdClasses(field, item), domProps: { \"innerHTML\": _vm._s(_vm.getFormattedValue(item, field)) } })];\n            })], 2);\n        }), _vm.showEmpty && (!_vm.computedItems || _vm.computedItems.length === 0) ? _c('tr', [_c('td', { attrs: { \"colspan\": _vm.computedFields.length } }, [_vm.filter ? _c('div', { attrs: { \"role\": \"alert\", \"aria-live\": \"polite\" } }, [_vm._t(\"emptyfiltered\", [_c('div', { staticClass: \"text-center my-2\", domProps: { \"innerHTML\": _vm._s(_vm.emptyFilteredText) } })])], 2) : _c('div', { attrs: { \"role\": \"alert\", \"aria-live\": \"polite\" } }, [_vm._t(\"empty\", [_c('div', { staticClass: \"text-center my-2\", domProps: { \"innerHTML\": _vm._s(_vm.emptyText) } })])], 2)])]) : _vm._e(), _vm.$scopedSlots['bottom-row'] ? _c('tr', [_vm._t(\"bottom-row\", null, { columns: _vm.computedfields.length, fields: _vm.computedFields })], 2) : _vm._e()], 2)]);\n    }, staticRenderFns: [],\n    mixins: [listenOnRootMixin],\n    data: function data() {\n        return {\n            localSortBy: this.sortBy || '',\n            localSortDesc: this.sortDesc || false,\n            localItems: [],\n            // Note: filteredItems only used to determine if # of items changed\n            filteredItems: [],\n            localBusy: this.busy\n        };\n    },\n\n    props: {\n        id: {\n            type: String,\n            default: ''\n        },\n        items: {\n            type: [Array, Function],\n            default: function _default() {\n                return [];\n            }\n        },\n        sortBy: {\n            type: String,\n            default: null\n        },\n        sortDesc: {\n            type: Boolean,\n            default: false\n        },\n        apiUrl: {\n            type: String,\n            default: ''\n        },\n        fields: {\n            type: [Object, Array],\n            default: null\n        },\n        striped: {\n            type: Boolean,\n            default: false\n        },\n        bordered: {\n            type: Boolean,\n            default: false\n        },\n        inverse: {\n            type: Boolean,\n            default: false\n        },\n        hover: {\n            type: Boolean,\n            default: false\n        },\n        small: {\n            type: Boolean,\n            default: false\n        },\n        responsive: {\n            type: Boolean,\n            default: false\n        },\n        fixed: {\n            type: Boolean,\n            default: false\n        },\n        headVariant: {\n            type: String,\n            default: ''\n        },\n        footVariant: {\n            type: String,\n            default: ''\n        },\n        perPage: {\n            type: Number,\n            default: null\n        },\n        currentPage: {\n            type: Number,\n            default: 1\n        },\n        filter: {\n            type: [String, RegExp, Function],\n            default: null\n        },\n        sortCompare: {\n            type: Function,\n            default: null\n        },\n        noLocalSorting: {\n            type: Boolean,\n            default: false\n        },\n        noProviderPaging: {\n            type: Boolean,\n            default: false\n        },\n        noProviderSorting: {\n            type: Boolean,\n            default: false\n        },\n        noProviderFiltering: {\n            type: Boolean,\n            default: false\n        },\n        busy: {\n            type: Boolean,\n            default: false\n        },\n        value: {\n            type: Array,\n            default: function _default() {\n                return [];\n            }\n        },\n        footClone: {\n            type: Boolean,\n            default: false\n        },\n        labelSortAsc: {\n            type: String,\n            default: 'Click to sort Ascending'\n        },\n        labelSortDesc: {\n            type: String,\n            default: 'Click to sort Descending'\n        },\n        showEmpty: {\n            type: Boolean,\n            default: false\n        },\n        emptyText: {\n            type: String,\n            default: 'There are no records to show'\n        },\n        emptyFilteredText: {\n            type: String,\n            default: 'There are no records matching your request'\n        }\n    },\n    watch: {\n        items: function items(newVal, oldVal) {\n            if (oldVal !== newVal) {\n                this._providerUpdate();\n            }\n        },\n        context: function context(newVal, oldVal) {\n            if (!looseEqual(newVal, oldVal)) {\n                this.$emit('context-changed', newVal);\n            }\n        },\n        filteredItems: function filteredItems(newVal, oldVal) {\n            if (this.localFiltering && newVal.length !== oldVal.length) {\n                // Emit a filtered notification event, as number of filtered items has changed\n                this.$emit('filtered', newVal);\n            }\n        },\n        sortDesc: function sortDesc(newVal, oldVal) {\n            if (newVal === this.localSortDesc) {\n                return;\n            }\n            this.localSortDesc = newVal || false;\n        },\n        localSortDesc: function localSortDesc(newVal, oldVal) {\n            // Emit update to sort-desc.sync\n            if (newVal !== oldVal) {\n                this.$emit('update:sortDesc', newVal);\n                if (!this.noProviderSorting) {\n                    this._providerUpdate();\n                }\n            }\n        },\n        sortBy: function sortBy(newVal, oldVal) {\n            if (newVal === this.localSortBy) {\n                return;\n            }\n            this.localSortBy = newVal || null;\n        },\n        localSortBy: function localSortBy(newVal, oldVal) {\n            if (newVal !== oldVal) {\n                this.$emit('update:sortBy', newVal);\n                if (!this.noProviderSorting) {\n                    this._providerUpdate();\n                }\n            }\n        },\n        perPage: function perPage(newVal, oldVal) {\n            if (oldVal !== newVal && !this.noProviderPaging) {\n                this._providerUpdate();\n            }\n        },\n        currentPage: function currentPage(newVal, oldVal) {\n            if (oldVal !== newVal && !this.noProviderPaging) {\n                this._providerUpdate();\n            }\n        },\n        filter: function filter(newVal, oldVal) {\n            if (oldVal !== newVal && !this.noProviderFiltering) {\n                this._providerUpdate();\n            }\n        },\n        localBusy: function localBusy(newVal, oldVal) {\n            if (newVal !== oldVal) {\n                this.$emit('update:busy', newVal);\n            }\n        }\n    },\n    mounted: function mounted() {\n        var _this = this;\n\n        this.localSortBy = this.sortBy;\n        this.localSortDesc = this.sortDesc;\n        this.localBusy = this.busy;\n        if (this.hasProvider) {\n            this._providerUpdate();\n        }\n        this.listenOnRoot('bv::refresh::table', function (id) {\n            if (id === _this.id || id === _this) {\n                _this._providerUpdate();\n            }\n        });\n    },\n\n    computed: {\n        tableClasses: function tableClasses() {\n            return ['table', 'b-table', this.striped ? 'table-striped' : '', this.hover ? 'table-hover' : '', this.inverse ? 'table-inverse' : '', this.bordered ? 'table-bordered' : '', this.responsive ? 'table-responsive' : '', this.fixed ? 'table-fixed' : '', this.small ? 'table-sm' : ''];\n        },\n        headClasses: function headClasses() {\n            return this.headVariant ? 'thead-' + this.headVariant : '';\n        },\n        footClasses: function footClasses() {\n            var variant = this.footVariant || this.headVariant || null;\n            return variant ? 'thead-' + variant : '';\n        },\n        hasProvider: function hasProvider() {\n            return this.items instanceof Function;\n        },\n        localFiltering: function localFiltering() {\n            return this.hasProvider ? this.noProviderFiltering : true;\n        },\n        localSorting: function localSorting() {\n            return this.hasProvider ? this.noProviderSorting : !this.noLocalSorting;\n        },\n        localPaging: function localPaging() {\n            return this.hasProvider ? this.noProviderPaging : true;\n        },\n        context: function context() {\n            return {\n                perPage: this.perPage,\n                currentPage: this.currentPage,\n                filter: this.filter,\n                apiUrl: this.apiUrl,\n                sortBy: this.localSortBy,\n                sortDesc: this.localSortDesc\n            };\n        },\n        computedFields: function computedFields() {\n            var _this2 = this;\n\n            // We normalize fields into an array of objects\n            // [ { key:..., label:..., ...}, {...}, ..., {..}]\n            var fields = [];\n\n            if (isArray(this.fields)) {\n                // Normalize array Form\n                this.fields.filter(function (f) {\n                    return f;\n                }).forEach(function (f) {\n                    if (typeof f === 'string') {\n                        fields.push({ key: f, label: lodash_startcase(f) });\n                    } else if ((typeof f === 'undefined' ? 'undefined' : _typeof(f)) === 'object' && f.key && typeof f.key === 'string') {\n                        // Full object definition. We use assign so that we don't mutate the original\n                        fields.push(assign({}, f));\n                    } else if ((typeof f === 'undefined' ? 'undefined' : _typeof(f)) === 'object' && keys(f).length === 1) {\n                        // Shortcut object (i.e. { 'foo_bar': 'This is Foo Bar' }\n                        var key = keys(f)[0];\n                        var field = processField(key, f[key]);\n                        if (field) {\n                            fields.push(field);\n                        }\n                    }\n                });\n            } else if (this.fields && _typeof(this.fields) === 'object' && keys(this.fields).length > 0) {\n                // Normalize object Form\n                keys(this.fields).forEach(function (key) {\n                    var field = processField(key, _this2.fields[key]);\n                    if (field) {\n                        fields.push(field);\n                    }\n                });\n            }\n\n            // If no field provided, take a sample from first record (if exits)\n            if (fields.length === 0 && this.computedItems.length > 0) {\n                var sample = this.computedItems[0];\n                keys(sample).forEach(function (k) {\n                    fields.push({ key: k, label: lodash_startcase(k) });\n                });\n            }\n\n            // Ensure we have a unique array of fields and that htey have labels\n            var memo = {};\n            return fields.filter(function (f) {\n                if (!memo[f.key]) {\n                    memo[f.key] = true;\n                    f.label = f.label || lodash_startcase(f.key);\n                    return true;\n                } else {\n                    return false;\n                }\n            });\n        },\n        computedItems: function computedItems() {\n            // Grab some props/data to ensure reactivity\n            var perPage = this.perPage;\n            var currentPage = this.currentPage;\n            var filter = this.filter;\n            var sortBy = this.localSortBy;\n            var sortDesc = this.localSortDesc;\n            var sortCompare = this.sortCompare;\n            var localFiltering = this.localFiltering;\n            var localSorting = this.localSorting;\n            var localPaging = this.localPaging;\n\n            var items = this.hasProvider ? this.localItems : this.items;\n\n            if (!items) {\n                this.$nextTick(this._providerUpdate);\n                return [];\n            }\n\n            // Array copy for sorting, filtering, etc.\n            items = items.slice();\n\n            // Apply local filter\n            if (filter && localFiltering) {\n                if (filter instanceof Function) {\n                    items = items.filter(filter);\n                } else {\n                    var regex = void 0;\n                    if (filter instanceof RegExp) {\n                        regex = filter;\n                    } else {\n                        regex = new RegExp('.*' + filter + '.*', 'ig');\n                    }\n                    items = items.filter(function (item) {\n                        var test = regex.test(recToString(item));\n                        regex.lastIndex = 0;\n                        return test;\n                    });\n                }\n            }\n            if (localFiltering) {\n                // Make a local copy of filtered items to trigger filtered event\n                this.filteredItems = items.slice();\n            }\n\n            // Apply local Sort\n            if (sortBy && localSorting) {\n                items = items.sort(function sortItemsFn(a, b) {\n                    var ret = null;\n                    if (typeof sortCompare === 'function') {\n                        // Call user provided sortCompare routine\n                        ret = sortCompare(a, b, sortBy);\n                    }\n                    if (ret === null || ret === undefined) {\n                        // Fallback to defaultSortCompare if sortCompare not defined or returns null\n                        ret = defaultSortCompare(a, b, sortBy);\n                    }\n                    // Handle sorting direction\n                    return (ret || 0) * (sortDesc ? -1 : 1);\n                });\n            }\n\n            // Apply local pagination\n            if (Boolean(perPage) && localPaging) {\n                // Grab the current page of data (which may be past filtered items)\n                items = items.slice((currentPage - 1) * perPage, currentPage * perPage);\n            }\n\n            // Update the value model with the filtered/sorted/paginated data set\n            this.$emit('input', items);\n            return items;\n        },\n        computedBusy: function computedBusy() {\n            return this.busy || this.localBusy;\n        }\n    },\n    methods: {\n        keys: keys,\n        fieldClasses: function fieldClasses(field) {\n            return [field.sortable ? 'sorting' : '', field.sortable && this.localSortBy === field.key ? 'sorting_' + (this.localSortDesc ? 'desc' : 'asc') : '', field.variant ? 'table-' + field.variant : '', field.class ? field.class : '', field.thClass ? field.thClass : ''];\n        },\n        tdClasses: function tdClasses(field, item) {\n            var cellVariant = '';\n            if (item._cellVariants && item._cellVariants[field.key]) {\n                cellVariant = (this.inverse ? 'bg-' : 'table-') + item._cellVariants[field.key];\n            }\n            return [field.variant && !cellVariant ? (this.inverse ? 'bg-' : 'table-') + field.variant : '', cellVariant, field.class ? field.class : '', field.tdClass ? field.tdClass : ''];\n        },\n        rowClasses: function rowClasses(item) {\n            return [item._rowVariant ? (this.inverse ? 'bg-' : 'table-') + item._rowVariant : ''];\n        },\n        rowClicked: function rowClicked(e, item, index) {\n            if (this.stopIfBusy(e)) {\n                // If table is busy (via provider) then don't propagate\n                return;\n            }\n            this.$emit('row-clicked', item, index, e);\n        },\n        rowDblClicked: function rowDblClicked(e, item, index) {\n            if (this.stopIfBusy(e)) {\n                // If table is busy (via provider) then don't propagate\n                return;\n            }\n            this.$emit('row-dblclicked', item, index, e);\n        },\n        rowHovered: function rowHovered(e, item, index) {\n            if (this.stopIfBusy(e)) {\n                // If table is busy (via provider) then don't propagate\n                return;\n            }\n            this.$emit('row-hovered', item, index, e);\n        },\n        headClicked: function headClicked(e, field) {\n            if (this.stopIfBusy(e)) {\n                // If table is busy (via provider) then don't propagate\n                return;\n            }\n            var sortChanged = false;\n            if (field.sortable) {\n                if (field.key === this.localSortBy) {\n                    // Change sorting direction on current column\n                    this.localSortDesc = !this.localSortDesc;\n                } else {\n                    // Start sorting this column ascending\n                    this.localSortBy = field.key;\n                    this.localSortDesc = false;\n                }\n                sortChanged = true;\n            } else if (this.localSortBy) {\n                this.localSortBy = null;\n                this.localSortDesc = false;\n                sortChanged = true;\n            }\n\n            this.$emit('head-clicked', field.key, field, e);\n            if (sortChanged) {\n                // Sorting parameters changed\n                this.$emit('sort-changed', this.context);\n            }\n        },\n        stopIfBusy: function stopIfBusy(evt) {\n            if (this.computedBusy) {\n                // If table is busy (via provider) then don't propagate\n                evt.preventDefault();\n                evt.stopPropagation();\n                return true;\n            }\n            return false;\n        },\n        refresh: function refresh() {\n            // Expose refresh method\n            if (this.hasProvider) {\n                this._providerUpdate();\n            }\n        },\n        _providerSetLocal: function _providerSetLocal(items) {\n            this.localItems = items && items.length > 0 ? items.slice() : [];\n            this.localBusy = false;\n            this.$emit('refreshed');\n            this.emitOnRoot('table::refreshed', this.id);\n        },\n        _providerUpdate: function _providerUpdate() {\n            var _this3 = this;\n\n            // Refresh the provider items\n            if (this.computedBusy || !this.hasProvider) {\n                // Don't refresh remote data if we are 'busy' or if no provider\n                return;\n            }\n\n            // Set internal busy state\n            this.localBusy = true;\n\n            // Call provider function with context and optional callback\n            var data = this.items(this.context, this._providerSetLocal);\n\n            if (data) if (data.then && typeof data.then === 'function') {\n                // Provider returned Promise\n                data.then(function (items) {\n                    _this3._providerSetLocal(items);\n                });\n            } else {\n                // Provider returned Array data\n                this._providerSetLocal(data);\n            }\n        },\n        getFormattedValue: function getFormattedValue(item, field) {\n            var key = field.key;\n            var formatter = field.formatter;\n            var parent = this.$parent;\n            var value = item[key];\n            if (formatter) {\n                if (typeof formatter === 'function') {\n                    value = formatter(value, key, item);\n                } else if (typeof formatter === 'string' && typeof parent[formatter] === 'function') {\n                    value = parent[formatter](value, key, item);\n                }\n            }\n            return value;\n        }\n    }\n};\n\nvar tabs = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c(_vm.tag, { tag: \"component\", staticClass: \"tabs\", attrs: { \"id\": _vm.safeId() } }, [_vm.bottom ? _c('div', { ref: \"tabsContainer\", class: ['tab-content', { 'card-body': _vm.card }], attrs: { \"id\": _vm.safeId('_BV_tab_container_') } }, [_vm._t(\"default\"), !_vm.tabs || !_vm.tabs.length ? _vm._t(\"empty\") : _vm._e()], 2) : _vm._e(), _c('div', { class: { 'card-header': _vm.card } }, [_c('ul', { class: ['nav', 'nav-' + _vm.navStyle, _vm.card ? 'card-header-' + _vm.navStyle : null], attrs: { \"role\": \"tablist\", \"tabindex\": \"0\" }, on: { \"keydown\": [function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"left\", 37)) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 0) {\n                        return null;\n                    }_vm.previousTab($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"up\", 38)) {\n                        return null;\n                    }_vm.previousTab($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"right\", 39)) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 2) {\n                        return null;\n                    }_vm.nextTab($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"down\", 40)) {\n                        return null;\n                    }_vm.nextTab($event);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"left\", 37)) {\n                        return null;\n                    }if (!$event.shiftKey) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 0) {\n                        return null;\n                    }_vm.setTab(0, false, 1);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"up\", 38)) {\n                        return null;\n                    }if (!$event.shiftKey) {\n                        return null;\n                    }_vm.setTab(0, false, 1);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"right\", 39)) {\n                        return null;\n                    }if (!$event.shiftKey) {\n                        return null;\n                    }if ('button' in $event && $event.button !== 2) {\n                        return null;\n                    }_vm.setTab(_vm.tabs.length - 1, false, -1);\n                }, function ($event) {\n                    if (!('button' in $event) && _vm._k($event.keyCode, \"down\", 40)) {\n                        return null;\n                    }if (!$event.shiftKey) {\n                        return null;\n                    }_vm.setTab(_vm.tabs.length - 1, false, -1);\n                }] } }, [_vm._l(_vm.tabs, function (tab, index) {\n            return _c('li', { staticClass: \"nav-item\", attrs: { \"role\": \"presentation\" } }, [!tab.headHtml ? _c('a', { class: ['nav-link', { small: _vm.small, active: tab.localActive, disabled: tab.disabled }], attrs: { \"href\": tab.href, \"role\": \"tab\", \"aria-setsize\": _vm.tabs.length, \"aria-posinset\": _vm.currentTab + 1, \"aria-selected\": tab.localActive ? 'true' : 'false', \"aria-controls\": _vm.safeId('_BV_tab_container_'), \"aria-disabled\": tab.disabled, \"id\": tab.controlledBy || _vm.safeId('_BV_tab_${index+1}_'), \"tabindex\": \"-1\" }, domProps: { \"innerHTML\": _vm._s(tab.title) }, on: { \"click\": function click($event) {\n                        $event.preventDefault();$event.stopPropagation();_vm.setTab(index);\n                    }, \"keydown\": [function ($event) {\n                        if (!('button' in $event) && _vm._k($event.keyCode, \"space\", 32)) {\n                            return null;\n                        }$event.preventDefault();$event.stopPropagation();_vm.setTab(index);\n                    }, function ($event) {\n                        if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13)) {\n                            return null;\n                        }$event.preventDefault();$event.stopPropagation();_vm.setTab(index);\n                    }] } }) : _c('div', { class: ['tab-head', { small: _vm.small, active: tab.localActive, disabled: tab.disabled }], attrs: { \"role\": \"heading\", \"tabindex\": \"-1\" }, domProps: { \"innerHTML\": _vm._s(tab.headHtml) } })]);\n        }), _vm._t(\"tabs\")], 2)]), !_vm.bottom ? _c('div', { ref: \"tabsContainer\", class: ['tab-content', { 'card-body': _vm.card }], attrs: { \"id\": _vm.safeId('_BV_tab_container_') } }, [_vm._t(\"default\"), !_vm.tabs || !_vm.tabs.length ? _vm._t(\"empty\") : _vm._e()], 2) : _vm._e()]);\n    }, staticRenderFns: [],\n    mixins: [idMixin],\n    data: function data() {\n        return {\n            currentTab: this.value,\n            tabs: []\n        };\n    },\n\n    props: {\n        tag: {\n            type: String,\n            default: 'div'\n        },\n        card: {\n            type: Boolean,\n            default: false\n        },\n        small: {\n            type: Boolean,\n            default: false\n        },\n        value: {\n            type: Number,\n            default: null\n        },\n        pills: {\n            type: Boolean,\n            default: false\n        },\n        bottom: {\n            type: Boolean,\n            default: false\n        },\n        noFade: {\n            type: Boolean,\n            default: false\n        },\n        lazy: {\n            // This prop is sniffed by the tab child\n            type: Boolean,\n            default: false\n        }\n    },\n    watch: {\n        currentTab: function currentTab(val, old) {\n            if (val === old) {\n                return;\n            }\n            this.$root.$emit('changed::tab', this, val, this.tabs[val]);\n            this.$emit('input', val);\n            this.tabs[val].$emit('click');\n        },\n        value: function value(val, old) {\n            if (val === old) {\n                return;\n            }\n            if (typeof old !== 'number') {\n                old = 0;\n            }\n            // Moving left or right?\n            var direction = val < old ? -1 : 1;\n            this.setTab(val, false, direction);\n        }\n    },\n    computed: {\n        fade: function fade() {\n            // This computed prop is sniffed by the tab child\n            return !this.noFade;\n        },\n        navStyle: function navStyle() {\n            return this.pills ? 'pills' : 'tabs';\n        }\n    },\n    methods: {\n        /**\n         * Util: Return the sign of a number (as -1, 0, or 1)\n         */\n        sign: function sign(x) {\n            return x === 0 ? 0 : x > 0 ? 1 : -1;\n        },\n\n\n        /**\n         * Move to next tab\n         */\n        nextTab: function nextTab() {\n            this.setTab(this.currentTab + 1, false, 1);\n        },\n\n\n        /**\n         * Move to previous tab\n         */\n        previousTab: function previousTab() {\n            this.setTab(this.currentTab - 1, false, -1);\n        },\n\n\n        /**\n         * Set active tab on the tabs collection and the child 'tab' component\n         * Index is the tab we want to activate. Direction is the direction we are moving\n         * so if the tab we requested is disabled, we can skip over it.\n         * Force is used by updateTabs to ensure we have cleared any previous active tabs.\n         */\n        setTab: function setTab(index, force, direction) {\n            var _this = this;\n\n            direction = this.sign(direction || 0);\n            index = index || 0;\n\n            // Prevent setting same tab and infinite loops!\n            if (!force && index === this.currentTab) {\n                return;\n            }\n\n            var tab = this.tabs[index];\n\n            // Don't go beyond indexes!\n            if (!tab) {\n                // Reset the v-model to the current Tab\n                this.$emit('input', this.currentTab);\n                return;\n            }\n\n            // Ignore or Skip disabled\n            if (tab.disabled) {\n                if (direction) {\n                    // Skip to next non disabled tab in specified direction (recursive)\n                    this.setTab(index + direction, force, direction);\n                }\n                return;\n            }\n\n            // Activate requested current tab, and deactivte any old tabs\n            this.tabs.forEach(function (t) {\n                if (t === tab) {\n                    // Set new tab as active\n                    _this.$set(t, 'localActive', true);\n                } else {\n                    // Ensure non current tabs are not active\n                    _this.$set(t, 'localActive', false);\n                }\n            });\n\n            // Update currentTab\n            this.currentTab = index;\n        },\n\n\n        /**\n         * Dynamically update tabs list\n         */\n        updateTabs: function updateTabs() {\n            // Probe tabs\n            this.tabs = this.$children.filter(function (child) {\n                return child._isTab;\n            });\n\n            // Set initial active tab\n            var tabIndex = null;\n\n            // Find *last* active non-dsabled tab in current tabs\n            // We trust tab state over currentTab\n            this.tabs.forEach(function (tab, index) {\n                if (tab.localActive && !tab.disabled) {\n                    tabIndex = index;\n                }\n            });\n\n            // Else try setting to currentTab\n            if (tabIndex === null) {\n                if (this.currentTab >= this.tabs.length) {\n                    // Handle last tab being removed\n                    this.setTab(this.tabs.length - 1, true, -1);\n                    return;\n                } else if (this.tabs[this.currentTab] && !this.tabs[this.currentTab].disabled) {\n                    tabIndex = this.currentTab;\n                }\n            }\n\n            // Else find *first* non-disabled tab in current tabs\n            if (tabIndex === null) {\n                this.tabs.forEach(function (tab, index) {\n                    if (!tab.disabled && tabIndex === null) {\n                        tabIndex = index;\n                    }\n                });\n            }\n\n            this.setTab(tabIndex || 0, true, 0);\n        }\n    },\n    mounted: function mounted() {\n        this.updateTabs();\n\n        // Observe Child changes so we can notify tabs change\n        observeDOM(this.$refs.tabsContainer, this.updateTabs.bind(this), { subtree: false });\n    }\n};\n\nvar tab = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('transition', { attrs: { \"mode\": \"out-in\" }, on: { \"before-enter\": _vm.beforeEnter, \"after-enter\": _vm.afterEnter, \"after-leave\": _vm.afterLeave } }, [_vm.localActive || !_vm.computedLazy ? _c(_vm.tag, { directives: [{ name: \"show\", rawName: \"v-show\", value: _vm.localActive, expression: \"localActive\" }], ref: \"panel\", tag: \"component\", class: _vm.tabClasses, attrs: { \"id\": _vm.safeId(), \"role\": \"tabpanel\", \"aria-hidden\": _vm.localActive ? 'false' : 'true', \"aria-expanded\": _vm.localActive ? 'true' : 'false', \"aria-lablelledby\": _vm.controlledBy || null } }, [_vm._t(\"default\")], 2) : _vm._e()], 1);\n    }, staticRenderFns: [],\n    mixins: [idMixin],\n    methods: {\n        beforeEnter: function beforeEnter() {\n            this.show = false;\n        },\n        afterEnter: function afterEnter() {\n            this.show = true;\n        },\n        afterLeave: function afterLeave() {\n            this.show = false;\n        }\n    },\n    data: function data() {\n        return {\n            localActive: this.active && !this.disabled,\n            show: false\n        };\n    },\n    mounted: function mounted() {\n        this.show = this.localActive;\n    },\n\n    computed: {\n        tabClasses: function tabClasses() {\n            return ['tab-pane', this.show ? 'show' : '', this.computedFade ? 'fade' : '', this.disabled ? 'disabled' : '', this.localActive ? 'active' : ''];\n        },\n        controlledBy: function controlledBy() {\n            return this.buttonId || this.safeId('__BV_tab_button__');\n        },\n        computedFade: function computedFade() {\n            return this.$parent.fade;\n        },\n        computedLazy: function computedLazy() {\n            return this.$parent.lazy;\n        },\n        _isTab: function _isTab() {\n            // For parent sniffing of child\n            return true;\n        }\n    },\n    props: {\n        active: {\n            type: Boolean,\n            default: false\n        },\n        tag: {\n            type: String,\n            default: 'div'\n        },\n        buttonId: {\n            type: String,\n            default: ''\n        },\n        title: {\n            type: String,\n            default: ''\n        },\n        headHtml: {\n            type: String,\n            default: null\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        href: {\n            type: String,\n            default: '#'\n        }\n    }\n};\n\nvar tooltip = { render: function render() {\n        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { directives: [{ name: \"show\", rawName: \"v-show\", value: false, expression: \"false\" }], staticClass: \"d-none\", attrs: { \"aria-hidden\": \"true\" } }, [_c('div', { ref: \"title\" }, [_vm._t(\"default\")], 2)]);\n    }, staticRenderFns: [],\n    mixins: [toolpopMixin],\n    data: function data() {\n        return {};\n    },\n\n    props: {\n        title: {\n            type: String,\n            default: ''\n        },\n        triggers: {\n            type: [String, Array],\n            default: 'hover focus'\n        },\n        placement: {\n            type: String,\n            default: 'top'\n        }\n    },\n    methods: {\n        createToolpop: function createToolpop() {\n            // getTarget is in toolpop mixin\n            var target = this.getTarget();\n            if (target) {\n                this._toolpop = new ToolTip(target, this.getConfig(), this.$root);\n            } else {\n                this._toolpop = null;\n                warn(\"b-tooltip: 'target' element not found!\");\n            }\n            return this._toolpop;\n        }\n    }\n};\n\n\n\nvar components = Object.freeze({\n\tbAlert: alert,\n\tbBreadcrumb: breadcrumb,\n\tbBreadcrumbItem: BreadcrumbItem,\n\tbBreadcrumbLink: BreadcrumbLink,\n\tbButton: bBtn,\n\tbBtn: bBtn,\n\tbButtonClose: bBtnClose,\n\tbBtnClose: bBtnClose,\n\tbButtonToolbar: buttonToolbar,\n\tbBtnToolbar: buttonToolbar,\n\tbButtonGroup: buttonGroup,\n\tbBtnGroup: buttonGroup,\n\tbInputGroup: inputGroup,\n\tbInputGroupAddon: bInputGroupAddon,\n\tbInputGroupButton: inputGroupButton,\n\tbInputGroupBtn: inputGroupButton,\n\tbCol: col,\n\tbContainer: Container,\n\tbCard: card,\n\tbCardBody: CardBody,\n\tbCardHeader: CardHeader,\n\tbCardFooter: CardFooter,\n\tbCardGroup: cardGroup,\n\tbCardImg: CardImg,\n\tbDropdown: dropdown,\n\tbDd: dropdown,\n\tbDropdownItem: dropdownItem,\n\tbDdItem: dropdownItem,\n\tbDropdownItemButton: dropdownItemButton,\n\tbDdItemBtn: dropdownItemButton,\n\tbDdItemButton: dropdownItemButton,\n\tbDropdownItemBtn: dropdownItemButton,\n\tbDropdownDivider: dropdownDivider,\n\tbDdDivider: dropdownDivider,\n\tbDropdownHeader: dropdownHeader,\n\tbDdHeader: dropdownHeader,\n\tbEmbed: embed,\n\tbForm: Form,\n\tbFormRow: bFormRow,\n\tbFormText: bFormText,\n\tbFormFeedback: bFormFeedback,\n\tbFormGroup: formGroup,\n\tbFormFieldset: formGroup,\n\tbFormInput: formInput,\n\tbInput: formInput,\n\tbFormTextarea: formTextarea,\n\tbTextarea: formTextarea,\n\tbFormFile: formFile,\n\tbFile: formFile,\n\tbFormCheckboxGroup: formCheckboxGroup,\n\tbCheckboxGroup: formCheckboxGroup,\n\tbCheckGroup: formCheckboxGroup,\n\tbFormCheckbox: bFormCheckbox,\n\tbCheckbox: bFormCheckbox,\n\tbCheck: bFormCheckbox,\n\tbFormRadioGroup: formRadioGroup,\n\tbRadioGroup: formRadioGroup,\n\tbFormRadio: bFormRadio,\n\tbRadio: bFormRadio,\n\tbFormSelect: formSelect,\n\tbSelect: formSelect,\n\tbImg: bImg,\n\tbImgLazy: imgLazy,\n\tbJumbotron: jumbotron,\n\tbBadge: badge,\n\tbMedia: media,\n\tbMediaBody: MediaBody,\n\tbMediaAside: MediaAside,\n\tbModal: modal,\n\tbNavbar: navbar,\n\tbNavbarBrand: navbarBrand,\n\tbNavText: navText,\n\tbNavForm: navForm,\n\tbRow: row,\n\tbPagination: pagination,\n\tbPaginationNav: paginationNav,\n\tbPopover: popover,\n\tbProgressBar: bProgressBar,\n\tbProgress: progress,\n\tbTable: table,\n\tbTooltip: tooltip,\n\tbTab: tab,\n\tbTabs: tabs,\n\tbNav: nav,\n\tbNavItem: navItem,\n\tbNavItemDropdown: navItemDropdown,\n\tbNavDropdown: navItemDropdown,\n\tbNavItemDd: navItemDropdown,\n\tbNavDd: navItemDropdown,\n\tbNavToggle: navToggle,\n\tbListGroupItem: listGroupItem,\n\tbListGroup: listGroup,\n\tbCarouselSlide: carouselSlide,\n\tbCarousel: carousel,\n\tbCollapse: collapse,\n\tbLink: bLink\n});\n\nvar all_listen_types = { hover: true, click: true, focus: true };\n\nfunction targets(vnode, binding, listen_types, fn) {\n\n    var targets = keys(binding.modifiers || {}).filter(function (t) {\n        return !all_listen_types[t];\n    });\n\n    if (binding.value) {\n        targets.push(binding.value);\n    }\n\n    var listener = function listener() {\n        fn({ targets: targets, vnode: vnode });\n    };\n\n    keys(all_listen_types).forEach(function (type) {\n        if (listen_types[type] || binding.modifiers[type]) {\n            vnode.elm.addEventListener(type, listener);\n        }\n    });\n\n    // Return the list of targets\n    return targets;\n}\n\n// Are we client side?\nvar inBrowser = typeof window !== 'undefined';\n\n// target listen types\nvar listen_types = { click: true };\n\n// Property key for handler storage\nvar BVT = '__BV_toggle__';\n\n// Emitted Control Event for collapse (emitted to collapse)\nvar EVENT_TOGGLE$1 = 'bv::toggle::collapse';\n\n// Listen to Event for toggle state update (Emited by collapse)\nvar EVENT_STATE$1 = 'bv::collapse::state';\n\nvar toggle = {\n    bind: function bind(el, binding, vnode) {\n\n        var targets$$1 = targets(vnode, binding, listen_types, function (_ref) {\n            var targets$$1 = _ref.targets,\n                vnode = _ref.vnode;\n\n            targets$$1.forEach(function (target$$1) {\n                vnode.context.$root.$emit(EVENT_TOGGLE$1, target$$1);\n            });\n        });\n\n        if (inBrowser && vnode.context && targets$$1.length > 0) {\n            // Add aria attributes to element\n            setAttr(el, 'aria-controls', targets$$1.join(' '));\n            setAttr(el, 'aria-expanded', 'false');\n\n            // Toggle state hadnler, stored on element\n            el[BVT] = function toggleDirectiveHandler(id, state) {\n                if (targets$$1.indexOf(id) !== -1) {\n                    // Set aria-expanded state\n                    setAttr(el, 'aria-expanded', state ? 'true' : 'false');\n                    // Set/Clear 'collapsed' class state\n                    if (state) {\n                        removeClass(el, 'collapsed');\n                    } else {\n                        addClass(el, 'collapsed');\n                    }\n                }\n            };\n\n            // Listen for toggle state changes\n            vnode.context.$root.$on(EVENT_STATE$1, el[BVT]);\n        }\n    },\n    unbind: function unbind(el, binding, vnode) {\n        if (el[BVT]) {\n            // Remove our $root listener\n            vnode.context.$root.$off(EVENT_STATE$1, el[BVT]);\n            el[BVT] = null;\n        }\n    }\n};\n\nvar listen_types$1 = { click: true };\n\nvar modal$1 = {\n    // eslint-disable-next-line no-shadow-restricted-names\n    bind: function bind(undefined, binding, vnode) {\n        targets(vnode, binding, listen_types$1, function (_ref) {\n            var targets$$1 = _ref.targets,\n                vnode = _ref.vnode;\n\n            targets$$1.forEach(function (target) {\n                vnode.context.$root.$emit('bv::show::modal', target, vnode.elm);\n            });\n        });\n    }\n};\n\n/*\n * ScrollSpy directive v-b-scrollspy\n */\n\nvar inBrowser$1 = typeof window !== 'undefined';\nvar isServer = !inBrowser$1;\n\n// Key we use to store our Instance\nvar BVSS = '__BV_ScrollSpy__';\n\n// Generate config from bindings\nfunction makeConfig(binding) {\n    var config = {};\n\n    // If Argument, assume element ID\n    if (binding.arg) {\n        // Element ID specified as arg. We must pre-pend #\n        config.element = '#' + binding.arg;\n    }\n\n    // Process modifiers\n    keys(binding.modifiers).forEach(function (mod) {\n        if (/^\\d+$/.test(mod)) {\n            // Offest value\n            config.offset = parseInt(mod, 10);\n        } else if (/^(auto|position|offset)$/.test(val)) {\n            // Offset method\n            config.method = val;\n        }\n    });\n\n    // Process value\n    if (typeof binding.value === 'string') {\n        // Value is a CSS ID or selector\n        config.element = binding.value;\n    } else if (typeof binding.value === 'number') {\n        // Value is offset\n        config.offset = Math.round(binding.value);\n    } else if (_typeof(binding.value) === 'object') {\n        // Value is config object\n        // Filter the object based on our supported config options\n        keys(binding.value).filter(function (k) {\n            return Boolean(ScrollSpy.DefaultType[k]);\n        }).forEach(function (k) {\n            config[k] = binding.value[k];\n        });\n    }\n\n    return config;\n}\n\nfunction addBVSS(el, binding, vnode) {\n    if (isServer) {\n        return;\n    }\n    var cfg = makeConfig(binding);\n    if (!el[BVSS]) {\n        el[BVSS] = new ScrollSpy(el, cfg, vnode.context.$root);\n    } else {\n        el[BVSS].updateConfig(cfg, vnode.context.$root);\n    }\n    return el[BVSS];\n}\n\nfunction removeBVSS(el) {\n    if (el[BVSS]) {\n        el[BVSS].dispose();\n        el[BVSS] = null;\n    }\n}\n\n/*\n * Export our directive\n */\n\nvar scrollspy = {\n    bind: function bind(el, binding, vnode) {\n        addBVSS(el, binding, vnode);\n    },\n    inserted: function inserted(el, binding, vnode) {\n        addBVSS(el, binding, vnode);\n    },\n    update: function update(el, binding, vnode) {\n        addBVSS(el, binding, vnode);\n    },\n    componentUpdated: function componentUpdated(el, binding, vnode) {\n        addBVSS(el, binding, vnode);\n    },\n    unbind: function unbind(el) {\n        if (isServer) {\n            return;\n        }\n        // Remove scroll event listener on scrollElId\n        removeBVSS(el);\n    }\n};\n\nvar inBrowser$2 = typeof window !== 'undefined' && typeof document !== 'undefined';\n\n// Key which we use to store tooltip object on element\nvar BVTT = '__BV_ToolTip__';\n\n// Valid event triggers\nvar validTriggers = {\n    'focus': true,\n    'hover': true,\n    'click': true,\n    'blur': true\n};\n\n// Build a ToolTip config based on bindings (if any)\n// Arguments and modifiers take precedence over passed value config object\nfunction parseBindings(bindings) {\n\n    // We start out with a blank config\n    var config = {};\n\n    // Process bindings.value\n    if (typeof bindings.value === 'string') {\n        // Value is tooltip content (html optionally supported)\n        config.title = bindings.value;\n    } else if (typeof bindings.value === 'function') {\n        // Title generator function\n        config.title = bindings.value;\n    } else if (_typeof(bindings.value) === 'object') {\n        // Value is config object, so merge\n        config = assign(bindings.value);\n    }\n\n    // If Argument, assume element ID of container element\n    if (bindings.arg) {\n        // Element ID specified as arg. We must prepend '#' to become a CSS selector\n        config.container = '#' + bindings.arg;\n    }\n\n    // Process modifiers\n    keys(bindings.modifiers).forEach(function (mod) {\n        if (/^html$/.test(mod)) {\n            // Title allows HTML\n            config.html = true;\n        } else if (/^nofade$/.test(mod)) {\n            // no animation\n            config.animation = false;\n        } else if (/^(auto|top(left|right)?|bottom(left|right)?|left(top|bottom)?|right(top|bottom)?)$/.test(mod)) {\n            // placement of tooltip\n            config.placement = mod;\n        } else if (/^d\\d+$/.test(mod)) {\n            // delay value\n            var delay = parseInt(mod.slice(1), 10) || 0;\n            if (delay) {\n                config.delay = delay;\n            }\n        } else if (/^o-?\\d+$/.test(mod)) {\n            // offset value. Negative allowed\n            var offset = parseInt(mod.slice(1), 10) || 0;\n            if (offset) {\n                config.offset = offset;\n            }\n        }\n    });\n\n    // Special handling of event trigger modifiers Trigger is a space separated list\n    var selectedTriggers = {};\n\n    // parse current config object trigger\n    var triggers = typeof config.trigger === 'string' ? config.trigger.trim().split(/\\s+/) : [];\n    triggers.forEach(function (trigger) {\n        if (validTriggers[trigger]) {\n            selectedTriggers[trigger] = true;\n        }\n    });\n\n    // Parse Modifiers for triggers\n    keys(validTriggers).forEach(function (trigger) {\n        if (bindings.modifiers[trigger]) {\n            selectedTriggers[trigger] = true;\n        }\n    });\n\n    // Sanitize triggers\n    config.trigger = keys(selectedTriggers).join(' ');\n    if (config.trigger === 'blur') {\n        // Blur by itself is useless, so convert it to 'focus'\n        config.trigger = 'focus';\n    }\n    if (!config.trigger) {\n        // remove trigger config\n        delete config.trigger;\n    }\n\n    return config;\n}\n\n//\n// Add or Update tooltip on our element\n//\nfunction applyBVTT(el, bindings, vnode) {\n    if (!inBrowser$2) {\n        return;\n    }\n    if (!Popper) {\n        // Popper is required for tooltips to work\n        warn(\"v-b-tooltip: Popper.js is required for tooltips to work\");\n        return;\n    }\n    if (el[BVTT]) {\n        el[BVTT].updateConfig(parseBindings(bindings));\n    } else {\n        el[BVTT] = new ToolTip(el, parseBindings(bindings), vnode.context.$root);\n    }\n}\n\n//\n// Remove tooltip on our element\n//\nfunction removeBVTT(el) {\n    if (!inBrowser$2) {\n        return;\n    }\n    if (el[BVTT]) {\n        el[BVTT].destroy();\n        el[BVTT] = null;\n        delete el[BVTT];\n    }\n}\n\n/*\n * Export our directive\n */\nvar tooltip$1 = {\n    bind: function bind(el, bindings, vnode) {\n        applyBVTT(el, bindings, vnode);\n    },\n    inserted: function inserted(el, bindings, vnode) {\n        applyBVTT(el, bindings, vnode);\n    },\n    update: function update(el, bindings, vnode) {\n        if (bindings.value !== bindings.oldValue) {\n            applyBVTT(el, bindings, vnode);\n        }\n    },\n    componentUpdated: function componentUpdated(el, bindings, vnode) {\n        if (bindings.value !== bindings.oldValue) {\n            applyBVTT(el, bindings, vnode);\n        }\n    },\n    unbind: function unbind(el) {\n        removeBVTT(el);\n    }\n};\n\nvar inBrowser$3 = typeof window !== 'undefined' && typeof document !== 'undefined';\n\n// Key which we use to store tooltip object on element\nvar BVPO = '__BV_PopOver__';\n\n// Vlid event triggers\nvar validTriggers$1 = {\n    'focus': true,\n    'hover': true,\n    'click': true,\n    'blur': true\n};\n\n// Build a PopOver config based on bindings (if any)\n// Arguments and modifiers take precedence over pased value config object\nfunction parseBindings$1(bindings) {\n\n    // We start out with a blank config\n    var config = {};\n\n    // Process bindings.value\n    if (typeof bindings.value === 'string') {\n        // Value is popover content (html optionally supported)\n        config.content = bindings.value;\n    } else if (typeof bindings.value === 'function') {\n        // Content generator function\n        config.content = bindings.value;\n    } else if (_typeof(bindings.value) === 'object') {\n        // Value is config object, so merge\n        config = assign(bindings.value);\n    }\n\n    // If Argument, assume element ID of container element\n    if (bindings.arg) {\n        // Element ID specified as arg. We must prepend '#' to become a CSS selector\n        config.container = '#' + bindings.arg;\n    }\n\n    // Process modifiers\n    keys(bindings.modifiers).forEach(function (mod) {\n        if (/^html$/.test(mod)) {\n            // Title allows HTML\n            config.html = true;\n        } else if (/^nofade$/.test(mod)) {\n            // no animation\n            config.animation = false;\n        } else if (/^(auto|top(left|right)?|bottom(left|right)?|left(top|bottom)?|right(top|bottom)?)$/.test(mod)) {\n            // placement of popover\n            config.placement = mod;\n        } else if (/^d\\d+$/.test(mod)) {\n            // delay value\n            var delay = parseInt(mod.slice(1), 10) || 0;\n            if (delay) {\n                config.delay = delay;\n            }\n        } else if (/^o-?\\d+$/.test(mod)) {\n            // offset value (negative allowed)\n            var offset = parseInt(mod.slice(1), 10) || 0;\n            if (offset) {\n                config.offset = offset;\n            }\n        }\n    });\n\n    // Special handling of event trigger modifiers Trigger is a space separated list\n    var selectedTriggers = {};\n\n    // parse current config object trigger\n    var triggers = typeof config.trigger === 'string' ? config.trigger.trim().split(/\\s+/) : [];\n    triggers.forEach(function (trigger) {\n        if (validTriggers$1[trigger]) {\n            selectedTriggers[trigger] = true;\n        }\n    });\n\n    // Parse Modifiers for triggers\n    keys(validTriggers$1).forEach(function (trigger) {\n        if (bindings.modifiers[trigger]) {\n            selectedTriggers[trigger] = true;\n        }\n    });\n\n    // Sanitize triggers\n    config.trigger = keys(selectedTriggers).join(' ');\n    if (config.trigger === 'blur') {\n        // Blur by itself is useless, so convert it to focus\n        config.trigger = 'focus';\n    }\n    if (!config.trigger) {\n        // remove trigger config\n        delete config.trigger;\n    }\n\n    return config;\n}\n\n//\n// Add or Update popover on our element\n//\nfunction applyBVPO(el, bindings, vnode) {\n    if (!inBrowser$3) {\n        return;\n    }\n    if (!Popper) {\n        // Popper is required for tooltips to work\n        warn(\"v-b-popover: Popper.js is required for popovers to work\");\n        return;\n    }\n    if (el[BVPO]) {\n        el[BVPO].updateConfig(parseBindings$1(bindings));\n    } else {\n        el[BVPO] = new PopOver(el, parseBindings$1(bindings), vnode.context.$root);\n    }\n}\n\n//\n// Remove popover on our element\n//\nfunction removeBVPO(el) {\n    if (!inBrowser$3) {\n        return;\n    }\n    if (el[BVPO]) {\n        el[BVPO].destroy();\n        el[BVPO] = null;\n        delete el[BVPO];\n    }\n}\n\n/*\n * Export our directive\n */\nvar popover$1 = {\n    bind: function bind(el, bindings, vnode) {\n        applyBVPO(el, bindings, vnode);\n    },\n    inserted: function inserted(el, bindings, vnode) {\n        applyBVPO(el, bindings, vnode);\n    },\n    update: function update(el, bindings, vnode) {\n        if (bindings.value !== bindings.oldValue) {\n            applyBVPO(el, bindings, vnode);\n        }\n    },\n    componentUpdated: function componentUpdated(el, bindings, vnode) {\n        if (bindings.value !== bindings.oldValue) {\n            applyBVPO(el, bindings, vnode);\n        }\n    },\n    unbind: function unbind(el) {\n        removeBVPO(el);\n    }\n};\n\n\n\nvar directives = Object.freeze({\n\tbToggle: toggle,\n\tbModal: modal$1,\n\tbScrollspy: scrollspy,\n\tbTooltip: tooltip$1,\n\tbPopover: popover$1\n});\n\n/* eslint-disable no-var, no-undef, guard-for-in, object-shorthand */\n\nvar VuePlugin = {\n    install: function install(Vue) {\n        if (Vue._bootstrap_vue_installed) {\n            return;\n        }\n\n        Vue._bootstrap_vue_installed = true;\n\n        // Register components\n        for (var component in components) {\n            Vue.component(component, components[component]);\n        }\n\n        // Register directives\n        for (var directive in directives) {\n            Vue.directive(directive, directives[directive]);\n        }\n    }\n};\n\nif (typeof window !== 'undefined' && window.Vue) {\n    window.Vue.use(VuePlugin);\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (VuePlugin);\n//# sourceMappingURL=bootstrap-vue.esm.js.map\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(13)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(74)\n}\nvar Component = __webpack_require__(3)(\n  /* script */\n  __webpack_require__(41),\n  /* template */\n  __webpack_require__(66),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"C:\\\\Users\\\\Himel\\\\Documents\\\\NetBeansProjects\\\\MooseBeat\\\\src\\\\App.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] App.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-f65f1004\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-f65f1004\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT8zNWE3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLHdCQUEyTDtBQUMzTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQW9IO0FBQ3BIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0Usc0RBQXNELElBQUk7QUFDekksbUNBQW1DOztBQUVuQztBQUNBLFlBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEIiwiZmlsZSI6IjE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRpc3Bvc2VkID0gZmFsc2VcbmZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIGlmIChkaXNwb3NlZCkgcmV0dXJuXG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi1mNjVmMTAwNFxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vQXBwLnZ1ZVwiKVxufVxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQXBwLnZ1ZVwiKSxcbiAgLyogdGVtcGxhdGUgKi9cbiAgcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZjY1ZjEwMDRcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vQXBwLnZ1ZVwiKSxcbiAgLyogc3R5bGVzICovXG4gIGluamVjdFN0eWxlLFxuICAvKiBzY29wZUlkICovXG4gIG51bGwsXG4gIC8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xuICBudWxsXG4pXG5Db21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcIkM6XFxcXFVzZXJzXFxcXEhpbWVsXFxcXERvY3VtZW50c1xcXFxOZXRCZWFuc1Byb2plY3RzXFxcXE1vb3NlQmVhdFxcXFxzcmNcXFxcQXBwLnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5LnN1YnN0cigwLCAyKSAhPT0gXCJfX1wifSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5pZiAoQ29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gQXBwLnZ1ZTogZnVuY3Rpb25hbCBjb21wb25lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggdGVtcGxhdGVzLCB0aGV5IHNob3VsZCB1c2UgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi1mNjVmMTAwNFwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LWY2NWYxMDA0XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvQXBwLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(73)\n}\nvar Component = __webpack_require__(3)(\n  /* script */\n  __webpack_require__(42),\n  /* template */\n  __webpack_require__(65),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  \"data-v-d09653ee\",\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"C:\\\\Users\\\\Himel\\\\Documents\\\\NetBeansProjects\\\\MooseBeat\\\\src\\\\components\\\\album.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] album.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-d09653ee\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-d09653ee\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hbGJ1bS52dWU/ZTY2MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSx3QkFBNkw7QUFDN0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUFzSDtBQUN0SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLHNEQUFzRCxJQUFJO0FBQ3pJLG1DQUFtQzs7QUFFbkM7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkaXNwb3NlZCA9IGZhbHNlXG5mdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICBpZiAoZGlzcG9zZWQpIHJldHVyblxuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZDA5NjUzZWVcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vYWxidW0udnVlXCIpXG59XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9hbGJ1bS52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LWQwOTY1M2VlXFxcIixcXFwiaGFzU2NvcGVkXFxcIjp0cnVlfSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYWxidW0udnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgaW5qZWN0U3R5bGUsXG4gIC8qIHNjb3BlSWQgKi9cbiAgXCJkYXRhLXYtZDA5NjUzZWVcIixcbiAgLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG4gIG51bGxcbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiQzpcXFxcVXNlcnNcXFxcSGltZWxcXFxcRG9jdW1lbnRzXFxcXE5ldEJlYW5zUHJvamVjdHNcXFxcTW9vc2VCZWF0XFxcXHNyY1xcXFxjb21wb25lbnRzXFxcXGFsYnVtLnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5LnN1YnN0cigwLCAyKSAhPT0gXCJfX1wifSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5pZiAoQ29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gYWxidW0udnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0ZW1wbGF0ZXMsIHRoZXkgc2hvdWxkIHVzZSByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LWQwOTY1M2VlXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtZDA5NjUzZWVcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL2FsYnVtLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(72)\n}\nvar Component = __webpack_require__(3)(\n  /* script */\n  __webpack_require__(43),\n  /* template */\n  __webpack_require__(64),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  \"data-v-8cfc9bc6\",\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"C:\\\\Users\\\\Himel\\\\Documents\\\\NetBeansProjects\\\\MooseBeat\\\\src\\\\components\\\\artist.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] artist.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-8cfc9bc6\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-8cfc9bc6\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hcnRpc3QudnVlP2M3OGIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0Esd0JBQTZMO0FBQzdMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBc0g7QUFDdEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtFQUErRSxzREFBc0QsSUFBSTtBQUN6SSxtQ0FBbUM7O0FBRW5DO0FBQ0EsWUFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxuZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgaWYgKGRpc3Bvc2VkKSByZXR1cm5cbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LThjZmM5YmM2XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL2FydGlzdC52dWVcIilcbn1cbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL2FydGlzdC52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LThjZmM5YmM2XFxcIixcXFwiaGFzU2NvcGVkXFxcIjp0cnVlfSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXJ0aXN0LnZ1ZVwiKSxcbiAgLyogc3R5bGVzICovXG4gIGluamVjdFN0eWxlLFxuICAvKiBzY29wZUlkICovXG4gIFwiZGF0YS12LThjZmM5YmM2XCIsXG4gIC8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xuICBudWxsXG4pXG5Db21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcIkM6XFxcXFVzZXJzXFxcXEhpbWVsXFxcXERvY3VtZW50c1xcXFxOZXRCZWFuc1Byb2plY3RzXFxcXE1vb3NlQmVhdFxcXFxzcmNcXFxcY29tcG9uZW50c1xcXFxhcnRpc3QudnVlXCJcbmlmIChDb21wb25lbnQuZXNNb2R1bGUgJiYgT2JqZWN0LmtleXMoQ29tcG9uZW50LmVzTW9kdWxlKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtyZXR1cm4ga2V5ICE9PSBcImRlZmF1bHRcIiAmJiBrZXkuc3Vic3RyKDAsIDIpICE9PSBcIl9fXCJ9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbmlmIChDb21wb25lbnQub3B0aW9ucy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBhcnRpc3QudnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0ZW1wbGF0ZXMsIHRoZXkgc2hvdWxkIHVzZSByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LThjZmM5YmM2XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtOGNmYzliYzZcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL2FydGlzdC52dWVcbi8vIG1vZHVsZSBpZCA9IDE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(68)\n}\nvar Component = __webpack_require__(3)(\n  /* script */\n  __webpack_require__(44),\n  /* template */\n  __webpack_require__(60),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  \"data-v-225c3a03\",\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"C:\\\\Users\\\\Himel\\\\Documents\\\\NetBeansProjects\\\\MooseBeat\\\\src\\\\components\\\\login.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] login.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-225c3a03\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-225c3a03\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9sb2dpbi52dWU/N2Q3MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSx3QkFBNkw7QUFDN0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUFzSDtBQUN0SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLHNEQUFzRCxJQUFJO0FBQ3pJLG1DQUFtQzs7QUFFbkM7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkaXNwb3NlZCA9IGZhbHNlXG5mdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICBpZiAoZGlzcG9zZWQpIHJldHVyblxuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMjI1YzNhMDNcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vbG9naW4udnVlXCIpXG59XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9sb2dpbi52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTIyNWMzYTAzXFxcIixcXFwiaGFzU2NvcGVkXFxcIjp0cnVlfSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vbG9naW4udnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgaW5qZWN0U3R5bGUsXG4gIC8qIHNjb3BlSWQgKi9cbiAgXCJkYXRhLXYtMjI1YzNhMDNcIixcbiAgLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG4gIG51bGxcbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiQzpcXFxcVXNlcnNcXFxcSGltZWxcXFxcRG9jdW1lbnRzXFxcXE5ldEJlYW5zUHJvamVjdHNcXFxcTW9vc2VCZWF0XFxcXHNyY1xcXFxjb21wb25lbnRzXFxcXGxvZ2luLnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5LnN1YnN0cigwLCAyKSAhPT0gXCJfX1wifSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5pZiAoQ29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gbG9naW4udnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0ZW1wbGF0ZXMsIHRoZXkgc2hvdWxkIHVzZSByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTIyNWMzYTAzXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtMjI1YzNhMDNcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL2xvZ2luLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(67)\n}\nvar Component = __webpack_require__(3)(\n  /* script */\n  __webpack_require__(45),\n  /* template */\n  __webpack_require__(59),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  \"data-v-113ac87a\",\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"C:\\\\Users\\\\Himel\\\\Documents\\\\NetBeansProjects\\\\MooseBeat\\\\src\\\\components\\\\profile.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] profile.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-113ac87a\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-113ac87a\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9wcm9maWxlLnZ1ZT83NjQxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLHdCQUE2TDtBQUM3TDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXNIO0FBQ3RIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0Usc0RBQXNELElBQUk7QUFDekksbUNBQW1DOztBQUVuQztBQUNBLFlBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRpc3Bvc2VkID0gZmFsc2VcbmZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIGlmIChkaXNwb3NlZCkgcmV0dXJuXG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0xMTNhYzg3YVxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9wcm9maWxlLnZ1ZVwiKVxufVxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vcHJvZmlsZS52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTExM2FjODdhXFxcIixcXFwiaGFzU2NvcGVkXFxcIjp0cnVlfSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vcHJvZmlsZS52dWVcIiksXG4gIC8qIHN0eWxlcyAqL1xuICBpbmplY3RTdHlsZSxcbiAgLyogc2NvcGVJZCAqL1xuICBcImRhdGEtdi0xMTNhYzg3YVwiLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJDOlxcXFxVc2Vyc1xcXFxIaW1lbFxcXFxEb2N1bWVudHNcXFxcTmV0QmVhbnNQcm9qZWN0c1xcXFxNb29zZUJlYXRcXFxcc3JjXFxcXGNvbXBvbmVudHNcXFxccHJvZmlsZS52dWVcIlxuaWYgKENvbXBvbmVudC5lc01vZHVsZSAmJiBPYmplY3Qua2V5cyhDb21wb25lbnQuZXNNb2R1bGUpLnNvbWUoZnVuY3Rpb24gKGtleSkge3JldHVybiBrZXkgIT09IFwiZGVmYXVsdFwiICYmIGtleS5zdWJzdHIoMCwgMikgIT09IFwiX19cIn0pKSB7Y29uc29sZS5lcnJvcihcIm5hbWVkIGV4cG9ydHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gKi52dWUgZmlsZXMuXCIpfVxuaWYgKENvbXBvbmVudC5vcHRpb25zLmZ1bmN0aW9uYWwpIHtjb25zb2xlLmVycm9yKFwiW3Z1ZS1sb2FkZXJdIHByb2ZpbGUudnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0ZW1wbGF0ZXMsIHRoZXkgc2hvdWxkIHVzZSByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTExM2FjODdhXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtMTEzYWM4N2FcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL3Byb2ZpbGUudnVlXG4vLyBtb2R1bGUgaWQgPSAxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(71)\n}\nvar Component = __webpack_require__(3)(\n  /* script */\n  __webpack_require__(47),\n  /* template */\n  __webpack_require__(63),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"C:\\\\Users\\\\Himel\\\\Documents\\\\NetBeansProjects\\\\MooseBeat\\\\src\\\\components\\\\search.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] search.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-699d1ffe\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-699d1ffe\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zZWFyY2gudnVlPzc4ZGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0Esd0JBQThMO0FBQzlMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBdUg7QUFDdkg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtFQUErRSxzREFBc0QsSUFBSTtBQUN6SSxtQ0FBbUM7O0FBRW5DO0FBQ0EsWUFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxuZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgaWYgKGRpc3Bvc2VkKSByZXR1cm5cbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTY5OWQxZmZlXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zZWFyY2gudnVlXCIpXG59XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9zZWFyY2gudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi02OTlkMWZmZVxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zZWFyY2gudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgaW5qZWN0U3R5bGUsXG4gIC8qIHNjb3BlSWQgKi9cbiAgbnVsbCxcbiAgLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG4gIG51bGxcbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiQzpcXFxcVXNlcnNcXFxcSGltZWxcXFxcRG9jdW1lbnRzXFxcXE5ldEJlYW5zUHJvamVjdHNcXFxcTW9vc2VCZWF0XFxcXHNyY1xcXFxjb21wb25lbnRzXFxcXHNlYXJjaC52dWVcIlxuaWYgKENvbXBvbmVudC5lc01vZHVsZSAmJiBPYmplY3Qua2V5cyhDb21wb25lbnQuZXNNb2R1bGUpLnNvbWUoZnVuY3Rpb24gKGtleSkge3JldHVybiBrZXkgIT09IFwiZGVmYXVsdFwiICYmIGtleS5zdWJzdHIoMCwgMikgIT09IFwiX19cIn0pKSB7Y29uc29sZS5lcnJvcihcIm5hbWVkIGV4cG9ydHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gKi52dWUgZmlsZXMuXCIpfVxuaWYgKENvbXBvbmVudC5vcHRpb25zLmZ1bmN0aW9uYWwpIHtjb25zb2xlLmVycm9yKFwiW3Z1ZS1sb2FkZXJdIHNlYXJjaC52dWU6IGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIHRlbXBsYXRlcywgdGhleSBzaG91bGQgdXNlIHJlbmRlciBmdW5jdGlvbnMuXCIpfVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtNjk5ZDFmZmVcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi02OTlkMWZmZVwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvc2VhcmNoLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(69)\n}\nvar Component = __webpack_require__(3)(\n  /* script */\n  __webpack_require__(48),\n  /* template */\n  __webpack_require__(61),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  \"data-v-27d1b20e\",\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"C:\\\\Users\\\\Himel\\\\Documents\\\\NetBeansProjects\\\\MooseBeat\\\\src\\\\components\\\\statistics.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] statistics.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-27d1b20e\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-27d1b20e\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zdGF0aXN0aWNzLnZ1ZT9hMTAyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLHdCQUE2TDtBQUM3TDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXNIO0FBQ3RIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0Usc0RBQXNELElBQUk7QUFDekksbUNBQW1DOztBQUVuQztBQUNBLFlBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRpc3Bvc2VkID0gZmFsc2VcbmZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIGlmIChkaXNwb3NlZCkgcmV0dXJuXG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0yN2QxYjIwZVxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zdGF0aXN0aWNzLnZ1ZVwiKVxufVxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vc3RhdGlzdGljcy52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTI3ZDFiMjBlXFxcIixcXFwiaGFzU2NvcGVkXFxcIjp0cnVlfSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3RhdGlzdGljcy52dWVcIiksXG4gIC8qIHN0eWxlcyAqL1xuICBpbmplY3RTdHlsZSxcbiAgLyogc2NvcGVJZCAqL1xuICBcImRhdGEtdi0yN2QxYjIwZVwiLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJDOlxcXFxVc2Vyc1xcXFxIaW1lbFxcXFxEb2N1bWVudHNcXFxcTmV0QmVhbnNQcm9qZWN0c1xcXFxNb29zZUJlYXRcXFxcc3JjXFxcXGNvbXBvbmVudHNcXFxcc3RhdGlzdGljcy52dWVcIlxuaWYgKENvbXBvbmVudC5lc01vZHVsZSAmJiBPYmplY3Qua2V5cyhDb21wb25lbnQuZXNNb2R1bGUpLnNvbWUoZnVuY3Rpb24gKGtleSkge3JldHVybiBrZXkgIT09IFwiZGVmYXVsdFwiICYmIGtleS5zdWJzdHIoMCwgMikgIT09IFwiX19cIn0pKSB7Y29uc29sZS5lcnJvcihcIm5hbWVkIGV4cG9ydHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gKi52dWUgZmlsZXMuXCIpfVxuaWYgKENvbXBvbmVudC5vcHRpb25zLmZ1bmN0aW9uYWwpIHtjb25zb2xlLmVycm9yKFwiW3Z1ZS1sb2FkZXJdIHN0YXRpc3RpY3MudnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0ZW1wbGF0ZXMsIHRoZXkgc2hvdWxkIHVzZSByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTI3ZDFiMjBlXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtMjdkMWIyMGVcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL3N0YXRpc3RpY3MudnVlXG4vLyBtb2R1bGUgaWQgPSAyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {/**\n  * vue-router v2.7.0\n  * (c) 2017 Evan You\n  * @license MIT\n  */\n/*  */\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error((\"[vue-router] \" + message))\n  }\n}\n\nfunction warn (condition, message) {\n  if (process.env.NODE_ENV !== 'production' && !condition) {\n    typeof console !== 'undefined' && console.warn((\"[vue-router] \" + message));\n  }\n}\n\nfunction isError (err) {\n  return Object.prototype.toString.call(err).indexOf('Error') > -1\n}\n\nvar View = {\n  name: 'router-view',\n  functional: true,\n  props: {\n    name: {\n      type: String,\n      default: 'default'\n    }\n  },\n  render: function render (_, ref) {\n    var props = ref.props;\n    var children = ref.children;\n    var parent = ref.parent;\n    var data = ref.data;\n\n    data.routerView = true;\n\n    // directly use parent context's createElement() function\n    // so that components rendered by router-view can resolve named slots\n    var h = parent.$createElement;\n    var name = props.name;\n    var route = parent.$route;\n    var cache = parent._routerViewCache || (parent._routerViewCache = {});\n\n    // determine current view depth, also check to see if the tree\n    // has been toggled inactive but kept-alive.\n    var depth = 0;\n    var inactive = false;\n    while (parent && parent._routerRoot !== parent) {\n      if (parent.$vnode && parent.$vnode.data.routerView) {\n        depth++;\n      }\n      if (parent._inactive) {\n        inactive = true;\n      }\n      parent = parent.$parent;\n    }\n    data.routerViewDepth = depth;\n\n    // render previous view if the tree is inactive and kept-alive\n    if (inactive) {\n      return h(cache[name], data, children)\n    }\n\n    var matched = route.matched[depth];\n    // render empty node if no matched route\n    if (!matched) {\n      cache[name] = null;\n      return h()\n    }\n\n    var component = cache[name] = matched.components[name];\n\n    // attach instance registration hook\n    // this will be called in the instance's injected lifecycle hooks\n    data.registerRouteInstance = function (vm, val) {\n      // val could be undefined for unregistration\n      var current = matched.instances[name];\n      if (\n        (val && current !== vm) ||\n        (!val && current === vm)\n      ) {\n        matched.instances[name] = val;\n      }\n    }\n\n    // also regiseter instance in prepatch hook\n    // in case the same component instance is reused across different routes\n    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {\n      matched.instances[name] = vnode.componentInstance;\n    };\n\n    // resolve props\n    data.props = resolveProps(route, matched.props && matched.props[name]);\n\n    return h(component, data, children)\n  }\n};\n\nfunction resolveProps (route, config) {\n  switch (typeof config) {\n    case 'undefined':\n      return\n    case 'object':\n      return config\n    case 'function':\n      return config(route)\n    case 'boolean':\n      return config ? route.params : undefined\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        warn(\n          false,\n          \"props in \\\"\" + (route.path) + \"\\\" is a \" + (typeof config) + \", \" +\n          \"expecting an object, function or boolean.\"\n        );\n      }\n  }\n}\n\n/*  */\n\nvar encodeReserveRE = /[!'()*]/g;\nvar encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };\nvar commaRE = /%2C/g;\n\n// fixed encodeURIComponent which is more conformant to RFC3986:\n// - escapes [!'()*]\n// - preserve commas\nvar encode = function (str) { return encodeURIComponent(str)\n  .replace(encodeReserveRE, encodeReserveReplacer)\n  .replace(commaRE, ','); };\n\nvar decode = decodeURIComponent;\n\nfunction resolveQuery (\n  query,\n  extraQuery,\n  _parseQuery\n) {\n  if ( extraQuery === void 0 ) extraQuery = {};\n\n  var parse = _parseQuery || parseQuery;\n  var parsedQuery;\n  try {\n    parsedQuery = parse(query || '');\n  } catch (e) {\n    process.env.NODE_ENV !== 'production' && warn(false, e.message);\n    parsedQuery = {};\n  }\n  for (var key in extraQuery) {\n    var val = extraQuery[key];\n    parsedQuery[key] = Array.isArray(val) ? val.slice() : val;\n  }\n  return parsedQuery\n}\n\nfunction parseQuery (query) {\n  var res = {};\n\n  query = query.trim().replace(/^(\\?|#|&)/, '');\n\n  if (!query) {\n    return res\n  }\n\n  query.split('&').forEach(function (param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = decode(parts.shift());\n    var val = parts.length > 0\n      ? decode(parts.join('='))\n      : null;\n\n    if (res[key] === undefined) {\n      res[key] = val;\n    } else if (Array.isArray(res[key])) {\n      res[key].push(val);\n    } else {\n      res[key] = [res[key], val];\n    }\n  });\n\n  return res\n}\n\nfunction stringifyQuery (obj) {\n  var res = obj ? Object.keys(obj).map(function (key) {\n    var val = obj[key];\n\n    if (val === undefined) {\n      return ''\n    }\n\n    if (val === null) {\n      return encode(key)\n    }\n\n    if (Array.isArray(val)) {\n      var result = [];\n      val.forEach(function (val2) {\n        if (val2 === undefined) {\n          return\n        }\n        if (val2 === null) {\n          result.push(encode(key));\n        } else {\n          result.push(encode(key) + '=' + encode(val2));\n        }\n      });\n      return result.join('&')\n    }\n\n    return encode(key) + '=' + encode(val)\n  }).filter(function (x) { return x.length > 0; }).join('&') : null;\n  return res ? (\"?\" + res) : ''\n}\n\n/*  */\n\n\nvar trailingSlashRE = /\\/?$/;\n\nfunction createRoute (\n  record,\n  location,\n  redirectedFrom,\n  router\n) {\n  var stringifyQuery$$1 = router && router.options.stringifyQuery;\n  var route = {\n    name: location.name || (record && record.name),\n    meta: (record && record.meta) || {},\n    path: location.path || '/',\n    hash: location.hash || '',\n    query: location.query || {},\n    params: location.params || {},\n    fullPath: getFullPath(location, stringifyQuery$$1),\n    matched: record ? formatMatch(record) : []\n  };\n  if (redirectedFrom) {\n    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);\n  }\n  return Object.freeze(route)\n}\n\n// the starting route that represents the initial state\nvar START = createRoute(null, {\n  path: '/'\n});\n\nfunction formatMatch (record) {\n  var res = [];\n  while (record) {\n    res.unshift(record);\n    record = record.parent;\n  }\n  return res\n}\n\nfunction getFullPath (\n  ref,\n  _stringifyQuery\n) {\n  var path = ref.path;\n  var query = ref.query; if ( query === void 0 ) query = {};\n  var hash = ref.hash; if ( hash === void 0 ) hash = '';\n\n  var stringify = _stringifyQuery || stringifyQuery;\n  return (path || '/') + stringify(query) + hash\n}\n\nfunction isSameRoute (a, b) {\n  if (b === START) {\n    return a === b\n  } else if (!b) {\n    return false\n  } else if (a.path && b.path) {\n    return (\n      a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query)\n    )\n  } else if (a.name && b.name) {\n    return (\n      a.name === b.name &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query) &&\n      isObjectEqual(a.params, b.params)\n    )\n  } else {\n    return false\n  }\n}\n\nfunction isObjectEqual (a, b) {\n  if ( a === void 0 ) a = {};\n  if ( b === void 0 ) b = {};\n\n  var aKeys = Object.keys(a);\n  var bKeys = Object.keys(b);\n  if (aKeys.length !== bKeys.length) {\n    return false\n  }\n  return aKeys.every(function (key) {\n    var aVal = a[key];\n    var bVal = b[key];\n    // check nested equality\n    if (typeof aVal === 'object' && typeof bVal === 'object') {\n      return isObjectEqual(aVal, bVal)\n    }\n    return String(aVal) === String(bVal)\n  })\n}\n\nfunction isIncludedRoute (current, target) {\n  return (\n    current.path.replace(trailingSlashRE, '/').indexOf(\n      target.path.replace(trailingSlashRE, '/')\n    ) === 0 &&\n    (!target.hash || current.hash === target.hash) &&\n    queryIncludes(current.query, target.query)\n  )\n}\n\nfunction queryIncludes (current, target) {\n  for (var key in target) {\n    if (!(key in current)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*  */\n\n// work around weird flow bug\nvar toTypes = [String, Object];\nvar eventTypes = [String, Array];\n\nvar Link = {\n  name: 'router-link',\n  props: {\n    to: {\n      type: toTypes,\n      required: true\n    },\n    tag: {\n      type: String,\n      default: 'a'\n    },\n    exact: Boolean,\n    append: Boolean,\n    replace: Boolean,\n    activeClass: String,\n    exactActiveClass: String,\n    event: {\n      type: eventTypes,\n      default: 'click'\n    }\n  },\n  render: function render (h) {\n    var this$1 = this;\n\n    var router = this.$router;\n    var current = this.$route;\n    var ref = router.resolve(this.to, current, this.append);\n    var location = ref.location;\n    var route = ref.route;\n    var href = ref.href;\n\n    var classes = {};\n    var globalActiveClass = router.options.linkActiveClass;\n    var globalExactActiveClass = router.options.linkExactActiveClass;\n    // Support global empty active class\n    var activeClassFallback = globalActiveClass == null\n            ? 'router-link-active'\n            : globalActiveClass;\n    var exactActiveClassFallback = globalExactActiveClass == null\n            ? 'router-link-exact-active'\n            : globalExactActiveClass;\n    var activeClass = this.activeClass == null\n            ? activeClassFallback\n            : this.activeClass;\n    var exactActiveClass = this.exactActiveClass == null\n            ? exactActiveClassFallback\n            : this.exactActiveClass;\n    var compareTarget = location.path\n      ? createRoute(null, location, null, router)\n      : route;\n\n    classes[exactActiveClass] = isSameRoute(current, compareTarget);\n    classes[activeClass] = this.exact\n      ? classes[exactActiveClass]\n      : isIncludedRoute(current, compareTarget);\n\n    var handler = function (e) {\n      if (guardEvent(e)) {\n        if (this$1.replace) {\n          router.replace(location);\n        } else {\n          router.push(location);\n        }\n      }\n    };\n\n    var on = { click: guardEvent };\n    if (Array.isArray(this.event)) {\n      this.event.forEach(function (e) { on[e] = handler; });\n    } else {\n      on[this.event] = handler;\n    }\n\n    var data = {\n      class: classes\n    };\n\n    if (this.tag === 'a') {\n      data.on = on;\n      data.attrs = { href: href };\n    } else {\n      // find the first <a> child and apply listener and href\n      var a = findAnchor(this.$slots.default);\n      if (a) {\n        // in case the <a> is a static node\n        a.isStatic = false;\n        var extend = _Vue.util.extend;\n        var aData = a.data = extend({}, a.data);\n        aData.on = on;\n        var aAttrs = a.data.attrs = extend({}, a.data.attrs);\n        aAttrs.href = href;\n      } else {\n        // doesn't have <a> child, apply listener to self\n        data.on = on;\n      }\n    }\n\n    return h(this.tag, data, this.$slots.default)\n  }\n};\n\nfunction guardEvent (e) {\n  // don't redirect with control keys\n  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) { return }\n  // don't redirect when preventDefault called\n  if (e.defaultPrevented) { return }\n  // don't redirect on right click\n  if (e.button !== undefined && e.button !== 0) { return }\n  // don't redirect if `target=\"_blank\"`\n  if (e.currentTarget && e.currentTarget.getAttribute) {\n    var target = e.currentTarget.getAttribute('target');\n    if (/\\b_blank\\b/i.test(target)) { return }\n  }\n  // this may be a Weex event which doesn't have this method\n  if (e.preventDefault) {\n    e.preventDefault();\n  }\n  return true\n}\n\nfunction findAnchor (children) {\n  if (children) {\n    var child;\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      if (child.tag === 'a') {\n        return child\n      }\n      if (child.children && (child = findAnchor(child.children))) {\n        return child\n      }\n    }\n  }\n}\n\nvar _Vue;\n\nfunction install (Vue) {\n  if (install.installed) { return }\n  install.installed = true;\n\n  _Vue = Vue;\n\n  var isDef = function (v) { return v !== undefined; };\n\n  var registerInstance = function (vm, callVal) {\n    var i = vm.$options._parentVnode;\n    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {\n      i(vm, callVal);\n    }\n  };\n\n  Vue.mixin({\n    beforeCreate: function beforeCreate () {\n      if (isDef(this.$options.router)) {\n        this._routerRoot = this;\n        this._router = this.$options.router;\n        this._router.init(this);\n        Vue.util.defineReactive(this, '_route', this._router.history.current);\n      } else {\n        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this;\n      }\n      registerInstance(this, this);\n    },\n    destroyed: function destroyed () {\n      registerInstance(this);\n    }\n  });\n\n  Object.defineProperty(Vue.prototype, '$router', {\n    get: function get () { return this._routerRoot._router }\n  });\n\n  Object.defineProperty(Vue.prototype, '$route', {\n    get: function get () { return this._routerRoot._route }\n  });\n\n  Vue.component('router-view', View);\n  Vue.component('router-link', Link);\n\n  var strats = Vue.config.optionMergeStrategies;\n  // use the same hook merging strategy for route hooks\n  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;\n}\n\n/*  */\n\nvar inBrowser = typeof window !== 'undefined';\n\n/*  */\n\nfunction resolvePath (\n  relative,\n  base,\n  append\n) {\n  var firstChar = relative.charAt(0);\n  if (firstChar === '/') {\n    return relative\n  }\n\n  if (firstChar === '?' || firstChar === '#') {\n    return base + relative\n  }\n\n  var stack = base.split('/');\n\n  // remove trailing segment if:\n  // - not appending\n  // - appending to trailing slash (last segment is empty)\n  if (!append || !stack[stack.length - 1]) {\n    stack.pop();\n  }\n\n  // resolve relative path\n  var segments = relative.replace(/^\\//, '').split('/');\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    if (segment === '..') {\n      stack.pop();\n    } else if (segment !== '.') {\n      stack.push(segment);\n    }\n  }\n\n  // ensure leading slash\n  if (stack[0] !== '') {\n    stack.unshift('');\n  }\n\n  return stack.join('/')\n}\n\nfunction parsePath (path) {\n  var hash = '';\n  var query = '';\n\n  var hashIndex = path.indexOf('#');\n  if (hashIndex >= 0) {\n    hash = path.slice(hashIndex);\n    path = path.slice(0, hashIndex);\n  }\n\n  var queryIndex = path.indexOf('?');\n  if (queryIndex >= 0) {\n    query = path.slice(queryIndex + 1);\n    path = path.slice(0, queryIndex);\n  }\n\n  return {\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction cleanPath (path) {\n  return path.replace(/\\/\\//g, '/')\n}\n\nvar index$1 = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n/**\n * Expose `pathToRegexp`.\n */\nvar index = pathToRegexp;\nvar parse_1 = parse;\nvar compile_1 = compile;\nvar tokensToFunction_1 = tokensToFunction;\nvar tokensToRegExp_1 = tokensToRegExp;\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g');\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || '/';\n  var res;\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length;\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1];\n      continue\n    }\n\n    var next = str[index];\n    var prefix = res[2];\n    var name = res[3];\n    var capture = res[4];\n    var group = res[5];\n    var modifier = res[6];\n    var asterisk = res[7];\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path);\n      path = '';\n    }\n\n    var partial = prefix != null && next != null && next !== prefix;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = res[2] || defaultDelimiter;\n    var pattern = capture || group;\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    });\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index);\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path);\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length);\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');\n    }\n  }\n\n  return function (obj, opts) {\n    var path = '';\n    var data = obj || {};\n    var options = opts || {};\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n\n        continue\n      }\n\n      var value = data[token.name];\n      var segment;\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix;\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (index$1(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j]);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value);\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment;\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys;\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      });\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!index$1(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  var strict = options.strict;\n  var end = options.end !== false;\n  var route = '';\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (typeof token === 'string') {\n      route += escapeString(token);\n    } else {\n      var prefix = escapeString(token.prefix);\n      var capture = '(?:' + token.pattern + ')';\n\n      keys.push(token);\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*';\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?';\n        } else {\n          capture = prefix + '(' + capture + ')?';\n        }\n      } else {\n        capture = prefix + '(' + capture + ')';\n      }\n\n      route += capture;\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/');\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';\n  }\n\n  if (end) {\n    route += '$';\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!index$1(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (index$1(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n\nindex.parse = parse_1;\nindex.compile = compile_1;\nindex.tokensToFunction = tokensToFunction_1;\nindex.tokensToRegExp = tokensToRegExp_1;\n\n/*  */\n\nvar regexpCompileCache = Object.create(null);\n\nfunction fillParams (\n  path,\n  params,\n  routeMsg\n) {\n  try {\n    var filler =\n      regexpCompileCache[path] ||\n      (regexpCompileCache[path] = index.compile(path));\n    return filler(params || {}, { pretty: true })\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn(false, (\"missing param for \" + routeMsg + \": \" + (e.message)));\n    }\n    return ''\n  }\n}\n\n/*  */\n\nfunction createRouteMap (\n  routes,\n  oldPathList,\n  oldPathMap,\n  oldNameMap\n) {\n  // the path list is used to control path matching priority\n  var pathList = oldPathList || [];\n  var pathMap = oldPathMap || Object.create(null);\n  var nameMap = oldNameMap || Object.create(null);\n\n  routes.forEach(function (route) {\n    addRouteRecord(pathList, pathMap, nameMap, route);\n  });\n\n  // ensure wildcard routes are always at the end\n  for (var i = 0, l = pathList.length; i < l; i++) {\n    if (pathList[i] === '*') {\n      pathList.push(pathList.splice(i, 1)[0]);\n      l--;\n      i--;\n    }\n  }\n\n  return {\n    pathList: pathList,\n    pathMap: pathMap,\n    nameMap: nameMap\n  }\n}\n\nfunction addRouteRecord (\n  pathList,\n  pathMap,\n  nameMap,\n  route,\n  parent,\n  matchAs\n) {\n  var path = route.path;\n  var name = route.name;\n  if (process.env.NODE_ENV !== 'production') {\n    assert(path != null, \"\\\"path\\\" is required in a route configuration.\");\n    assert(\n      typeof route.component !== 'string',\n      \"route config \\\"component\\\" for path: \" + (String(path || name)) + \" cannot be a \" +\n      \"string id. Use an actual component instead.\"\n    );\n  }\n\n  var normalizedPath = normalizePath(path, parent);\n  var pathToRegexpOptions = route.pathToRegexpOptions || {};\n\n  if (typeof route.caseSensitive === 'boolean') {\n    pathToRegexpOptions.sensitive = route.caseSensitive;\n  }\n\n  var record = {\n    path: normalizedPath,\n    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),\n    components: route.components || { default: route.component },\n    instances: {},\n    name: name,\n    parent: parent,\n    matchAs: matchAs,\n    redirect: route.redirect,\n    beforeEnter: route.beforeEnter,\n    meta: route.meta || {},\n    props: route.props == null\n      ? {}\n      : route.components\n        ? route.props\n        : { default: route.props }\n  };\n\n  if (route.children) {\n    // Warn if route is named, does not redirect and has a default child route.\n    // If users navigate to this route by name, the default child will\n    // not be rendered (GH Issue #629)\n    if (process.env.NODE_ENV !== 'production') {\n      if (route.name && !route.redirect && route.children.some(function (child) { return /^\\/?$/.test(child.path); })) {\n        warn(\n          false,\n          \"Named Route '\" + (route.name) + \"' has a default child route. \" +\n          \"When navigating to this named route (:to=\\\"{name: '\" + (route.name) + \"'\\\"), \" +\n          \"the default child route will not be rendered. Remove the name from \" +\n          \"this route and use the name of the default child route for named \" +\n          \"links instead.\"\n        );\n      }\n    }\n    route.children.forEach(function (child) {\n      var childMatchAs = matchAs\n        ? cleanPath((matchAs + \"/\" + (child.path)))\n        : undefined;\n      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);\n    });\n  }\n\n  if (route.alias !== undefined) {\n    var aliases = Array.isArray(route.alias)\n      ? route.alias\n      : [route.alias];\n\n    aliases.forEach(function (alias) {\n      var aliasRoute = {\n        path: alias,\n        children: route.children\n      };\n      addRouteRecord(\n        pathList,\n        pathMap,\n        nameMap,\n        aliasRoute,\n        parent,\n        record.path || '/' // matchAs\n      );\n    });\n  }\n\n  if (!pathMap[record.path]) {\n    pathList.push(record.path);\n    pathMap[record.path] = record;\n  }\n\n  if (name) {\n    if (!nameMap[name]) {\n      nameMap[name] = record;\n    } else if (process.env.NODE_ENV !== 'production' && !matchAs) {\n      warn(\n        false,\n        \"Duplicate named routes definition: \" +\n        \"{ name: \\\"\" + name + \"\\\", path: \\\"\" + (record.path) + \"\\\" }\"\n      );\n    }\n  }\n}\n\nfunction compileRouteRegex (path, pathToRegexpOptions) {\n  var regex = index(path, [], pathToRegexpOptions);\n  if (process.env.NODE_ENV !== 'production') {\n    var keys = {};\n    regex.keys.forEach(function (key) {\n      warn(!keys[key.name], (\"Duplicate param keys in route with path: \\\"\" + path + \"\\\"\"));\n      keys[key.name] = true;\n    });\n  }\n  return regex\n}\n\nfunction normalizePath (path, parent) {\n  path = path.replace(/\\/$/, '');\n  if (path[0] === '/') { return path }\n  if (parent == null) { return path }\n  return cleanPath(((parent.path) + \"/\" + path))\n}\n\n/*  */\n\n\nfunction normalizeLocation (\n  raw,\n  current,\n  append,\n  router\n) {\n  var next = typeof raw === 'string' ? { path: raw } : raw;\n  // named target\n  if (next.name || next._normalized) {\n    return next\n  }\n\n  // relative params\n  if (!next.path && next.params && current) {\n    next = assign({}, next);\n    next._normalized = true;\n    var params = assign(assign({}, current.params), next.params);\n    if (current.name) {\n      next.name = current.name;\n      next.params = params;\n    } else if (current.matched.length) {\n      var rawPath = current.matched[current.matched.length - 1].path;\n      next.path = fillParams(rawPath, params, (\"path \" + (current.path)));\n    } else if (process.env.NODE_ENV !== 'production') {\n      warn(false, \"relative params navigation requires a current route.\");\n    }\n    return next\n  }\n\n  var parsedPath = parsePath(next.path || '');\n  var basePath = (current && current.path) || '/';\n  var path = parsedPath.path\n    ? resolvePath(parsedPath.path, basePath, append || next.append)\n    : basePath;\n\n  var query = resolveQuery(\n    parsedPath.query,\n    next.query,\n    router && router.options.parseQuery\n  );\n\n  var hash = next.hash || parsedPath.hash;\n  if (hash && hash.charAt(0) !== '#') {\n    hash = \"#\" + hash;\n  }\n\n  return {\n    _normalized: true,\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction assign (a, b) {\n  for (var key in b) {\n    a[key] = b[key];\n  }\n  return a\n}\n\n/*  */\n\n\nfunction createMatcher (\n  routes,\n  router\n) {\n  var ref = createRouteMap(routes);\n  var pathList = ref.pathList;\n  var pathMap = ref.pathMap;\n  var nameMap = ref.nameMap;\n\n  function addRoutes (routes) {\n    createRouteMap(routes, pathList, pathMap, nameMap);\n  }\n\n  function match (\n    raw,\n    currentRoute,\n    redirectedFrom\n  ) {\n    var location = normalizeLocation(raw, currentRoute, false, router);\n    var name = location.name;\n\n    if (name) {\n      var record = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        warn(record, (\"Route with name '\" + name + \"' does not exist\"));\n      }\n      if (!record) { return _createRoute(null, location) }\n      var paramNames = record.regex.keys\n        .filter(function (key) { return !key.optional; })\n        .map(function (key) { return key.name; });\n\n      if (typeof location.params !== 'object') {\n        location.params = {};\n      }\n\n      if (currentRoute && typeof currentRoute.params === 'object') {\n        for (var key in currentRoute.params) {\n          if (!(key in location.params) && paramNames.indexOf(key) > -1) {\n            location.params[key] = currentRoute.params[key];\n          }\n        }\n      }\n\n      if (record) {\n        location.path = fillParams(record.path, location.params, (\"named route \\\"\" + name + \"\\\"\"));\n        return _createRoute(record, location, redirectedFrom)\n      }\n    } else if (location.path) {\n      location.params = {};\n      for (var i = 0; i < pathList.length; i++) {\n        var path = pathList[i];\n        var record$1 = pathMap[path];\n        if (matchRoute(record$1.regex, location.path, location.params)) {\n          return _createRoute(record$1, location, redirectedFrom)\n        }\n      }\n    }\n    // no match\n    return _createRoute(null, location)\n  }\n\n  function redirect (\n    record,\n    location\n  ) {\n    var originalRedirect = record.redirect;\n    var redirect = typeof originalRedirect === 'function'\n        ? originalRedirect(createRoute(record, location, null, router))\n        : originalRedirect;\n\n    if (typeof redirect === 'string') {\n      redirect = { path: redirect };\n    }\n\n    if (!redirect || typeof redirect !== 'object') {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(\n          false, (\"invalid redirect option: \" + (JSON.stringify(redirect)))\n        );\n      }\n      return _createRoute(null, location)\n    }\n\n    var re = redirect;\n    var name = re.name;\n    var path = re.path;\n    var query = location.query;\n    var hash = location.hash;\n    var params = location.params;\n    query = re.hasOwnProperty('query') ? re.query : query;\n    hash = re.hasOwnProperty('hash') ? re.hash : hash;\n    params = re.hasOwnProperty('params') ? re.params : params;\n\n    if (name) {\n      // resolved named direct\n      var targetRecord = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        assert(targetRecord, (\"redirect failed: named route \\\"\" + name + \"\\\" not found.\"));\n      }\n      return match({\n        _normalized: true,\n        name: name,\n        query: query,\n        hash: hash,\n        params: params\n      }, undefined, location)\n    } else if (path) {\n      // 1. resolve relative redirect\n      var rawPath = resolveRecordPath(path, record);\n      // 2. resolve params\n      var resolvedPath = fillParams(rawPath, params, (\"redirect route with path \\\"\" + rawPath + \"\\\"\"));\n      // 3. rematch with existing query and hash\n      return match({\n        _normalized: true,\n        path: resolvedPath,\n        query: query,\n        hash: hash\n      }, undefined, location)\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(false, (\"invalid redirect option: \" + (JSON.stringify(redirect))));\n      }\n      return _createRoute(null, location)\n    }\n  }\n\n  function alias (\n    record,\n    location,\n    matchAs\n  ) {\n    var aliasedPath = fillParams(matchAs, location.params, (\"aliased route with path \\\"\" + matchAs + \"\\\"\"));\n    var aliasedMatch = match({\n      _normalized: true,\n      path: aliasedPath\n    });\n    if (aliasedMatch) {\n      var matched = aliasedMatch.matched;\n      var aliasedRecord = matched[matched.length - 1];\n      location.params = aliasedMatch.params;\n      return _createRoute(aliasedRecord, location)\n    }\n    return _createRoute(null, location)\n  }\n\n  function _createRoute (\n    record,\n    location,\n    redirectedFrom\n  ) {\n    if (record && record.redirect) {\n      return redirect(record, redirectedFrom || location)\n    }\n    if (record && record.matchAs) {\n      return alias(record, location, record.matchAs)\n    }\n    return createRoute(record, location, redirectedFrom, router)\n  }\n\n  return {\n    match: match,\n    addRoutes: addRoutes\n  }\n}\n\nfunction matchRoute (\n  regex,\n  path,\n  params\n) {\n  var m = path.match(regex);\n\n  if (!m) {\n    return false\n  } else if (!params) {\n    return true\n  }\n\n  for (var i = 1, len = m.length; i < len; ++i) {\n    var key = regex.keys[i - 1];\n    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];\n    if (key) {\n      params[key.name] = val;\n    }\n  }\n\n  return true\n}\n\nfunction resolveRecordPath (path, record) {\n  return resolvePath(path, record.parent ? record.parent.path : '/', true)\n}\n\n/*  */\n\n\nvar positionStore = Object.create(null);\n\nfunction setupScroll () {\n  window.addEventListener('popstate', function (e) {\n    saveScrollPosition();\n    if (e.state && e.state.key) {\n      setStateKey(e.state.key);\n    }\n  });\n}\n\nfunction handleScroll (\n  router,\n  to,\n  from,\n  isPop\n) {\n  if (!router.app) {\n    return\n  }\n\n  var behavior = router.options.scrollBehavior;\n  if (!behavior) {\n    return\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(typeof behavior === 'function', \"scrollBehavior must be a function\");\n  }\n\n  // wait until re-render finishes before scrolling\n  router.app.$nextTick(function () {\n    var position = getScrollPosition();\n    var shouldScroll = behavior(to, from, isPop ? position : null);\n    if (!shouldScroll) {\n      return\n    }\n    var isObject = typeof shouldScroll === 'object';\n    if (isObject && typeof shouldScroll.selector === 'string') {\n      var el = document.querySelector(shouldScroll.selector);\n      if (el) {\n        var offset = shouldScroll.offset && typeof shouldScroll.offset === 'object' ? shouldScroll.offset : {};\n        offset = normalizeOffset(offset);\n        position = getElementPosition(el, offset);\n      } else if (isValidPosition(shouldScroll)) {\n        position = normalizePosition(shouldScroll);\n      }\n    } else if (isObject && isValidPosition(shouldScroll)) {\n      position = normalizePosition(shouldScroll);\n    }\n\n    if (position) {\n      window.scrollTo(position.x, position.y);\n    }\n  });\n}\n\nfunction saveScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    positionStore[key] = {\n      x: window.pageXOffset,\n      y: window.pageYOffset\n    };\n  }\n}\n\nfunction getScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    return positionStore[key]\n  }\n}\n\nfunction getElementPosition (el, offset) {\n  var docEl = document.documentElement;\n  var docRect = docEl.getBoundingClientRect();\n  var elRect = el.getBoundingClientRect();\n  return {\n    x: elRect.left - docRect.left - offset.x,\n    y: elRect.top - docRect.top - offset.y\n  }\n}\n\nfunction isValidPosition (obj) {\n  return isNumber(obj.x) || isNumber(obj.y)\n}\n\nfunction normalizePosition (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : window.pageXOffset,\n    y: isNumber(obj.y) ? obj.y : window.pageYOffset\n  }\n}\n\nfunction normalizeOffset (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : 0,\n    y: isNumber(obj.y) ? obj.y : 0\n  }\n}\n\nfunction isNumber (v) {\n  return typeof v === 'number'\n}\n\n/*  */\n\nvar supportsPushState = inBrowser && (function () {\n  var ua = window.navigator.userAgent;\n\n  if (\n    (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&\n    ua.indexOf('Mobile Safari') !== -1 &&\n    ua.indexOf('Chrome') === -1 &&\n    ua.indexOf('Windows Phone') === -1\n  ) {\n    return false\n  }\n\n  return window.history && 'pushState' in window.history\n})();\n\n// use User Timing api (if present) for more accurate key precision\nvar Time = inBrowser && window.performance && window.performance.now\n  ? window.performance\n  : Date;\n\nvar _key = genKey();\n\nfunction genKey () {\n  return Time.now().toFixed(3)\n}\n\nfunction getStateKey () {\n  return _key\n}\n\nfunction setStateKey (key) {\n  _key = key;\n}\n\nfunction pushState (url, replace) {\n  saveScrollPosition();\n  // try...catch the pushState call to get around Safari\n  // DOM Exception 18 where it limits to 100 pushState calls\n  var history = window.history;\n  try {\n    if (replace) {\n      history.replaceState({ key: _key }, '', url);\n    } else {\n      _key = genKey();\n      history.pushState({ key: _key }, '', url);\n    }\n  } catch (e) {\n    window.location[replace ? 'replace' : 'assign'](url);\n  }\n}\n\nfunction replaceState (url) {\n  pushState(url, true);\n}\n\n/*  */\n\nfunction runQueue (queue, fn, cb) {\n  var step = function (index) {\n    if (index >= queue.length) {\n      cb();\n    } else {\n      if (queue[index]) {\n        fn(queue[index], function () {\n          step(index + 1);\n        });\n      } else {\n        step(index + 1);\n      }\n    }\n  };\n  step(0);\n}\n\n/*  */\n\nfunction resolveAsyncComponents (matched) {\n  return function (to, from, next) {\n    var hasAsync = false;\n    var pending = 0;\n    var error = null;\n\n    flatMapComponents(matched, function (def, _, match, key) {\n      // if it's a function and doesn't have cid attached,\n      // assume it's an async component resolve function.\n      // we are not using Vue's default async resolving mechanism because\n      // we want to halt the navigation until the incoming component has been\n      // resolved.\n      if (typeof def === 'function' && def.cid === undefined) {\n        hasAsync = true;\n        pending++;\n\n        var resolve = once(function (resolvedDef) {\n          if (resolvedDef.__esModule && resolvedDef.default) {\n            resolvedDef = resolvedDef.default;\n          }\n          // save resolved on async factory in case it's used elsewhere\n          def.resolved = typeof resolvedDef === 'function'\n            ? resolvedDef\n            : _Vue.extend(resolvedDef);\n          match.components[key] = resolvedDef;\n          pending--;\n          if (pending <= 0) {\n            next();\n          }\n        });\n\n        var reject = once(function (reason) {\n          var msg = \"Failed to resolve async component \" + key + \": \" + reason;\n          process.env.NODE_ENV !== 'production' && warn(false, msg);\n          if (!error) {\n            error = isError(reason)\n              ? reason\n              : new Error(msg);\n            next(error);\n          }\n        });\n\n        var res;\n        try {\n          res = def(resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n        if (res) {\n          if (typeof res.then === 'function') {\n            res.then(resolve, reject);\n          } else {\n            // new syntax in Vue 2.3\n            var comp = res.component;\n            if (comp && typeof comp.then === 'function') {\n              comp.then(resolve, reject);\n            }\n          }\n        }\n      }\n    });\n\n    if (!hasAsync) { next(); }\n  }\n}\n\nfunction flatMapComponents (\n  matched,\n  fn\n) {\n  return flatten(matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) { return fn(\n      m.components[key],\n      m.instances[key],\n      m, key\n    ); })\n  }))\n}\n\nfunction flatten (arr) {\n  return Array.prototype.concat.apply([], arr)\n}\n\n// in Webpack 2, require.ensure now also returns a Promise\n// so the resolve/reject functions may get called an extra time\n// if the user uses an arrow function shorthand that happens to\n// return that Promise.\nfunction once (fn) {\n  var called = false;\n  return function () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    if (called) { return }\n    called = true;\n    return fn.apply(this, args)\n  }\n}\n\n/*  */\n\nvar History = function History (router, base) {\n  this.router = router;\n  this.base = normalizeBase(base);\n  // start with a route object that stands for \"nowhere\"\n  this.current = START;\n  this.pending = null;\n  this.ready = false;\n  this.readyCbs = [];\n  this.readyErrorCbs = [];\n  this.errorCbs = [];\n};\n\nHistory.prototype.listen = function listen (cb) {\n  this.cb = cb;\n};\n\nHistory.prototype.onReady = function onReady (cb, errorCb) {\n  if (this.ready) {\n    cb();\n  } else {\n    this.readyCbs.push(cb);\n    if (errorCb) {\n      this.readyErrorCbs.push(errorCb);\n    }\n  }\n};\n\nHistory.prototype.onError = function onError (errorCb) {\n  this.errorCbs.push(errorCb);\n};\n\nHistory.prototype.transitionTo = function transitionTo (location, onComplete, onAbort) {\n    var this$1 = this;\n\n  var route = this.router.match(location, this.current);\n  this.confirmTransition(route, function () {\n    this$1.updateRoute(route);\n    onComplete && onComplete(route);\n    this$1.ensureURL();\n\n    // fire ready cbs once\n    if (!this$1.ready) {\n      this$1.ready = true;\n      this$1.readyCbs.forEach(function (cb) { cb(route); });\n    }\n  }, function (err) {\n    if (onAbort) {\n      onAbort(err);\n    }\n    if (err && !this$1.ready) {\n      this$1.ready = true;\n      this$1.readyErrorCbs.forEach(function (cb) { cb(err); });\n    }\n  });\n};\n\nHistory.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {\n    var this$1 = this;\n\n  var current = this.current;\n  var abort = function (err) {\n    if (isError(err)) {\n      if (this$1.errorCbs.length) {\n        this$1.errorCbs.forEach(function (cb) { cb(err); });\n      } else {\n        warn(false, 'uncaught error during route navigation:');\n        console.error(err);\n      }\n    }\n    onAbort && onAbort(err);\n  };\n  if (\n    isSameRoute(route, current) &&\n    // in the case the route map has been dynamically appended to\n    route.matched.length === current.matched.length\n  ) {\n    this.ensureURL();\n    return abort()\n  }\n\n  var ref = resolveQueue(this.current.matched, route.matched);\n    var updated = ref.updated;\n    var deactivated = ref.deactivated;\n    var activated = ref.activated;\n\n  var queue = [].concat(\n    // in-component leave guards\n    extractLeaveGuards(deactivated),\n    // global before hooks\n    this.router.beforeHooks,\n    // in-component update hooks\n    extractUpdateHooks(updated),\n    // in-config enter guards\n    activated.map(function (m) { return m.beforeEnter; }),\n    // async components\n    resolveAsyncComponents(activated)\n  );\n\n  this.pending = route;\n  var iterator = function (hook, next) {\n    if (this$1.pending !== route) {\n      return abort()\n    }\n    try {\n      hook(route, current, function (to) {\n        if (to === false || isError(to)) {\n          // next(false) -> abort navigation, ensure current URL\n          this$1.ensureURL(true);\n          abort(to);\n        } else if (\n          typeof to === 'string' ||\n          (typeof to === 'object' && (\n            typeof to.path === 'string' ||\n            typeof to.name === 'string'\n          ))\n        ) {\n          // next('/') or next({ path: '/' }) -> redirect\n          abort();\n          if (typeof to === 'object' && to.replace) {\n            this$1.replace(to);\n          } else {\n            this$1.push(to);\n          }\n        } else {\n          // confirm transition and pass on the value\n          next(to);\n        }\n      });\n    } catch (e) {\n      abort(e);\n    }\n  };\n\n  runQueue(queue, iterator, function () {\n    var postEnterCbs = [];\n    var isValid = function () { return this$1.current === route; };\n    // wait until async components are resolved before\n    // extracting in-component enter guards\n    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);\n    var queue = enterGuards.concat(this$1.router.resolveHooks);\n    runQueue(queue, iterator, function () {\n      if (this$1.pending !== route) {\n        return abort()\n      }\n      this$1.pending = null;\n      onComplete(route);\n      if (this$1.router.app) {\n        this$1.router.app.$nextTick(function () {\n          postEnterCbs.forEach(function (cb) { cb(); });\n        });\n      }\n    });\n  });\n};\n\nHistory.prototype.updateRoute = function updateRoute (route) {\n  var prev = this.current;\n  this.current = route;\n  this.cb && this.cb(route);\n  this.router.afterHooks.forEach(function (hook) {\n    hook && hook(route, prev);\n  });\n};\n\nfunction normalizeBase (base) {\n  if (!base) {\n    if (inBrowser) {\n      // respect <base> tag\n      var baseEl = document.querySelector('base');\n      base = (baseEl && baseEl.getAttribute('href')) || '/';\n      // strip full URL origin\n      base = base.replace(/^https?:\\/\\/[^\\/]+/, '');\n    } else {\n      base = '/';\n    }\n  }\n  // make sure there's the starting slash\n  if (base.charAt(0) !== '/') {\n    base = '/' + base;\n  }\n  // remove trailing slash\n  return base.replace(/\\/$/, '')\n}\n\nfunction resolveQueue (\n  current,\n  next\n) {\n  var i;\n  var max = Math.max(current.length, next.length);\n  for (i = 0; i < max; i++) {\n    if (current[i] !== next[i]) {\n      break\n    }\n  }\n  return {\n    updated: next.slice(0, i),\n    activated: next.slice(i),\n    deactivated: current.slice(i)\n  }\n}\n\nfunction extractGuards (\n  records,\n  name,\n  bind,\n  reverse\n) {\n  var guards = flatMapComponents(records, function (def, instance, match, key) {\n    var guard = extractGuard(def, name);\n    if (guard) {\n      return Array.isArray(guard)\n        ? guard.map(function (guard) { return bind(guard, instance, match, key); })\n        : bind(guard, instance, match, key)\n    }\n  });\n  return flatten(reverse ? guards.reverse() : guards)\n}\n\nfunction extractGuard (\n  def,\n  key\n) {\n  if (typeof def !== 'function') {\n    // extend now so that global mixins are applied.\n    def = _Vue.extend(def);\n  }\n  return def.options[key]\n}\n\nfunction extractLeaveGuards (deactivated) {\n  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)\n}\n\nfunction extractUpdateHooks (updated) {\n  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)\n}\n\nfunction bindGuard (guard, instance) {\n  if (instance) {\n    return function boundRouteGuard () {\n      return guard.apply(instance, arguments)\n    }\n  }\n}\n\nfunction extractEnterGuards (\n  activated,\n  cbs,\n  isValid\n) {\n  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {\n    return bindEnterGuard(guard, match, key, cbs, isValid)\n  })\n}\n\nfunction bindEnterGuard (\n  guard,\n  match,\n  key,\n  cbs,\n  isValid\n) {\n  return function routeEnterGuard (to, from, next) {\n    return guard(to, from, function (cb) {\n      next(cb);\n      if (typeof cb === 'function') {\n        cbs.push(function () {\n          // #750\n          // if a router-view is wrapped with an out-in transition,\n          // the instance may not have been registered at this time.\n          // we will need to poll for registration until current route\n          // is no longer valid.\n          poll(cb, match.instances, key, isValid);\n        });\n      }\n    })\n  }\n}\n\nfunction poll (\n  cb, // somehow flow cannot infer this is a function\n  instances,\n  key,\n  isValid\n) {\n  if (instances[key]) {\n    cb(instances[key]);\n  } else if (isValid()) {\n    setTimeout(function () {\n      poll(cb, instances, key, isValid);\n    }, 16);\n  }\n}\n\n/*  */\n\n\nvar HTML5History = (function (History$$1) {\n  function HTML5History (router, base) {\n    var this$1 = this;\n\n    History$$1.call(this, router, base);\n\n    var expectScroll = router.options.scrollBehavior;\n\n    if (expectScroll) {\n      setupScroll();\n    }\n\n    window.addEventListener('popstate', function (e) {\n      var current = this$1.current;\n      this$1.transitionTo(getLocation(this$1.base), function (route) {\n        if (expectScroll) {\n          handleScroll(router, route, current, true);\n        }\n      });\n    });\n  }\n\n  if ( History$$1 ) HTML5History.__proto__ = History$$1;\n  HTML5History.prototype = Object.create( History$$1 && History$$1.prototype );\n  HTML5History.prototype.constructor = HTML5History;\n\n  HTML5History.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HTML5History.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      pushState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      replaceState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.ensureURL = function ensureURL (push) {\n    if (getLocation(this.base) !== this.current.fullPath) {\n      var current = cleanPath(this.base + this.current.fullPath);\n      push ? pushState(current) : replaceState(current);\n    }\n  };\n\n  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getLocation(this.base)\n  };\n\n  return HTML5History;\n}(History));\n\nfunction getLocation (base) {\n  var path = window.location.pathname;\n  if (base && path.indexOf(base) === 0) {\n    path = path.slice(base.length);\n  }\n  return (path || '/') + window.location.search + window.location.hash\n}\n\n/*  */\n\n\nvar HashHistory = (function (History$$1) {\n  function HashHistory (router, base, fallback) {\n    History$$1.call(this, router, base);\n    // check history fallback deeplinking\n    if (fallback && checkFallback(this.base)) {\n      return\n    }\n    ensureSlash();\n  }\n\n  if ( History$$1 ) HashHistory.__proto__ = History$$1;\n  HashHistory.prototype = Object.create( History$$1 && History$$1.prototype );\n  HashHistory.prototype.constructor = HashHistory;\n\n  // this is delayed until the app mounts\n  // to avoid the hashchange listener being fired too early\n  HashHistory.prototype.setupListeners = function setupListeners () {\n    var this$1 = this;\n\n    window.addEventListener('hashchange', function () {\n      if (!ensureSlash()) {\n        return\n      }\n      this$1.transitionTo(getHash(), function (route) {\n        replaceHash(route.fullPath);\n      });\n    });\n  };\n\n  HashHistory.prototype.push = function push (location, onComplete, onAbort) {\n    this.transitionTo(location, function (route) {\n      pushHash(route.fullPath);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    this.transitionTo(location, function (route) {\n      replaceHash(route.fullPath);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HashHistory.prototype.ensureURL = function ensureURL (push) {\n    var current = this.current.fullPath;\n    if (getHash() !== current) {\n      push ? pushHash(current) : replaceHash(current);\n    }\n  };\n\n  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getHash()\n  };\n\n  return HashHistory;\n}(History));\n\nfunction checkFallback (base) {\n  var location = getLocation(base);\n  if (!/^\\/#/.test(location)) {\n    window.location.replace(\n      cleanPath(base + '/#' + location)\n    );\n    return true\n  }\n}\n\nfunction ensureSlash () {\n  var path = getHash();\n  if (path.charAt(0) === '/') {\n    return true\n  }\n  replaceHash('/' + path);\n  return false\n}\n\nfunction getHash () {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var index = href.indexOf('#');\n  return index === -1 ? '' : href.slice(index + 1)\n}\n\nfunction pushHash (path) {\n  window.location.hash = path;\n}\n\nfunction replaceHash (path) {\n  var href = window.location.href;\n  var i = href.indexOf('#');\n  var base = i >= 0 ? href.slice(0, i) : href;\n  window.location.replace((base + \"#\" + path));\n}\n\n/*  */\n\n\nvar AbstractHistory = (function (History$$1) {\n  function AbstractHistory (router, base) {\n    History$$1.call(this, router, base);\n    this.stack = [];\n    this.index = -1;\n  }\n\n  if ( History$$1 ) AbstractHistory.__proto__ = History$$1;\n  AbstractHistory.prototype = Object.create( History$$1 && History$$1.prototype );\n  AbstractHistory.prototype.constructor = AbstractHistory;\n\n  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);\n      this$1.index++;\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.go = function go (n) {\n    var this$1 = this;\n\n    var targetIndex = this.index + n;\n    if (targetIndex < 0 || targetIndex >= this.stack.length) {\n      return\n    }\n    var route = this.stack[targetIndex];\n    this.confirmTransition(route, function () {\n      this$1.index = targetIndex;\n      this$1.updateRoute(route);\n    });\n  };\n\n  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    var current = this.stack[this.stack.length - 1];\n    return current ? current.fullPath : '/'\n  };\n\n  AbstractHistory.prototype.ensureURL = function ensureURL () {\n    // noop\n  };\n\n  return AbstractHistory;\n}(History));\n\n/*  */\n\nvar VueRouter = function VueRouter (options) {\n  if ( options === void 0 ) options = {};\n\n  this.app = null;\n  this.apps = [];\n  this.options = options;\n  this.beforeHooks = [];\n  this.resolveHooks = [];\n  this.afterHooks = [];\n  this.matcher = createMatcher(options.routes || [], this);\n\n  var mode = options.mode || 'hash';\n  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;\n  if (this.fallback) {\n    mode = 'hash';\n  }\n  if (!inBrowser) {\n    mode = 'abstract';\n  }\n  this.mode = mode;\n\n  switch (mode) {\n    case 'history':\n      this.history = new HTML5History(this, options.base);\n      break\n    case 'hash':\n      this.history = new HashHistory(this, options.base, this.fallback);\n      break\n    case 'abstract':\n      this.history = new AbstractHistory(this, options.base);\n      break\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        assert(false, (\"invalid mode: \" + mode));\n      }\n  }\n};\n\nvar prototypeAccessors = { currentRoute: {} };\n\nVueRouter.prototype.match = function match (\n  raw,\n  current,\n  redirectedFrom\n) {\n  return this.matcher.match(raw, current, redirectedFrom)\n};\n\nprototypeAccessors.currentRoute.get = function () {\n  return this.history && this.history.current\n};\n\nVueRouter.prototype.init = function init (app /* Vue component instance */) {\n    var this$1 = this;\n\n  process.env.NODE_ENV !== 'production' && assert(\n    install.installed,\n    \"not installed. Make sure to call `Vue.use(VueRouter)` \" +\n    \"before creating root instance.\"\n  );\n\n  this.apps.push(app);\n\n  // main app already initialized.\n  if (this.app) {\n    return\n  }\n\n  this.app = app;\n\n  var history = this.history;\n\n  if (history instanceof HTML5History) {\n    history.transitionTo(history.getCurrentLocation());\n  } else if (history instanceof HashHistory) {\n    var setupHashListener = function () {\n      history.setupListeners();\n    };\n    history.transitionTo(\n      history.getCurrentLocation(),\n      setupHashListener,\n      setupHashListener\n    );\n  }\n\n  history.listen(function (route) {\n    this$1.apps.forEach(function (app) {\n      app._route = route;\n    });\n  });\n};\n\nVueRouter.prototype.beforeEach = function beforeEach (fn) {\n  return registerHook(this.beforeHooks, fn)\n};\n\nVueRouter.prototype.beforeResolve = function beforeResolve (fn) {\n  return registerHook(this.resolveHooks, fn)\n};\n\nVueRouter.prototype.afterEach = function afterEach (fn) {\n  return registerHook(this.afterHooks, fn)\n};\n\nVueRouter.prototype.onReady = function onReady (cb, errorCb) {\n  this.history.onReady(cb, errorCb);\n};\n\nVueRouter.prototype.onError = function onError (errorCb) {\n  this.history.onError(errorCb);\n};\n\nVueRouter.prototype.push = function push (location, onComplete, onAbort) {\n  this.history.push(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.replace = function replace (location, onComplete, onAbort) {\n  this.history.replace(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.go = function go (n) {\n  this.history.go(n);\n};\n\nVueRouter.prototype.back = function back () {\n  this.go(-1);\n};\n\nVueRouter.prototype.forward = function forward () {\n  this.go(1);\n};\n\nVueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {\n  var route = to\n    ? to.matched\n      ? to\n      : this.resolve(to).route\n    : this.currentRoute;\n  if (!route) {\n    return []\n  }\n  return [].concat.apply([], route.matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) {\n      return m.components[key]\n    })\n  }))\n};\n\nVueRouter.prototype.resolve = function resolve (\n  to,\n  current,\n  append\n) {\n  var location = normalizeLocation(\n    to,\n    current || this.history.current,\n    append,\n    this\n  );\n  var route = this.match(location, current);\n  var fullPath = route.redirectedFrom || route.fullPath;\n  var base = this.history.base;\n  var href = createHref(base, fullPath, this.mode);\n  return {\n    location: location,\n    route: route,\n    href: href,\n    // for backwards compat\n    normalizedTo: location,\n    resolved: route\n  }\n};\n\nVueRouter.prototype.addRoutes = function addRoutes (routes) {\n  this.matcher.addRoutes(routes);\n  if (this.history.current !== START) {\n    this.history.transitionTo(this.history.getCurrentLocation());\n  }\n};\n\nObject.defineProperties( VueRouter.prototype, prototypeAccessors );\n\nfunction registerHook (list, fn) {\n  list.push(fn);\n  return function () {\n    var i = list.indexOf(fn);\n    if (i > -1) { list.splice(i, 1); }\n  }\n}\n\nfunction createHref (base, fullPath, mode) {\n  var path = mode === 'hash' ? '#' + fullPath : fullPath;\n  return base ? cleanPath(base + '/' + path) : path\n}\n\nVueRouter.install = install;\nVueRouter.version = '2.7.0';\n\nif (inBrowser && window.Vue) {\n  window.Vue.use(VueRouter);\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (VueRouter);\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(5)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, global) {/*!\n * Vue.js v2.4.4\n * (c) 2014-2017 Evan You\n * Released under the MIT License.\n */\n/*  */\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nvar _toString = Object.prototype.toString;\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(val);\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if a attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,is');\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind, faster than native\n */\nfunction bind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length;\n  return boundFn\n}\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar formatComponentName = (null); // work around flow check\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var name = typeof vm === 'string'\n      ? vm\n      : typeof vm === 'function' && vm.options\n        ? vm.options.name\n        : vm._isVue\n          ? vm.$options.name || vm.$options._componentTag\n          : vm.name;\n\n    var file = vm._isVue && vm.$options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  var generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (config.errorHandler) {\n    config.errorHandler.call(null, err, vm, info);\n  } else {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n    }\n    /* istanbul ignore else */\n    if (inBrowser && typeof console !== 'undefined') {\n      console.error(err);\n    } else {\n      throw err\n    }\n  }\n}\n\n/*  */\n/* globals MutationObserver */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\n/**\n * Defer a task to execute it asynchronously.\n */\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc;\n\n  function nextTickHandler () {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var logError = function (err) { console.error(err); };\n    timerFunc = function () {\n      p.then(nextTickHandler).catch(logError);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) { setTimeout(noop); }\n    };\n  } else if (!isIE && typeof MutationObserver !== 'undefined' && (\n    isNative(MutationObserver) ||\n    // PhantomJS and iOS 7.x\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\n  )) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = function () {\n      setTimeout(nextTickHandler, 0);\n    };\n  }\n\n  return function queueNextTick (cb, ctx) {\n    var _resolve;\n    callbacks.push(function () {\n      if (cb) {\n        try {\n          cb.call(ctx);\n        } catch (e) {\n          handleError(e, ctx, 'nextTick');\n        }\n      } else if (_resolve) {\n        _resolve(ctx);\n      }\n    });\n    if (!pending) {\n      pending = true;\n      timerFunc();\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve, reject) {\n        _resolve = resolve;\n      })\n    }\n  }\n})();\n\nvar _Set;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However when passing down props,\n * we don't want to force conversion because the value may be a nested value\n * under a frozen data structure. Converting it would defeat the optimization.\n */\nvar observerState = {\n  shouldConvert: true\n};\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src, keys) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value)) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    observerState.shouldConvert &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (hasOwn(target, key)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (process.env.NODE_ENV !== 'production') {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this) : parentVal\n      )\n    }\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn.call(this, parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal\n    ? extend(res, childVal)\n    : res\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (parentVal, childVal) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (parentVal, childVal) {\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    var lower = key.toLowerCase();\n    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {\n      warn(\n        'Do not use built-in or reserved HTML elements as component ' +\n        'id: ' + key\n      );\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options) {\n  var inject = options.inject;\n  if (Array.isArray(inject)) {\n    var normalized = options.inject = {};\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = inject[i];\n    }\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child);\n  normalizeInject(child);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // handle boolean props\n  if (isType(Boolean, prop.type)) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n      value = true;\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldConvert = observerState.shouldConvert;\n    observerState.shouldConvert = true;\n    observe(value);\n    observerState.shouldConvert = prevShouldConvert;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (process.env.NODE_ENV !== 'production' && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      'Invalid prop: type check failed for prop \"' + name + '\".' +\n      ' Expected ' + expectedTypes.map(capitalize).join(', ') +\n      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isType (type, fn) {\n  if (!Array.isArray(fn)) {\n    return getType(fn) === getType(type)\n  }\n  for (var i = 0, len = fn.length; i < len; i++) {\n    if (getType(fn[i]) === getType(type)) {\n      return true\n    }\n  }\n  /* istanbul ignore next */\n  return false\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (process.env.NODE_ENV !== 'production') {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (process.env.NODE_ENV !== 'production') {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      \"referenced during render. Make sure to declare reactive data \" +\n      \"properties in the data option.\",\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.functionalContext = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: {} };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode, deep) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.isCloned = true;\n  if (deep && vnode.children) {\n    cloned.children = cloneVNodes(vnode.children);\n  }\n  return cloned\n}\n\nfunction cloneVNodes (vnodes, deep) {\n  var len = vnodes.length;\n  var res = new Array(len);\n  for (var i = 0; i < len; i++) {\n    res[i] = cloneVNode(vnodes[i], deep);\n  }\n  return res\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  var plain = !(passive || once$$1 || capture);\n  return {\n    name: name,\n    plain: plain,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        cloned[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\n// #6552\nfunction prioritizePlainEvents (a, b) {\n  return a.plain ? -1 : b.plain ? 1 : 0\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, cur, old, event;\n  var toAdd = [];\n  var hasModifier = false;\n  for (name in on) {\n    cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (!event.plain) { hasModifier = true; }\n    if (isUndef(cur)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      event.handler = cur;\n      toAdd.push(event);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  if (toAdd.length) {\n    if (hasModifier) { toAdd.sort(prioritizePlainEvents); }\n    for (var i = 0; i < toAdd.length; i++) {\n      var event$1 = toAdd[i];\n      add(event$1.name, event$1.handler, event$1.once, event$1.capture, event$1.passive);\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (process.env.NODE_ENV !== 'production') {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    last = res[res.length - 1];\n    //  nested\n    if (Array.isArray(c)) {\n      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i)));\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        (last).text += String(c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[res.length - 1] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (comp.__esModule && comp.default) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                process.env.NODE_ENV !== 'production'\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once$$1) {\n  if (once$$1) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$off(event[i], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (arguments.length === 1) {\n      vm._events[event] = null;\n      return vm\n    }\n    if (fn) {\n      // specific handler\n      var cb;\n      var i$1 = cbs.length;\n      while (i$1--) {\n        cb = cbs[i$1];\n        if (cb === fn || cb.fn === fn) {\n          cbs.splice(i$1, 1);\n          break\n        }\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (process.env.NODE_ENV !== 'production') {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        try {\n          cbs[i].apply(vm, args);\n        } catch (e) {\n          handleError(e, vm, (\"event handler for \\\"\" + event + \"\\\"\"));\n        }\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  var defaultSlot = [];\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.functionalContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = child.data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      defaultSlot.push(child);\n    }\n  }\n  // ignore whitespace\n  if (!defaultSlot.every(isWhitespace)) {\n    slots.default = defaultSlot;\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return node.isComment || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n      // no need for the ref nodes after initial patch\n      // this prevents keeping a detached DOM tree in memory (#5851)\n      vm.$options._parentElm = vm.$options._refElm = null;\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  vm._watcher = new Watcher(vm, updateComponent, noop);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = (parentVnode.data && parentVnode.data.attrs) || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    observerState.shouldConvert = false;\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      props[key] = validateProp(key, vm.$options.props, propsData, vm);\n    }\n    observerState.shouldConvert = true;\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  if (listeners) {\n    var oldListeners = vm.$options._parentListeners;\n    vm.$options._parentListeners = listeners;\n    updateComponentListeners(vm, listeners, oldListeners);\n  }\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (process.env.NODE_ENV !== 'production') {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options\n) {\n  this.vm = vm;\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production'\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nvar seenObjects = new _Set();\nfunction traverse (val) {\n  seenObjects.clear();\n  _traverse(val, seenObjects);\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction checkOptionType (vm, name) {\n  var option = vm.$options[name];\n  if (!isPlainObject(option)) {\n    warn(\n      (\"component option \\\"\" + name + \"\\\" should be an object.\"),\n      vm\n    );\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot;\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      if (isReservedAttribute(key) || config.isReservedAttr(key)) {\n        warn(\n          (\"\\\"\" + key + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (vm.$parent && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive$$1(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  observerState.shouldConvert = true;\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  try {\n    return data.call(vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'computed');\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (process.env.NODE_ENV !== 'production' && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : userDef;\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'methods');\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods[key] == null) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'watch');\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  keyOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(keyOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (process.env.NODE_ENV !== 'production') {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    observerState.shouldConvert = false;\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive$$1(vm, key, result[key]);\n      }\n    });\n    observerState.shouldConvert = true;\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n        ? Reflect.ownKeys(inject).filter(function (key) {\n          /* istanbul ignore next */\n          return Object.getOwnPropertyDescriptor(inject, key).enumerable\n        })\n        : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = inject[key];\n      var source = vm;\n      while (source) {\n        if (source._provided && provideKey in source._provided) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (process.env.NODE_ENV !== 'production' && !source) {\n        warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  context,\n  children\n) {\n  var props = {};\n  var propOptions = Ctor.options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var _context = Object.create(context);\n  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };\n  var vnode = Ctor.options.render.call(null, h, {\n    data: data,\n    props: props,\n    children: children,\n    parent: context,\n    listeners: data.on || emptyObject,\n    injections: resolveInject(Ctor.options.inject, context),\n    slots: function () { return resolveSlots(children, context); }\n  });\n  if (vnode instanceof VNode) {\n    vnode.functionalContext = context;\n    vnode.functionalOptions = Ctor.options;\n    if (data.slot) {\n      (vnode.data || (vnode.data = {})).slot = data.slot;\n    }\n  }\n  return vnode\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n// hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    } else if (vnode.data.keepAlive) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var vnodeComponentOptions = vnode.componentOptions;\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    propsData: vnodeComponentOptions.propsData,\n    _componentTag: vnodeComponentOptions.tag,\n    _parentVnode: vnode,\n    _parentListeners: vnodeComponentOptions.listeners,\n    _renderChildren: vnodeComponentOptions.children,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnodeComponentOptions.Ctor(options)\n}\n\nfunction mergeHooks (data) {\n  if (!data.hook) {\n    data.hook = {};\n  }\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var fromParent = data.hook[key];\n    var ours = componentVNodeHooks[key];\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n  }\n}\n\nfunction mergeHook$1 (one, two) {\n  return function (a, b, c, d) {\n    one(a, b, c, d);\n    two(a, b, c, d);\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (process.env.NODE_ENV !== 'production' &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    warn(\n      'Avoid using non-primitive value as key, ' +\n      'use string/number value instead.',\n      context\n    );\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (isDef(vnode)) {\n    if (ns) { applyNS(vnode, ns); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    return\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && isUndef(child.ns)) {\n        applyNS(child, ns);\n      }\n    }\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      props = extend(extend({}, bindObject), props);\n    }\n    return scopedSlotFn(props) || fallback\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes && process.env.NODE_ENV !== 'production') {\n      slotNodes._rendered && warn(\n        \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n        \"- this will likely cause render errors.\",\n        this\n      );\n      slotNodes._rendered = true;\n    }\n    return slotNodes || fallback\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\n/**\n * Runtime helper for checking keyCodes from config.\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInAlias\n) {\n  var keyCodes = config.keyCodes[key] || builtInAlias;\n  if (Array.isArray(keyCodes)) {\n    return keyCodes.indexOf(eventKeyCode) === -1\n  } else {\n    return keyCodes !== eventKeyCode\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var tree = this._staticTrees[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree by doing a shallow clone.\n  if (tree && !isInFor) {\n    return Array.isArray(tree)\n      ? cloneVNodes(tree)\n      : cloneVNode(tree)\n  }\n  // otherwise, render a fresh tree.\n  tree = this._staticTrees[index] =\n    this.$options.staticRenderFns[index].call(this._renderProxy);\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(ours, existing) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null;\n  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', vm.$options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive$$1(vm, '$listeners', vm.$options._parentListeners || emptyObject, null, true);\n  }\n}\n\nfunction renderMixin (Vue) {\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var staticRenderFns = ref.staticRenderFns;\n    var _parentVnode = ref._parentVnode;\n\n    if (vm._isMounted) {\n      // if the parent didn't update, the slot nodes will be the ones from\n      // last render. They need to be cloned to ensure \"freshness\" for this render.\n      for (var key in vm.$slots) {\n        var slot = vm.$slots[key];\n        if (slot._rendered) {\n          vm.$slots[key] = cloneVNodes(slot, true /* deep */);\n        }\n      }\n    }\n\n    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;\n\n    if (staticRenderFns && !vm._staticTrees) {\n      vm._staticTrees = [];\n    }\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render function\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        vnode = vm.$options.renderError\n          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n          : vm._vnode;\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n\n  // internal render helpers.\n  // these are exposed on the instance prototype to reduce generated render\n  // code size.\n  Vue.prototype._o = markOnce;\n  Vue.prototype._n = toNumber;\n  Vue.prototype._s = toString;\n  Vue.prototype._l = renderList;\n  Vue.prototype._t = renderSlot;\n  Vue.prototype._q = looseEqual;\n  Vue.prototype._i = looseIndexOf;\n  Vue.prototype._m = renderStatic;\n  Vue.prototype._f = resolveFilter;\n  Vue.prototype._k = checkKeyCodes;\n  Vue.prototype._b = bindObjectProps;\n  Vue.prototype._v = createTextVNode;\n  Vue.prototype._e = createEmptyVNode;\n  Vue.prototype._u = resolveScopedSlots;\n  Vue.prototype._g = bindObjectListeners;\n}\n\n/*  */\n\nvar uid$1 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$1++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = \"vue-perf-init:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure(((vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  opts.parent = options.parent;\n  opts.propsData = options.propsData;\n  opts._parentVnode = options._parentVnode;\n  opts._parentListeners = options._parentListeners;\n  opts._renderChildren = options._renderChildren;\n  opts._componentTag = options._componentTag;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue$3 (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue$3)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue$3);\nstateMixin(Vue$3);\neventsMixin(Vue$3);\nlifecycleMixin(Vue$3);\nrenderMixin(Vue$3);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn(\n          'Invalid component name: \"' + name + '\". Component names ' +\n          'can only contain alphanumeric characters and the hyphen, ' +\n          'and must start with a letter.'\n        );\n      }\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          if (type === 'component' && config.isReservedTag(id)) {\n            warn(\n              'Do not use built-in or reserved HTML elements as component ' +\n              'id: ' + id\n            );\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nvar patternTypes = [String, RegExp, Array];\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (cache, current, filter) {\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        if (cachedNode !== current) {\n          pruneCacheEntry(cachedNode);\n        }\n        cache[key] = null;\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (vnode) {\n  if (vnode) {\n    vnode.componentInstance.$destroy();\n  }\n}\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache[key]);\n    }\n  },\n\n  watch: {\n    include: function include (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return matches(val, name); });\n    },\n    exclude: function exclude (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return !matches(val, name); });\n    }\n  },\n\n  render: function render () {\n    var vnode = getFirstComponentChild(this.$slots.default);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      if (name && (\n        (this.include && !matches(this.include, name)) ||\n        (this.exclude && matches(this.exclude, name))\n      )) {\n        return vnode\n      }\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (this.cache[key]) {\n        vnode.componentInstance = this.cache[key].componentInstance;\n      } else {\n        this.cache[key] = vnode;\n      }\n      vnode.data.keepAlive = true;\n    }\n    return vnode\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (process.env.NODE_ENV !== 'production') {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue$3);\n\nObject.defineProperty(Vue$3.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue$3.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\nVue$3.version = '2.4.4';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setAttribute (node, key, val) {\n  node.setAttribute(key, val);\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetAttribute: setAttribute\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!key) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  var inPre = 0;\n  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (data && data.pre) {\n          inPre++;\n        }\n        if (\n          !inPre &&\n          !vnode.ns &&\n          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&\n          config.isUnknownElement(tag)\n        ) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (process.env.NODE_ENV !== 'production' && data && data.pre) {\n        inPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (ref$$1.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    var ancestor = vnode;\n    while (ancestor) {\n      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n        nodeOps.setAttribute(vnode.elm, i, '');\n      }\n      ancestor = ancestor.parent;\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, elmToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n        } else {\n          elmToMove = oldCh[idxInOld];\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !elmToMove) {\n            warn(\n              'It seems there are duplicate keys that is causing an update error. ' +\n              'Make sure each v-for item has a unique key.'\n            );\n          }\n          if (sameVnode(elmToMove, newStartVnode)) {\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var bailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue) {\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.elm = elm;\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (!assertNodeMatch(elm, vnode)) {\n        return false\n      }\n    }\n    vnode.elm = elm;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !bailed\n              ) {\n                bailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !bailed\n              ) {\n                bailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode) {\n    if (isDef(vnode.tag)) {\n      return (\n        vnode.tag.indexOf('vue-component') === 0 ||\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (process.env.NODE_ENV !== 'production') {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        if (isDef(vnode.parent)) {\n          // component root element replaced.\n          // update parent placeholder node element, recursively\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  /* istanbul ignore if */\n  if (isIE9 && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args)\n  }\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn\n) {\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    process.env.NODE_ENV !== 'production' && warn &&\n    modifiers && modifiers.prevent && modifiers.passive\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.'\n    );\n  }\n  // check capture modifier\n  if (modifiers && modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers && modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  /* istanbul ignore if */\n  if (modifiers && modifiers.passive) {\n    delete modifiers.passive;\n    name = '&' + name; // mark the event as passive\n  }\n  var events;\n  if (modifiers && modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n  var newHandler = { value: value, modifiers: modifiers };\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\nfunction getAndRemoveAttr (el, name) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  return val\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n        \"? \" + baseValueExpression + \".trim()\" +\n        \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: (\"\\\"\" + value + \"\\\"\"),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var modelRs = parseModel(value);\n  if (modelRs.idx === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return (\"$set(\" + (modelRs.exp) + \", \" + (modelRs.idx) + \", \" + assignment + \")\")\n  }\n}\n\n/**\n * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)\n *\n * for loop possible cases:\n *\n * - test\n * - test[idx]\n * - test[test1[idx]]\n * - test[\"a\"][idx]\n * - xxx.test[a[a].test1[idx]]\n * - test.xxx.a[\"asa\"][test1[idx]]\n *\n */\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\nfunction parseModel (val) {\n  str = val;\n  len = str.length;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    return {\n      exp: val,\n      idx: null\n    }\n  }\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.substring(0, expressionPos),\n    idx: val.substring(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (process.env.NODE_ENV !== 'production') {\n    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (tag === 'input' && dynamicType) {\n      warn$1(\n        \"<input :type=\\\"\" + dynamicType + \"\\\" v-model=\\\"\" + value + \"\\\">:\\n\" +\n        \"v-model does not support dynamic input types. Use v-if branches instead.\"\n      );\n    }\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\"\n      );\n    }\n  }\n\n  if (el.component) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.'\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n      \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n        trueValueBinding === 'true'\n          ? (\":(\" + value + \")\")\n          : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n      )\n  );\n  addHandler(el, CHECKBOX_RADIO_TOKEN,\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$el.checked){$$i<0&&(\" + value + \"=$$a.concat([$$v]))}\" +\n      \"else{$$i>-1&&(\" + value + \"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n    el,\n    value,\n    modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n    el,\n    value,\n    modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number) {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  var event;\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    // Chrome fires microtasks in between click/change, leads to #4521\n    event = isChrome ? 'click' : 'change';\n    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  if (once$$1) {\n    var oldHandler = handler;\n    var _target = target$1; // save current target element in closure\n    handler = function (ev) {\n      var res = arguments.length === 1\n        ? oldHandler(ev)\n        : oldHandler.apply(null, arguments);\n      if (res !== null) {\n        remove$2(event, handler, capture, _target);\n      }\n    };\n  }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(event, handler, capture);\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, vnode, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (\n  elm,\n  vnode,\n  checkVal\n) {\n  return (!elm.composing && (\n    vnode.tag === 'option' ||\n    isDirty(elm, checkVal) ||\n    isInputChanged(elm, checkVal)\n  ))\n}\n\nfunction isDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isInputChanged (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers) && modifiers.number) {\n    return toNumber(value) !== toNumber(newVal)\n  }\n  if (isDef(modifiers) && modifiers.trim) {\n    return value.trim() !== newVal.trim()\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser && window.requestAnimationFrame\n  ? window.requestAnimationFrame.bind(window)\n  : setTimeout;\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      addTransitionClass(el, toClass);\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled && !userWantsControl) {\n        if (isValidDuration(explicitEnterDuration)) {\n          setTimeout(cb, explicitEnterDuration);\n        } else {\n          whenTransitionEnds(el, type, cb);\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        addTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled && !userWantsControl) {\n          if (isValidDuration(explicitLeaveDuration)) {\n            setTimeout(cb, explicitLeaveDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar model$1 = {\n  inserted: function inserted (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        if (!isAndroid) {\n          el.addEventListener('compositionstart', onCompositionStart);\n          el.addEventListener('compositionend', onCompositionEnd);\n        }\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (value === oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: model$1,\n  show: show\n};\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$options._renderChildren;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (process.env.NODE_ENV !== 'production' && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (process.env.NODE_ENV !== 'production' &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild && (oldChild.data.transition = extend({}, data));\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (process.env.NODE_ENV !== 'production') {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    var body = document.body;\n    var f = body.offsetHeight; // eslint-disable-line\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue$3.config.mustUseProp = mustUseProp;\nVue$3.config.isReservedTag = isReservedTag;\nVue$3.config.isReservedAttr = isReservedAttr;\nVue$3.config.getTagNamespace = getTagNamespace;\nVue$3.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue$3.options.directives, platformDirectives);\nextend(Vue$3.options.components, platformComponents);\n\n// install platform patch function\nVue$3.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue$3);\n    } else if (process.env.NODE_ENV !== 'production' && isChrome) {\n      console[console.info ? 'info' : 'log'](\n        'Download the Vue Devtools extension for a better development experience:\\n' +\n        'https://github.com/vuejs/vue-devtools'\n      );\n    }\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n    config.productionTip !== false &&\n    inBrowser && typeof console !== 'undefined'\n  ) {\n    console[console.info ? 'info' : 'log'](\n      \"You are running Vue in development mode.\\n\" +\n      \"Make sure to turn on production mode when deploying for production.\\n\" +\n      \"See more tips at https://vuejs.org/guide/deployment.html\"\n    );\n  }\n}, 0);\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nfunction shouldDecode (content, encoded) {\n  var div = document.createElement('div');\n  div.innerHTML = \"<div a=\\\"\" + content + \"\\\"/>\";\n  return div.innerHTML.indexOf(encoded) > 0\n}\n\n// #3663\n// IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? shouldDecode('\\n', '&#10;') : false;\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push(JSON.stringify(text.slice(lastIndex, index)));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push(JSON.stringify(text.slice(lastIndex)));\n  }\n  return tokens.join('+')\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (process.env.NODE_ENV !== 'production' && staticClass) {\n    var expression = parseText(staticClass, options.delimiters);\n    if (expression) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData\n};\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      var expression = parseText(staticStyle, options.delimiters);\n      if (expression) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$1\n};\n\nvar modules$1 = [\n  klass$1,\n  style$1\n];\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\n/*  */\n\nvar decoder;\n\nvar he = {\n  decode: function decode (html) {\n    decoder = decoder || document.createElement('div');\n    decoder.innerHTML = html;\n    return decoder.textContent\n  }\n};\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\";\nvar startTagOpen = new RegExp((\"^<\" + qnameCapture));\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));\nvar doctype = /^<!DOCTYPE [^>]+>/i;\nvar comment = /^<!--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n'\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;\n\n// #5992\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\nvar shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            if (options.shouldKeepComment) {\n              options.comment(html.substring(4, commentEnd));\n            }\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          if (shouldIgnoreFirstNewline(lastTag, html)) {\n            advance(1);\n          }\n          continue\n        }\n      }\n\n      var text = (void 0), rest = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest = html.slice(textEnd);\n        while (\n          !endTag.test(rest) &&\n          !startTagOpen.test(rest) &&\n          !comment.test(rest) &&\n          !conditionalComment.test(rest)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var endTagLength = 0;\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!--([\\s\\S]*?)-->/g, '$1')\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\n          text = text.slice(1);\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest$1.length;\n      html = rest$1;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (process.env.NODE_ENV !== 'production' && !stack.length && options.warn) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(\n          value,\n          options.shouldDecodeNewlines\n        )\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (process.env.NODE_ENV !== 'production' &&\n          (i > pos || !tagName) &&\n          options.warn\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/;\nvar forIteratorRE = /\\((\\{[^}]*\\}|[^,]*),([^,]*)(?:,([^,]*))?\\)/;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^v-bind:/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(he.decode);\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n\n  platformIsPreTag = options.isPreTag || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformGetTagNamespace = options.getTagNamespace || no;\n\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg);\n    }\n  }\n\n  function endPre (element) {\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldKeepComment: options.comments,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = {\n        type: 1,\n        tag: tag,\n        attrsList: attrs,\n        attrsMap: makeAttrsMap(attrs),\n        parent: currentParent,\n        children: []\n      };\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        process.env.NODE_ENV !== 'production' && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        preTransforms[i](element, options);\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else {\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        processKey(element);\n\n        // determine whether this is a plain element after\n        // removing structural attributes\n        element.plain = !element.key && !attrs.length;\n\n        processRef(element);\n        processSlot(element);\n        processComponent(element);\n        for (var i$1 = 0; i$1 < transforms.length; i$1++) {\n          transforms[i$1](element, options);\n        }\n        processAttrs(element);\n      }\n\n      function checkRootConstraints (el) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warnOnce(\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n              'contain multiple nodes.'\n            );\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warnOnce(\n              'Cannot use v-for on stateful component root element because ' +\n              'it renders multiple elements.'\n            );\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(\n            \"Component template should contain exactly one root element. \" +\n            \"If you are using v-if on multiple elements, \" +\n            \"use v-else-if to chain them instead.\"\n          );\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        endPre(element);\n      }\n      // apply post-transforms\n      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {\n        postTransforms[i$2](element, options);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      endPre(element);\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.'\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\")\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var expression;\n        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: expression,\n            text: text\n          });\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    },\n    comment: function comment (text) {\n      currentParent.children.push({\n        type: 3,\n        text: text,\n        isComment: true\n      });\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (process.env.NODE_ENV !== 'production' && el.tag === 'template') {\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var inMatch = exp.match(forAliasRE);\n    if (!inMatch) {\n      process.env.NODE_ENV !== 'production' && warn$2(\n        (\"Invalid v-for expression: \" + exp)\n      );\n      return\n    }\n    el.for = inMatch[2].trim();\n    var alias = inMatch[1].trim();\n    var iteratorMatch = alias.match(forIteratorRE);\n    if (iteratorMatch) {\n      el.alias = iteratorMatch[1].trim();\n      el.iterator1 = iteratorMatch[2].trim();\n      if (iteratorMatch[3]) {\n        el.iterator2 = iteratorMatch[3].trim();\n      }\n    } else {\n      el.alias = alias;\n    }\n  }\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (process.env.NODE_ENV !== 'production' && children[i].text !== ' ') {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\"\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (process.env.NODE_ENV !== 'production' && el.key) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\"\n      );\n    }\n  } else {\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n      // preserve slot as an attribute for native shadow DOM compat\n      addAttr(el, 'slot', slotTarget);\n    }\n    if (el.tag === 'template') {\n      el.slotScope = getAndRemoveAttr(el, 'scope');\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            addHandler(\n              el,\n              (\"update:\" + (camelize(name))),\n              genAssignmentCode(value, \"$event\")\n            );\n          }\n        }\n        if (isProp || (\n          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\n        )) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers, false, warn$2);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (process.env.NODE_ENV !== 'production' && name === 'model') {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (process.env.NODE_ENV !== 'production') {\n        var expression = parseText(value, delimiters);\n        if (expression) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      map[attrs[i].name] && !isIE && !isEdge\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        var block = node.ifConditions[i$1].block;\n        markStatic$1(block);\n        if (!block.static) {\n          node.static = false;\n        }\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\n      }\n    }\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^\\s*[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?']|\\[\".*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*\\s*$/;\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative,\n  warn\n) {\n  var res = isNative ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    var handler = events[name];\n    // #5330: warn click.right, since right clicks do not actually fire click events.\n    if (process.env.NODE_ENV !== 'production' &&\n      name === 'click' &&\n      handler && handler.modifiers && handler.modifiers.right\n    ) {\n      warn(\n        \"Use \\\"contextmenu\\\" instead of \\\"click.right\\\" since right clicks \" +\n        \"do not actually fire \\\"click\\\" events.\"\n      );\n    }\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, handler)) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n\n  if (!handler.modifiers) {\n    return isMethodPath || isFunctionExpression\n      ? handler.value\n      : (\"function($event){\" + (handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? handler.value + '($event)'\n      : isFunctionExpression\n        ? (\"(\" + (handler.value) + \")($event)\")\n        : handler.value;\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var alias = keyCodes[key];\n  return (\"_k($event.keyCode,\" + (JSON.stringify(key)) + (alias ? ',' + JSON.stringify(alias) : '') + \")\")\n}\n\n/*  */\n\nfunction on (el, dir) {\n  if (process.env.NODE_ENV !== 'production' && dir.modifiers) {\n    warn(\"v-on without argument does not support modifiers.\");\n  }\n  el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  on: on,\n  bind: bind$1,\n  cloak: noop\n};\n\n/*  */\n\nvar CodegenState = function CodegenState (options) {\n  this.options = options;\n  this.warn = options.warn || baseWarn;\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  this.directives = extend(extend({}, baseDirectives), options.directives);\n  var isReservedTag = options.isReservedTag || no;\n  this.maybeComponent = function (el) { return !isReservedTag(el.tag); };\n  this.onceId = 0;\n  this.staticRenderFns = [];\n};\n\n\n\nfunction generate (\n  ast,\n  options\n) {\n  var state = new CodegenState(options);\n  var code = ast ? genElement(ast, state) : '_c(\"div\")';\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nfunction genElement (el, state) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el, state)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el, state);\n    } else {\n      var data = el.plain ? undefined : genData$2(el, state);\n\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el, state) {\n  el.staticProcessed = true;\n  state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\n  return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el, state) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      process.env.NODE_ENV !== 'production' && state.warn(\n        \"v-once can only be used inside v-for that is keyed. \"\n      );\n      return genElement(el, state)\n    }\n    return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + \",\" + key + \")\")\n  } else {\n    return genStatic(el, state)\n  }\n}\n\nfunction genIf (\n  el,\n  state,\n  altGen,\n  altEmpty\n) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\n}\n\nfunction genIfConditions (\n  conditions,\n  state,\n  altGen,\n  altEmpty\n) {\n  if (!conditions.length) {\n    return altEmpty || '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return altGen\n      ? altGen(el, state)\n      : el.once\n        ? genOnce(el, state)\n        : genElement(el, state)\n  }\n}\n\nfunction genFor (\n  el,\n  state,\n  altGen,\n  altHelper\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (process.env.NODE_ENV !== 'production' &&\n    state.maybeComponent(el) &&\n    el.tag !== 'slot' &&\n    el.tag !== 'template' &&\n    !el.key\n  ) {\n    state.warn(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return (altHelper || '_l') + \"((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + ((altGen || genElement)(el, state)) +\n    '})'\n}\n\nfunction genData$2 (el, state) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el, state);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < state.dataGenFns.length; i++) {\n    data += state.dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false, state.warn)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true, state.warn)) + \",\";\n  }\n  // slot target\n  if (el.slotTarget) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots, state)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el, state);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  // v-on data wrap\n  if (el.wrapListeners) {\n    data = el.wrapListeners(data);\n  }\n  return data\n}\n\nfunction genDirectives (el, state) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = state.directives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, state.warn);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el, state) {\n  var ast = el.children[0];\n  if (process.env.NODE_ENV !== 'production' && (\n    el.children.length > 1 || ast.type !== 1\n  )) {\n    state.warn('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, state.options);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (\n  slots,\n  state\n) {\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) {\n      return genScopedSlot(key, slots[key], state)\n    }).join(',')) + \"])\")\n}\n\nfunction genScopedSlot (\n  key,\n  el,\n  state\n) {\n  if (el.for && !el.forProcessed) {\n    return genForScopedSlot(key, el, state)\n  }\n  return \"{key:\" + key + \",fn:function(\" + (String(el.attrsMap.scope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? genChildren(el, state) || 'void 0'\n      : genElement(el, state)) + \"}}\"\n}\n\nfunction genForScopedSlot (\n  key,\n  el,\n  state\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genScopedSlot(key, el, state)) +\n    '})'\n}\n\nfunction genChildren (\n  el,\n  state,\n  checkSkip,\n  altGenElement,\n  altGenNode\n) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      return (altGenElement || genElement)(el$1, state)\n    }\n    var normalizationType = checkSkip\n      ? getNormalizationType(children, state.maybeComponent)\n      : 0;\n    var gen = altGenNode || genNode;\n    return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (\n  children,\n  maybeComponent\n) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction genNode (node, state) {\n  if (node.type === 1) {\n    return genElement(node, state)\n  } if (node.type === 3 && node.isComment) {\n    return genComment(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genComment (comment) {\n  return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\n}\n\nfunction genSlot (el, state) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el, state);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (\n  componentName,\n  el,\n  state\n) {\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\n  return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// check valid identifier for v-for\nvar identRE = /[A-Za-z_$][\\w$]*/;\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkEvent (exp, text, errors) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    errors.push(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n    );\n  }\n  checkExpression(exp, text, errors);\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (ident, type, text, errors) {\n  if (typeof ident === 'string' && !identRE.test(ident)) {\n    errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n      );\n    } else {\n      errors.push((\"invalid expression: \" + (text.trim())));\n    }\n  }\n}\n\n/*  */\n\nfunction createFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompileToFunctionFn (compile) {\n  var cache = Object.create(null);\n\n  return function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = options || {};\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (cache[key]) {\n      return cache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (process.env.NODE_ENV !== 'production') {\n      if (compiled.errors && compiled.errors.length) {\n        warn(\n          \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n          compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n          vm\n        );\n      }\n      if (compiled.tips && compiled.tips.length) {\n        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = createFunction(compiled.render, fnGenErrors);\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n      return createFunction(code, fnGenErrors)\n    });\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (cache[key] = res)\n  }\n}\n\n/*  */\n\nfunction createCompilerCreator (baseCompile) {\n  return function createCompiler (baseOptions) {\n    function compile (\n      template,\n      options\n    ) {\n      var finalOptions = Object.create(baseOptions);\n      var errors = [];\n      var tips = [];\n      finalOptions.warn = function (msg, tip) {\n        (tip ? tips : errors).push(msg);\n      };\n\n      if (options) {\n        // merge custom modules\n        if (options.modules) {\n          finalOptions.modules =\n            (baseOptions.modules || []).concat(options.modules);\n        }\n        // merge custom directives\n        if (options.directives) {\n          finalOptions.directives = extend(\n            Object.create(baseOptions.directives),\n            options.directives\n          );\n        }\n        // copy other options\n        for (var key in options) {\n          if (key !== 'modules' && key !== 'directives') {\n            finalOptions[key] = options[key];\n          }\n        }\n      }\n\n      var compiled = baseCompile(template, finalOptions);\n      if (process.env.NODE_ENV !== 'production') {\n        errors.push.apply(errors, detectErrors(compiled.ast));\n      }\n      compiled.errors = errors;\n      compiled.tips = tips;\n      return compiled\n    }\n\n    return {\n      compile: compile,\n      compileToFunctions: createCompileToFunctionFn(compile)\n    }\n  }\n}\n\n/*  */\n\n// `createCompilerCreator` allows creating compilers that use alternative\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\n// Here we just export a default compiler using the default parts.\nvar createCompiler = createCompilerCreator(function baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  optimize(ast, options);\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n});\n\n/*  */\n\nvar ref$1 = createCompiler(baseOptions);\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue$3.prototype.$mount;\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile end');\n        measure(((this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue$3.compile = compileToFunctions;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Vue$3);\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(5), __webpack_require__(13)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\nvar bind = __webpack_require__(11);\nvar Axios = __webpack_require__(26);\nvar defaults = __webpack_require__(6);\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(utils.merge(defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = __webpack_require__(8);\naxios.CancelToken = __webpack_require__(25);\naxios.isCancel = __webpack_require__(9);\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = __webpack_require__(40);\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9heGlvcy5qcz8wNjFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZLE1BQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKHV0aWxzLm1lcmdlKGRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2F4aW9zLmpzXG4vLyBtb2R1bGUgaWQgPSAyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Cancel = __webpack_require__(8);\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanM/NDc2NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanNcbi8vIG1vZHVsZSBpZCA9IDI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar defaults = __webpack_require__(6);\nvar utils = __webpack_require__(0);\nvar InterceptorManager = __webpack_require__(27);\nvar dispatchRequest = __webpack_require__(28);\nvar isAbsoluteURL = __webpack_require__(36);\nvar combineURLs = __webpack_require__(34);\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = utils.merge({\n      url: arguments[0]\n    }, arguments[1]);\n  }\n\n  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);\n  config.method = config.method.toLowerCase();\n\n  // Support baseURL config\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\n    config.url = combineURLs(config.baseURL, config.url);\n  }\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzPzQ4M2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQSxpREFBaUQsZ0JBQWdCO0FBQ2pFOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi8uLi9kZWZhdWx0cycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gdXRpbHMubWVyZ2Uoe1xuICAgICAgdXJsOiBhcmd1bWVudHNbMF1cbiAgICB9LCBhcmd1bWVudHNbMV0pO1xuICB9XG5cbiAgY29uZmlnID0gdXRpbHMubWVyZ2UoZGVmYXVsdHMsIHRoaXMuZGVmYXVsdHMsIHsgbWV0aG9kOiAnZ2V0JyB9LCBjb25maWcpO1xuICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuXG4gIC8vIFN1cHBvcnQgYmFzZVVSTCBjb25maWdcbiAgaWYgKGNvbmZpZy5iYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKGNvbmZpZy51cmwpKSB7XG4gICAgY29uZmlnLnVybCA9IGNvbWJpbmVVUkxzKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzXG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcz81ODkyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\nvar transformData = __webpack_require__(31);\nvar isCancel = __webpack_require__(9);\nvar defaults = __webpack_require__(6);\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers || {}\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcz85MWJjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLCtCQUErQjtBQUMvQix1Q0FBdUM7QUFDdkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0giLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzXG4vLyBtb2R1bGUgaWQgPSAyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n  error.request = request;\n  error.response = response;\n  return error;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcz8yODhjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgcmV0dXJuIGVycm9yO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanNcbi8vIG1vZHVsZSBpZCA9IDI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar createError = __webpack_require__(10);\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  // Note: status is not exposed by XDomainRequest\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcz8xOTlmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIC8vIE5vdGU6IHN0YXR1cyBpcyBub3QgZXhwb3NlZCBieSBYRG9tYWluUmVxdWVzdFxuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzXG4vLyBtb2R1bGUgaWQgPSAzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanM/MGVhNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekIsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsZUFBZTtBQUMxQixhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBIiwiZmlsZSI6IjMxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction E() {\n  this.message = 'String contains an invalid character';\n}\nE.prototype = new Error;\nE.prototype.code = 5;\nE.prototype.name = 'InvalidCharacterError';\n\nfunction btoa(input) {\n  var str = String(input);\n  var output = '';\n  for (\n    // initialize result and counter\n    var block, charCode, idx = 0, map = chars;\n    // if the next str index does not exist:\n    //   change the mapping table to \"=\"\n    //   check if d has no fractional digits\n    str.charAt(idx | 0) || (map = '=', idx % 1);\n    // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n    output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n  ) {\n    charCode = str.charCodeAt(idx += 3 / 4);\n    if (charCode > 0xFF) {\n      throw new E();\n    }\n    block = block << 8 | charCode;\n  }\n  return output;\n}\n\nmodule.exports = btoa;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2J0b2EuanM/N2Q0NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjMyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBidG9hIHBvbHlmaWxsIGZvciBJRTwxMCBjb3VydGVzeSBodHRwczovL2dpdGh1Yi5jb20vZGF2aWRjaGFtYmVycy9CYXNlNjQuanNcblxudmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcblxuZnVuY3Rpb24gRSgpIHtcbiAgdGhpcy5tZXNzYWdlID0gJ1N0cmluZyBjb250YWlucyBhbiBpbnZhbGlkIGNoYXJhY3Rlcic7XG59XG5FLnByb3RvdHlwZSA9IG5ldyBFcnJvcjtcbkUucHJvdG90eXBlLmNvZGUgPSA1O1xuRS5wcm90b3R5cGUubmFtZSA9ICdJbnZhbGlkQ2hhcmFjdGVyRXJyb3InO1xuXG5mdW5jdGlvbiBidG9hKGlucHV0KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoaW5wdXQpO1xuICB2YXIgb3V0cHV0ID0gJyc7XG4gIGZvciAoXG4gICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJcbiAgICB2YXIgYmxvY2ssIGNoYXJDb2RlLCBpZHggPSAwLCBtYXAgPSBjaGFycztcbiAgICAvLyBpZiB0aGUgbmV4dCBzdHIgaW5kZXggZG9lcyBub3QgZXhpc3Q6XG4gICAgLy8gICBjaGFuZ2UgdGhlIG1hcHBpbmcgdGFibGUgdG8gXCI9XCJcbiAgICAvLyAgIGNoZWNrIGlmIGQgaGFzIG5vIGZyYWN0aW9uYWwgZGlnaXRzXG4gICAgc3RyLmNoYXJBdChpZHggfCAwKSB8fCAobWFwID0gJz0nLCBpZHggJSAxKTtcbiAgICAvLyBcIjggLSBpZHggJSAxICogOFwiIGdlbmVyYXRlcyB0aGUgc2VxdWVuY2UgMiwgNCwgNiwgOFxuICAgIG91dHB1dCArPSBtYXAuY2hhckF0KDYzICYgYmxvY2sgPj4gOCAtIGlkeCAlIDEgKiA4KVxuICApIHtcbiAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGlkeCArPSAzIC8gNCk7XG4gICAgaWYgKGNoYXJDb2RlID4gMHhGRikge1xuICAgICAgdGhyb3cgbmV3IEUoKTtcbiAgICB9XG4gICAgYmxvY2sgPSBibG9jayA8PCA4IHwgY2hhckNvZGU7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidG9hO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2J0b2EuanNcbi8vIG1vZHVsZSBpZCA9IDMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      }\n\n      if (!utils.isArray(val)) {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzPzlhNmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH1cblxuICAgICAgaWYgKCF1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzXG4vLyBtb2R1bGUgaWQgPSAzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzPzdlYjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzXG4vLyBtb2R1bGUgaWQgPSAzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///34\n");

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        var cookie = [];\n        cookie.push(name + '=' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push('expires=' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push('path=' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push('domain=' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push('secure');\n        }\n\n        document.cookie = cookie.join('; ');\n      },\n\n      read: function read(name) {\n        var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, '', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })()\n);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanM/MDQ1MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDO0FBQ3hDLE9BQU87O0FBRVA7QUFDQSwwREFBMEQsd0JBQXdCO0FBQ2xGO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLDZCQUE2QixhQUFhLEVBQUU7QUFDNUM7QUFDQTtBQUNBLEdBQUc7QUFDSCIsImZpbGUiOiIzNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgfSxcblxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH0pKClcbik7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qc1xuLy8gbW9kdWxlIGlkID0gMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanM/MzgwOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qc1xuLy8gbW9kdWxlIGlkID0gMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    var msie = /(msie|trident)/i.test(navigator.userAgent);\n    var urlParsingNode = document.createElement('a');\n    var originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      var href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n                  urlParsingNode.pathname :\n                  '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })()\n);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcz8xNDJkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckIsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwiZmlsZSI6IjM3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKVxuKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanNcbi8vIG1vZHVsZSBpZCA9IDM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///37\n");

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanM/NDBiMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qc1xuLy8gbW9kdWxlIGlkID0gMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///38\n");

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcz8xNWNhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLGVBQWU7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSIsImZpbGUiOiIzOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanNcbi8vIG1vZHVsZSBpZCA9IDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///39\n");

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcz8zYzQxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjQwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qc1xuLy8gbW9kdWxlIGlkID0gNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///40\n");

/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_register_vue__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_register_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_register_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_axios__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_axios__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'app',\n  components: {\n    register: __WEBPACK_IMPORTED_MODULE_0__components_register_vue___default.a\n  },\n  data: function data() {\n    return {\n      username: null\n\n    };\n  },\n\n  created: function created() {\n    var _this = this;\n\n    __WEBPACK_IMPORTED_MODULE_1_axios___default.a.get(\"/api/user/get/\").then(function (response) {\n      _this.username = response.data;\n    }).catch(function (error) {});\n  }\n\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///41\n");

/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'album',\n  data: function data() {\n    return {\n      albumData: '',\n      trackData: '',\n      lyricData: '',\n      abIndex: 1\n    };\n  },\n\n  created: function created() {\n    var _this = this;\n\n    __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get(\"/api/albums/get/\" + this.$route.params.artist + \"/\" + this.$route.params.title).then(function (response) {\n      _this.trackData = response.data;\n      _this.albumData = response.data;\n    }).catch(function (error) {});\n  },\n  methods: {\n    say: function say(artist, title) {\n      var _this2 = this;\n\n      __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get(\"/api/track/get/lyrics/\" + artist + \"/\" + title).then(function (response) {\n\n        _this2.lyricData = response.data.lyric;\n      }).catch(function (error) {});\n    }\n\n  }\n\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYWxidW0udnVlPzFlNGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZEQTtBQUNBO1FBRUE7d0JBQ0E7O2lCQUVBO2lCQUNBO2lCQUNBO2VBRUE7QUFMQTtBQU1BOzs7QUFDQTs7Z0lBQ0EsZ0NBQ0E7aUNBQ0E7aUNBRUE7QUFDQSw4QkFFQSxDQUNBO0FBQ0E7OztBQUVBOztrR0FDQSxnQ0FFQTs7eUNBRUE7QUFDQSxnQ0FFQSxDQUVBO0FBS0E7O0FBaEJBOztBQXJCQSIsImZpbGUiOiI0Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cclxuICA8ZGl2IGNsYXNzPVwiYWxidW1cIj5cclxuXHJcbiAgICA8ZGl2IGlkPVwibHlyaWNUYWJcIj5cclxuICAgICAgPCEtLSBUYWJzIHdpdGggY2FyZCBpbnRlZ3JhdGlvbiAtLT5cclxuICAgICAgPGItY2FyZD5cclxuICAgICAgICA8aDI+U29uZyBseXJpY3M6IHt7JHJvdXRlLnBhcmFtcy50aXRsZX19PC9oMj5cclxuICAgICAgICA8YnI+XHJcblxyXG4gICAgICAgIDxiLXRhYnMgc21hbGwgY2FyZCByZWY9XCJ0YWJzXCIgdi1tb2RlbD1cInRhYkluZGV4XCI+XHJcblxyXG4gICAgICAgICAgPGItY2FyZD5cclxuICAgICAgICAgIDxwcmU+XHJcbiAgICAgICAgICB7e3RoaXMubHlyaWNEYXRhfX1cclxuICAgICAgICAgIDwvcHJlPlxyXG4gICAgICAgICAgICA8L2ItY2FyZD5cclxuXHJcbiAgICAgICAgICA8ZGl2IHYtZm9yPVwiZGF0YSBpbiB0cmFja0RhdGFcIiA6a2V5PVwiZGF0YVwiPlxyXG5cclxuICAgICAgICAgICAgPGItdGFiIHYtZm9yPVwiZGF0YTIgaW4gZGF0YS5tZWRpYVswXS50cmFja3NcIiA6a2V5PVwiZGF0YTJcIiB2LW9uOmNsaWNrPVwic2F5KGRhdGEuYXJ0aXN0LGRhdGEyLnRpdGxlKVwiIDp0aXRsZT1cImRhdGEyLnRpdGxlXCI+XHJcblxyXG4gICAgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8L2ItdGFiPlxyXG5cclxuICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8L2ItdGFicz5cclxuXHJcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LW11dGVkXCI+Q3VycmVudCBUYWI6IHt7dGFiSW5kZXggKyAxfX08L3NwYW4+XHJcbiAgICAgIDwvYi1jYXJkPlxyXG5cclxuICAgICAgPCEtLSBDb250cm9sIGJ1dHRvbnMtLT5cclxuXHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuXHJcbiAgPCEtLSA8cD57e3RoaXMubHlyaWNEYXRhfX0gPC9wPlxyXG4gICAgICA8dWw+XHJcbiAgICAgICAgPGxpIHYtZm9yPVwiZGF0YSBpbiB0cmFja0RhdGFcIiA6a2V5PVwiZGF0YVwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImFsYnVtUGljXCI+XHJcbiAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJhbGJ1bVBpY3R1cmVcIiA6c3JjPVwiZGF0YS5pbWFnZXNbMF0udXJsICsgJz91c2VyX2tleT00NjhjMWNmYjdiOTZmODE2NTQ0ZTg2ZmEwNjk4YjBjZCZpbmM9aW1hZ2VzJm1heFJlc3VsdENvdW50PTEnXCIgLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiB2LWZvcj1cImRhdGEyIGluIGRhdGEubWVkaWFbMF0udHJhY2tzXCIgOmtleT1cImRhdGEyXCI+XHJcblxyXG4gICAgICAgICAgICA8cD4ge3tkYXRhMi50aXRsZX19IDwvcD5cclxuICAgICAgICAgICAgPGJ1dHRvbiB2LW9uOmNsaWNrPVwic2F5KGRhdGEuYXJ0aXN0LGRhdGEyLnRpdGxlKVwiPkdldCBseXJpY3M8L2J1dHRvbj5cclxuXHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgPC91bD4gLS0+XHJcblxyXG4gIDwhLS0gPGEgOmhyZWY9J2RhdGEudXJsJyB0YXJnZXQ9XCJfYmxhbmtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJhbGJ1bVBpY3R1cmVcIiA6c3JjPSdkYXRhLnBpY3R1cmUnIGFsdD0naW1nJyAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gLS0+XHJcblxyXG4gIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIG5hbWU6ICdhbGJ1bScsXHJcbiAgZGF0YSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGFsYnVtRGF0YTogJycsXHJcbiAgICAgIHRyYWNrRGF0YTogJycsXHJcbiAgICAgIGx5cmljRGF0YTogJycsXHJcbiAgICAgIGFiSW5kZXg6IDEsXHJcbiAgICB9XHJcbiAgfSxcclxuICBjcmVhdGVkOiBmdW5jdGlvbigpIHtcclxuICAgIGF4aW9zLmdldChcIi9hcGkvYWxidW1zL2dldC9cIiArIHRoaXMuJHJvdXRlLnBhcmFtcy5hcnRpc3QgKyBcIi9cIiArIHRoaXMuJHJvdXRlLnBhcmFtcy50aXRsZSlcclxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgdGhpcy50cmFja0RhdGEgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgIHRoaXMuYWxidW1EYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuXHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xyXG5cclxuICAgICAgfSk7XHJcbiAgfSxcclxuICBtZXRob2RzOiB7XHJcbiAgICBzYXk6IGZ1bmN0aW9uKGFydGlzdCwgdGl0bGUpIHtcclxuICAgICAgYXhpb3MuZ2V0KFwiL2FwaS90cmFjay9nZXQvbHlyaWNzL1wiICsgYXJ0aXN0ICsgXCIvXCIgKyB0aXRsZSlcclxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcclxuXHJcbiAgICAgICAgICB0aGlzLmx5cmljRGF0YSA9IHJlc3BvbnNlLmRhdGEubHlyaWM7XHJcblxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gIH1cclxuXHJcbn1cclxuPC9zY3JpcHQ+XHJcbjwhLS0gQWRkIFwic2NvcGVkXCIgYXR0cmlidXRlIHRvIGxpbWl0IENTUyB0byB0aGlzIGNvbXBvbmVudCBvbmx5IC0tPlxyXG48c3R5bGUgc2NvcGVkPlxyXG5oMSxcclxuaDIge1xyXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcbn1cclxuXHJcbnVsIHtcclxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XHJcbiAgcGFkZGluZzogMDtcclxufVxyXG5cclxubGkge1xyXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICBtYXJnaW46IDAgMTBweDtcclxufVxyXG5cclxuYSB7XHJcbiAgY29sb3I6ICM0MmI5ODM7XHJcbn1cclxuXHJcbi5hbGJ1bVBpYyB7XHJcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gIGJvcmRlcjogNXB4IHNvbGlkICMxZDIxMjA7XHJcbiAgaGVpZ2h0OiAxNWVtO1xyXG4gIHdpZHRoOiAxNWVtO1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIG1hcmdpbjogYXV0bztcclxuICBtYXJnaW46IDFlbTtcclxufVxyXG5cclxuXHJcblxyXG4uYWxidW1QaWN0dXJlIHtcclxuICB3aWR0aDogMTAwJTtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gIG1heC1oZWlnaHQ6IDEwMCU7XHJcbn1cclxuXHJcbiNseXJpY1RhYiB7XHJcbiAgd2lkdGg6IDkwJTtcclxuICBtYXJnaW4tdG9wOiA1ZW07XHJcbiAgbWFyZ2luLWJvdHRvbTogMWVtO1xyXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xyXG4gIG1hcmdpbi1yaWdodDogYXV0bztcclxufVxyXG48L3N0eWxlPlxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBhbGJ1bS52dWU/NThmYmQ5MmMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///42\n");

/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'artist',\n  data: function data() {\n    return {\n      albumResult: '',\n      picResult: '',\n      reviewResult: '',\n      infoResult: '',\n      spotifyResult: '',\n      recResult: '',\n      albumId: '',\n      playerId: '',\n      spotifyAlbums: '',\n      artistDescription: '',\n      average: 0,\n\n      id: this.$route.params.id,\n      username: null\n\n    };\n  },\n\n  created: function created() {\n    var _this = this;\n\n    __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get(\"/api/artists/bio/\" + this.$route.params.id).then(function (response) {\n      _this.artistDescription = response.data.media.data.text;\n    }).catch(function (error) {});\n\n    __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get(\"/api/spotify/get/related/\" + this.$route.params.spotify).then(function (response) {\n      _this.recResult = response.data.artists;\n    }).catch(function (error) {});\n    __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get(\"/api/user/get/\").then(function (response) {\n      _this.username = response.data;\n    }).catch(function (error) {});\n    __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get(\"/api/albums/\" + this.$route.params.name).then(function (response) {\n      _this.albumResult = response.data.data;\n    }).catch(function (error) {\n      alert(error);\n    });\n    __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get(\"/api/spotify/get/toptracks/\" + this.$route.params.spotify).then(function (response) {\n      _this.spotifyResult = response.data.tracks;\n    }).catch(function (error) {\n      alert(error);\n    });\n    __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get(\"/api/artists/info/\" + this.$route.params.id).then(function (response) {\n      _this.infoResult = response.data;\n    }).catch(function (error) {\n      alert(error);\n    });\n    __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get(\"/api/reviews/get/\" + this.$route.params.id).then(function (response) {\n      _this.reviewResult = response.data;\n      var total = 0.0;\n      var count = 0.0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.reviewResult[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var value = _step.value;\n\n          total += value.score;\n          count += 1;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this.average = Math.round(total / count * 10) / 10;\n    }).catch(function (error) {\n      alert(error);\n\n      this.albumResult;\n    });\n\n    __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get(\"/api/spotify/get/albums/\" + this.$route.params.spotify).then(function (response) {\n      _this.spotifyAlbums = response.data.items;\n      _this.playerId = _this.spotifyAlbums[0].id;\n    }).catch(function (error) {\n      alert(error);\n    });\n  },\n  methods: {\n\n    add: function add(artist, title, mbid) {\n      __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get('/api/user/albums/add/' + artist + '/' + title + '/' + mbid).then(function (response) {\n        if (response.data == \"Added\") alert(title + \" added\");else alert(\"Log in!\");\n      }).catch(function (error) {});\n    },\n\n    updateSpotify: function updateSpotify(albumId) {\n\n      albumId = albumId.replace(/\\s+/g, '').toLowerCase();\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.spotifyAlbums[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var data = _step2.value;\n\n\n          if (data.name.replace(/\\s+/g, '').toLowerCase().includes(albumId)) {\n\n            this.playerId = data.id;\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///43\n");

/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__register_vue__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__register_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__register_vue__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n\n    name: 'login',\n    components: {\n        register: __WEBPACK_IMPORTED_MODULE_1__register_vue___default.a\n\n    },\n\n    data: {\n        username: '',\n        password: ''\n\n    },\n    methods: {\n        clearData: function clearData() {\n            this.username = '';\n            this.password = '';\n        },\n        handleOk: function handleOk(e) {\n            e.cancel();\n            if (!this.username) {\n                alert('Please enter your name');\n            } else if (!this.password) {\n                alert('Please enter your password');\n            } else {\n                this.handleLogin();\n            }\n        },\n        handleLogin: function handleLogin() {\n            var _this = this;\n\n            __WEBPACK_IMPORTED_MODULE_0_axios___default.a.post('/login', {\n                username: this.username,\n                password: this.password\n\n            }).then(function (response) {}).catch(function (e) {\n                _this.errors.push(e);\n            });\n\n            this.clearData();\n            this.$refs.modal1.hide();\n        }\n    }\n\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbG9naW4udnVlPzA2MTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVCQTtBQUNBO0FBQ0E7O1VBR0E7O0FBS0E7O0FBSkE7OztrQkFNQTtrQkFHQTs7QUFKQTs7d0NBTUE7NEJBQ0E7NEJBRUE7QUFDQTt1Q0FDQTtjQUNBO2dDQUNBO3NCQUNBO0FBQ0EsdUNBQ0E7c0JBQ0E7QUFDQSxtQkFDQTtxQkFFQTtBQUNBO0FBQ0E7O0FBR0E7OzsrQkFFQTsrQkFHQTs7QUFKQSx5Q0FLQSxzQkFDQTtrQ0FDQTtBQUVBOztpQkFDQTs4QkFDQTtBQUlBO0FBckNBOztBQVpBIiwiZmlsZSI6IjQ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cImxvZ2luXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNlbnRlcl9kaXZcIj5cclxuICAgICAgICAgICAgPGZvcm0gYWN0aW9uPVwiL2xvZ2luXCIgbWV0aG9kPVwicG9zdFwiPlxyXG4gICAgICAgICAgICAgICAgPGJyPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwidXNlclwiPlVzZXJuYW1lPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9XCJ1c2VyXCIgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIG5hbWU9XCJ1c2VybmFtZVwiPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJwYXNzd29yZFwiPlBhc3N3b3JkPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9XCJwYXNzd29yZFwiIHR5cGU9XCJwYXNzd29yZFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgbmFtZT1cInBhc3N3b3JkXCI+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwic2VhcmNoQnV0XCIgdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sZyBzaGFkb3dcIj5Mb2dpbjwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGJyPlxyXG4gICAgICAgIDxiLWJ0biBjbGFzcz1cInNoYWRvd1wiIHYtYi1tb2RhbD1cIidyZWdmb3JtJ1wiPlJlZ2lzdGVyPC9iLWJ0bj5cclxuICAgICAgICA8cmVnaXN0ZXI+PC9yZWdpc3Rlcj5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5pbXBvcnQgcmVnaXN0ZXIgZnJvbSAnLi9yZWdpc3Rlci52dWUnXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHJcbiAgICBuYW1lOiAnbG9naW4nLFxyXG4gICAgY29tcG9uZW50czoge1xyXG4gICAgICAgIHJlZ2lzdGVyXHJcblxyXG4gICAgfSxcclxuXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgICAgdXNlcm5hbWU6ICcnLFxyXG4gICAgICAgIHBhc3N3b3JkOiAnJ1xyXG5cclxuICAgIH0sXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgY2xlYXJEYXRhKCkge1xyXG4gICAgICAgICAgICB0aGlzLnVzZXJuYW1lID0gJyc7XHJcbiAgICAgICAgICAgIHRoaXMucGFzc3dvcmQgPSAnJztcclxuXHJcbiAgICAgICAgfSxcclxuICAgICAgICBoYW5kbGVPayhlKSB7XHJcbiAgICAgICAgICAgIGUuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy51c2VybmFtZSkge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoJ1BsZWFzZSBlbnRlciB5b3VyIG5hbWUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghdGhpcy5wYXNzd29yZCkge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoJ1BsZWFzZSBlbnRlciB5b3VyIHBhc3N3b3JkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUxvZ2luKClcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGhhbmRsZUxvZ2luKCkge1xyXG5cclxuXHJcbiAgICAgICAgICAgIGF4aW9zLnBvc3QoYC9sb2dpbmAsIHtcclxuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB0aGlzLnVzZXJuYW1lLFxyXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMucGFzc3dvcmRcclxuXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7IH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMucHVzaChlKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJEYXRhKCk7XHJcbiAgICAgICAgICAgIHRoaXMuJHJlZnMubW9kYWwxLmhpZGUoKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuPC9zY3JpcHQ+XHJcbjwhLS0gQWRkIFwic2NvcGVkXCIgYXR0cmlidXRlIHRvIGxpbWl0IENTUyB0byB0aGlzIGNvbXBvbmVudCBvbmx5IC0tPlxyXG48c3R5bGUgc2NvcGVkPlxyXG4uY2VudGVyX2RpdiB7XHJcbiAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIHdpZHRoOiAzMCUvKiB2YWx1ZSBvZiB5b3VyIGNob2ljZSB3aGljaCBzdWl0cyB5b3VyIGFsaWdubWVudCAqL1xyXG59XHJcblxyXG5oMSxcclxuaDIge1xyXG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcclxufVxyXG5cclxudWwge1xyXG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xyXG4gICAgcGFkZGluZzogMDtcclxufVxyXG5cclxubGkge1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgbWFyZ2luOiAwIDEwcHg7XHJcbn1cclxuXHJcbmEge1xyXG4gICAgY29sb3I6ICM4NzFjYTU7XHJcbn1cclxuXHJcbmxhYmVsIHtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxufVxyXG5cclxuaW5wdXQge1xyXG4gICAgYm94LXNoYWRvdzogMCA0cHggOHB4IDAgcmdiYSgwLCAwLCAwLCAwLjIpLCAwIDZweCAyMHB4IDAgcmdiYSgwLCAwLCAwLCAwLjE5KTtcclxufVxyXG5cclxuLnNoYWRvdyB7XHJcbiAgICBib3gtc2hhZG93OiAwIDRweCA4cHggMCByZ2JhKDAsIDAsIDAsIDAuMiksIDAgNnB4IDIwcHggMCByZ2JhKDAsIDAsIDAsIDAuMTkpO1xyXG59XHJcblxyXG4jc2VhcmNoQnV0IHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICM5QzI3QjA7XHJcbiAgICBib3JkZXItY29sb3I6ICM5QzI3QjA7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbn1cclxuPC9zdHlsZT5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gbG9naW4udnVlPzcxNzk4Y2I1Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///44\n");

/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'profile',\n  data: function data() {\n    return {\n      reviewResult: '',\n      albumResult: '',\n      mobileAdded: ''\n    };\n  },\n\n  components: {},\n\n  created: function created() {\n    var _this = this;\n\n    __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get(\"/api/reviews/get/user/\" + this.$route.params.name).then(function (response) {\n      _this.reviewResult = response.data;\n    }).catch(function (error) {\n      alert(error);\n    });\n    __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get(\"/api/user/albums/get/\" + this.$route.params.name).then(function (response) {\n      _this.albumResult = response.data;\n    }).catch(function (error) {\n      alert(error);\n    });\n\n    __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get(\"/api/user/get/listened/\" + this.$route.params.name).then(function (response) {\n\n      _this.mobileAdded = response.data;\n    }).catch(function (error) {\n      alert(error);\n    });\n  }\n\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///45\n");

/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n\n    name: 'register',\n\n    data: {\n        username: '',\n        password: '',\n        rePass: ''\n\n    },\n    methods: {\n        clearData: function clearData() {\n            this.username = '';\n            this.password = '';\n            this.rePass = '';\n        },\n        handleOk: function handleOk(e) {\n            e.cancel();\n            if (!this.username) {\n                alert('Please enter your name');\n            } else if (!this.password) {\n                alert('Please enter your password');\n            } else if (!this.rePass) {\n                alert('Please re enter your password');\n            } else if (this.password != this.rePass) {\n                alert('Your passwords do not match');\n            } else if (this.password.length < 5) {\n                alert('Your password must be atleast 5 characters long');\n            } else {\n                this.handleSubmit();\n            }\n        },\n        hideModal: function hideModal() {\n            this.$refs.regform.hide();\n        },\n        handleSubmit: function handleSubmit() {\n            var _this = this;\n\n            __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get('/api/user/create/' + this.username + '/' + this.password, {}).then(function (response) {\n                alert(response.data);\n                hideModal();\n            }).catch(function (e) {\n\n                _this.errors.push(e);\n            });\n        }\n    }\n\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vcmVnaXN0ZXIudnVlP2Q0YjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQTtBQUNBOztVQUlBOzs7a0JBRUE7a0JBQ0E7Z0JBR0E7O0FBTEE7O3dDQU9BOzRCQUNBOzRCQUNBOzBCQUVBO0FBQ0E7dUNBQ0E7Y0FDQTtnQ0FDQTtzQkFDQTtBQUNBLHVDQUNBO3NCQUNBO0FBQ0EscUNBQ0E7c0JBQ0E7QUFDQSxxREFDQTtzQkFDQTtBQUVBLGlEQUNBO3NCQUNBO0FBRUEsbUJBQ0E7cUJBRUE7QUFDQTtBQUNBO3dDQUNBOytCQUNBO0FBQ0E7O0FBR0E7O3lIQUVBLDZCQUNBOytCQUNBO0FBQ0E7QUFDQSxrQ0FFQTs7a0NBQ0E7QUFHQTtBQUlBO0FBcERBOztBQVRBIiwiZmlsZSI6IjQ2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cInJlZ2lzdGVyXCI+XHJcbiAgICAgICAgPGRpdj5cclxuXHJcbiAgICAgICAgICAgIDwhLS0gTW9kYWwgQ29tcG9uZW50IC0tPlxyXG4gICAgICAgICAgICA8Yi1tb2RhbCBpZD1cInJlZ2Zvcm1cIiByZWY9XCJyZWdmb3JtXCIgdGl0bGU9XCJTdWJtaXQgeW91ciBhY2NvdW50IGluZm9ybWF0aW9uXCIgQG9rPVwiaGFuZGxlT2tcIiBAc2hvd249XCJjbGVhckRhdGFcIj5cclxuICAgICAgICAgICAgICAgIDxmb3JtIEBzdWJtaXQuc3RvcC5wcmV2ZW50PVwiaGFuZGxlU3VibWl0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGItZm9ybS1pbnB1dCB0eXBlPVwidGV4dFwiIHZhbHVlPVwiXCIgcGxhY2Vob2xkZXI9XCJFbnRlciB5b3VyIG5hbWVcIiB2LW1vZGVsPVwidXNlcm5hbWVcIj48L2ItZm9ybS1pbnB1dD5cclxuICAgICAgICAgICAgICAgICAgICA8Yi1mb3JtLWlucHV0IHR5cGU9XCJwYXNzd29yZFwiIHBsYWNlaG9sZGVyPVwiRW50ZXIgeW91ciBwYXNzd29yZFwiIHYtbW9kZWw9XCJwYXNzd29yZFwiPjwvYi1mb3JtLWlucHV0PlxyXG4gICAgICAgICAgICAgICAgICAgIDxiLWZvcm0taW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgcGxhY2Vob2xkZXI9XCJSZS1lbnRlciB5b3VyIHBhc3N3b3JkXCIgdi1tb2RlbD1cInJlUGFzc1wiPjwvYi1mb3JtLWlucHV0PlxyXG4gICAgICAgICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgICAgICA8L2ItbW9kYWw+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgXHJcbiAgICAgXHJcbiAgICA8L2Rpdj5cclxuICAgIFxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcblxyXG4gICAgbmFtZTogJ3JlZ2lzdGVyJyxcclxuXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgICAgdXNlcm5hbWU6ICcnLFxyXG4gICAgICAgIHBhc3N3b3JkOiAnJyxcclxuICAgICAgICByZVBhc3M6ICcnLFxyXG5cclxuICAgIH0sXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgY2xlYXJEYXRhKCkge1xyXG4gICAgICAgICAgICB0aGlzLnVzZXJuYW1lID0gJyc7XHJcbiAgICAgICAgICAgIHRoaXMucGFzc3dvcmQgPSAnJztcclxuICAgICAgICAgICAgdGhpcy5yZVBhc3MgPSAnJztcclxuXHJcbiAgICAgICAgfSxcclxuICAgICAgICBoYW5kbGVPayhlKSB7XHJcbiAgICAgICAgICAgIGUuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy51c2VybmFtZSkge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoJ1BsZWFzZSBlbnRlciB5b3VyIG5hbWUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghdGhpcy5wYXNzd29yZCkge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoJ1BsZWFzZSBlbnRlciB5b3VyIHBhc3N3b3JkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIXRoaXMucmVQYXNzKSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgnUGxlYXNlIHJlIGVudGVyIHlvdXIgcGFzc3dvcmQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnBhc3N3b3JkICE9IHRoaXMucmVQYXNzKSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgnWW91ciBwYXNzd29yZHMgZG8gbm90IG1hdGNoJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucGFzc3dvcmQubGVuZ3RoIDwgNSkge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoJ1lvdXIgcGFzc3dvcmQgbXVzdCBiZSBhdGxlYXN0IDUgY2hhcmFjdGVycyBsb25nJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVTdWJtaXQoKVxyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGlkZU1vZGFsKCkge1xyXG4gICAgICAgICAgICB0aGlzLiRyZWZzLnJlZ2Zvcm0uaGlkZSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFuZGxlU3VibWl0KCkge1xyXG5cclxuXHJcbiAgICAgICAgICAgIGF4aW9zLmdldChgL2FwaS91c2VyL2NyZWF0ZS9gICsgdGhpcy51c2VybmFtZSArIGAvYCArIHRoaXMucGFzc3dvcmQsIHtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBhbGVydChyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICBoaWRlTW9kYWwoKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2goZSlcclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgIH1cclxuXHJcbn1cclxuXHJcbjwvc2NyaXB0PlxyXG48IS0tIEFkZCBcInNjb3BlZFwiIGF0dHJpYnV0ZSB0byBsaW1pdCBDU1MgdG8gdGhpcyBjb21wb25lbnQgb25seSAtLT5cclxuPHN0eWxlIHNjb3BlZD5cclxuXHJcbjwvc3R5bGU+XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHJlZ2lzdGVyLnZ1ZT8xNTkwYWJhOCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///46\n");

/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\nvar _name$data$data$metho;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_name$data$data$metho = {\n\n  name: 'search',\n\n  data: {\n    searchValue: '',\n    resultValue: \"\"\n  }\n\n}, _defineProperty(_name$data$data$metho, 'data', function data() {\n  return {\n    resultValue: \"\",\n    searchValue: \"\",\n    seen: false\n  };\n}), _defineProperty(_name$data$data$metho, 'methods', {\n  artistSearch: function artistSearch() {\n    var _this = this;\n\n    __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get(\"/api/artists/\" + this.searchValue).then(function (response) {\n\n      _this.resultValue = response.data.data;\n\n      if (typeof _this.resultValue[0] !== 'undefined' && _this.searchvalue !== '') {\n\n        _this.seen = true;\n      }\n    }).catch(function (error) {\n      alert(error);\n    });\n  }\n}), _name$data$data$metho);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc2VhcmNoLnZ1ZT9kNzI1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1Q0E7QUFHQTs7UUFFQTs7O2lCQUVBO2lCQU1BO0FBUEE7O2tFQVFBOztpQkFFQTtpQkFDQTtVQUVBO0FBSkE7QUFNQTs7QUFJQTs7NkVBQ0Esc0NBRUE7O3dDQUVBOzttRkFFQTs7cUJBQ0E7QUFFQTtBQUNBLDhCQUNBO1lBQ0E7QUFHQTtBQUVBO0FBcEJBIiwiZmlsZSI6IjQ3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxyXG4gIDxiLWNvbnRhaW5lcj5cclxuICAgIDxiLXJvdz5cclxuICAgICAgPGItY29sPjwvYi1jb2w+XHJcbiAgICAgIDxiLWNvbCBjb2xzPVwiOFwiPlxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICA8YnI+XHJcbiAgICAgICAgICA8SDE+U2VhcmNoIGZvciBhbiBhcnRpc3Q8L0gxPlxyXG4gICAgICAgICAgPGZvcm0gaWQ9XCJzZWFyY2hCYXJcIiBAc3VibWl0LnN0b3AucHJldmVudD1cImFydGlzdFNlYXJjaFwiPlxyXG4gICAgICAgICAgICA8Yi1mb3JtLWlucHV0IGlkPVwiaW5wdXRGaWVsZFwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJGb3IgZXhhbXBsZSBNZXRhbGxpY2EuLi5cIiB2LW1vZGVsPVwic2VhcmNoVmFsdWVcIj48L2ItZm9ybS1pbnB1dD5cclxuICAgICAgICAgICAgPHA+PC9wPlxyXG4gICAgICAgICAgICA8Yi1idXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwic2VhcmNoLWJ1dCBzaGFkb3dcIj5TZWFyY2g8L2ItYnV0dG9uPlxyXG4gICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2ItY29sPlxyXG4gICAgICA8Yi1jb2w+PC9iLWNvbD5cclxuXHJcbiAgICA8L2Itcm93PlxyXG4gICAgPHA+PC9wPlxyXG4gICAgPGItcm93IGlkPVwic2VhcmNoUmVzdWx0c1wiPlxyXG4gICAgICA8Yi1jb2w+PC9iLWNvbD5cclxuICAgICAgPGItY29sIGNvbHM9XCIxMFwiPlxyXG4gICAgICAgIDxkaXYgaWQ9XCJzZWFyY2hCZ1wiIHYtaWY9XCJzZWVuXCI+XHJcblxyXG4gICAgICAgICAgPG9sPlxyXG4gICAgICAgICAgICA8bGkgdi1mb3I9XCJkYXRhIGluIHJlc3VsdFZhbHVlXCIgdi1iaW5kOmtleT1cImRhdGFcIj5cclxuICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgaWQ9XCJyZXN1bHRQcmludFwiIDp0bz1cInsgbmFtZTogJ2FydGlzdCcsIHBhcmFtczogeyBuYW1lOiAgZGF0YS5uYW1lLCAgIGlkOiBkYXRhLm11c2ljYnJhaW56X2lkLCBzcG90aWZ5OiBkYXRhLnNwb3RpZnlfaWQgIH19XCI+IHt7IGRhdGEubmFtZSB9fSA8L3JvdXRlci1saW5rPlxyXG5cclxuICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgIDwvb2w+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvYi1jb2w+XHJcbiAgICAgIDxiLWNvbD48L2ItY29sPlxyXG4gICAgPC9iLXJvdz5cclxuXHJcbiAgPC9iLWNvbnRhaW5lcj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHJcbiAgbmFtZTogJ3NlYXJjaCcsXHJcblxyXG4gIGRhdGE6IHtcclxuICAgIHNlYXJjaFZhbHVlOiAnJyxcclxuICAgIHJlc3VsdFZhbHVlOiBcIlwiLFxyXG4gIH0sXHJcblxyXG5cclxuXHJcblxyXG4gIGRhdGEoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXN1bHRWYWx1ZTogXCJcIixcclxuICAgICAgc2VhcmNoVmFsdWU6IFwiXCIsXHJcbiAgICAgIHNlZW46IGZhbHNlXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgbWV0aG9kczoge1xyXG5cclxuICAgIGFydGlzdFNlYXJjaCgpIHtcclxuXHJcbiAgICAgIGF4aW9zLmdldChcIi9hcGkvYXJ0aXN0cy9cIiArIHRoaXMuc2VhcmNoVmFsdWUpXHJcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcblxyXG4gICAgICAgICAgdGhpcy5yZXN1bHRWYWx1ZSA9IHJlc3BvbnNlLmRhdGEuZGF0YTtcclxuICAgICAgICAgXHJcbiAgICAgICAgICBpZiAoKHR5cGVvZiB0aGlzLnJlc3VsdFZhbHVlWzBdICE9PSAndW5kZWZpbmVkJykgJiYgKHRoaXMuc2VhcmNodmFsdWUgIT09ICcnKSkge1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLnNlZW4gPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xyXG4gICAgICAgICAgYWxlcnQoZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG48L3NjcmlwdD5cclxuPCEtLSBzdHlsaW5nIGZvciB0aGUgY29tcG9uZW50IC0tPlxyXG48c3R5bGU+XHJcbiNhYm91dCB7XHJcbiAgZm9udC1mYW1pbHk6ICdBdmVuaXInLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xyXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xyXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGNvbG9yOiAjMmMzZTUwO1xyXG4gIG1hcmdpbi10b3A6IDYwcHg7XHJcbn1cclxuXHJcbiNzZWFyY2hSZXN1bHRzIHtcclxuICBmb250LXNpemU6IDEuNWVtO1xyXG59XHJcblxyXG4uc2VhcmNoLWJ1dCB7XHJcbiAgY29sb3I6ICNmZmY7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzlDMjdCMDtcclxuICBib3JkZXItY29sb3I6ICM5QzI3QjA7XHJcbiAgYm94LXNoYWRvdzogMCA0cHggOHB4IDAgcmdiYSgwLCAwLCAwLCAwLjIpLCAwIDZweCAyMHB4IDAgcmdiYSgwLCAwLCAwLCAwLjE5KTtcclxuICBtYXJnaW4tdG9wOiAyZW07XHJcbiAgd2lkdGg6IDMwJTtcclxufVxyXG5cclxuaDEge1xyXG4gIGNvbG9yOiB3aGl0ZTtcclxufVxyXG5cclxuI3NlYXJjaEJhciB7XHJcbiAgbWFyZ2luLXRvcDogMmVtO1xyXG59XHJcblxyXG4jaW5wdXRGaWVsZCB7XHJcbiAgYm94LXNoYWRvdzogMCA0cHggOHB4IDAgcmdiYSgwLCAwLCAwLCAwLjIpLCAwIDZweCAyMHB4IDAgcmdiYSgwLCAwLCAwLCAwLjE5KTtcclxuICBoZWlnaHQ6IDNlbTtcclxuICBmb250LXNpemU6IDEuNGVtO1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gXHJcbn1cclxuXHJcbiNzZWFyY2hCZyB7XHJcbiAgYmFja2dyb3VuZDogd2hpdGVzbW9rZTtcclxuICBib3JkZXItcmFkaXVzOiAwLjVlbTtcclxuICB3aWR0aDogMTAwJTtcclxuICBtYXJnaW4tdG9wOiAyZW07XHJcbiAgcGFkZGluZzogMWVtO1xyXG4gIGJveC1zaGFkb3c6IDAgNHB4IDhweCAwIHJnYmEoMCwgMCwgMCwgMC4yKSwgMCA2cHggMjBweCAwIHJnYmEoMCwgMCwgMCwgMC4xOSk7XHJcbn1cclxuXHJcbiNyZXN1bHRQcmludCB7XHJcbiAgY29sb3I6ICM4NzFjYTU7XHJcbiAgdGV4dC1zaGFkb3c6XHJcblx0XHQtMC41cHggLTAuNXB4IDAgIzAwMCxcclxuXHRcdDAuNXB4IC0wLjVweCAwICMwMDAsXHJcblx0XHQtMC41cHggMC41cHggMCAjMDAwLFxyXG5cdFx0MC41cHggMC41cHggMCAjMDAwO1xyXG4gICAgZm9udC1zaXplOiAxLjNlbTtcclxufVxyXG5cclxuPC9zdHlsZT5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc2VhcmNoLnZ1ZT82MjAzMmU3MCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///47\n");

/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n\n    name: 'statistics',\n    data: function data() {\n        return {\n            albumData: '',\n            tablePos: 0\n\n        };\n    },\n\n    created: function created() {\n        var _this = this;\n\n        __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get(\"/api/albums/get/all\").then(function (response) {\n\n            _this.albumData = response.data;\n        }).catch(function (error) {\n            alert(error);\n        });\n    }\n\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3RhdGlzdGljcy52dWU/MDVlMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZCQTs7QUFFQTs7VUFHQTswQkFDQTs7dUJBRUE7c0JBR0E7O0FBSkE7QUFLQTs7O0FBRUE7OzBEQUNBLGdEQUVBOzt1Q0FFQTtBQUNBLGtDQUNBO2tCQUNBO0FBR0E7QUFFQTs7QUF2QkEiLCJmaWxlIjoiNDguanMiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGlkPVwidGFibGVCZ1wiPlxyXG4gICAgICAgIDxoMT5Nb3N0IHBvcHVsYXIgYWxidW1zPC9oMT5cclxuXHJcbiAgICAgICAgPHRhYmxlIGNsYXNzPVwidGFibGUgdGFibGUtcmVzcG9uc2l2ZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWhvdmVyXCI+XHJcblxyXG4gICAgICAgICAgICA8IS0tIGNlbnRlciBoZWFkZXJzLCBmaXggbG9nb3V0LCBmaXggcmV2aWV3IHNpemVzIC0tPlxyXG4gICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRoPlRpbWVzIGFkZGVkPC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8dGg+QWxidW0gdGl0bGU8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0aD5BcnRpc3Q8L3RoPlxyXG5cclxuICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICAgIDx0ciB2LWZvcj1cImRhdGEgaW4gYWxidW1EYXRhXCIgdi1iaW5kOmtleT1cImRhdGFcIj5cclxuICAgICAgICAgICAgICAgICAgICA8dGQ+e3tkYXRhLmFkZGVkfX08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZD57e2RhdGEudGl0bGV9fTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPnt7ZGF0YS5hcnRpc3R9fTwvdGQ+XHJcblxyXG4gICAgICAgICAgICAgICAgPC90cj5cclxuXHJcbiAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgPC90YWJsZT5cclxuXHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD5cclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHJcbiAgICBuYW1lOiAnc3RhdGlzdGljcycsXHJcbiAgICBkYXRhKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGFsYnVtRGF0YTogJycsXHJcbiAgICAgICAgICAgIHRhYmxlUG9zOiAwLFxyXG5cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY3JlYXRlZDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGF4aW9zLmdldChcIi9hcGkvYWxidW1zL2dldC9hbGxcIilcclxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5hbGJ1bURhdGEgPSByZXNwb25zZS5kYXRhO1xyXG5cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydChlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICB9XHJcblxyXG59XHJcbjwvc2NyaXB0PlxyXG48IS0tIEFkZCBcInNjb3BlZFwiIGF0dHJpYnV0ZSB0byBsaW1pdCBDU1MgdG8gdGhpcyBjb21wb25lbnQgb25seSAtLT5cclxuPHN0eWxlIHNjb3BlZD5cclxuaDEge1xyXG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcclxuICAgIGNvbG9yOiBibGFjaztcclxuICAgIG1hcmdpbjogYXV0bztcclxuICAgIHBhZGRpbmctdG9wOiAwLjVlbTtcclxuICAgIHBhZGRpbmctYm90dG9tOiAwLjVlbTtcclxufVxyXG5cclxuaDIge1xyXG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcclxufVxyXG5cclxudWwge1xyXG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xyXG4gICAgcGFkZGluZzogMDtcclxufVxyXG5cclxuXHJcblxyXG5hIHtcclxuICAgIGNvbG9yOiAjODcxY2E1O1xyXG59XHJcblxyXG4uc3RhdGlzdGljcyB7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbn1cclxuXHJcbnRoZWFkIHtcclxuICAgIGRpc3BsYXk6IHRhYmxlLWhlYWRlci1ncm91cDtcclxufVxyXG5cclxuI3RhYmxlQmcge1xyXG4gICAgaGVpZ2h0OiA4MCU7XHJcbiAgICB3aWR0aDogOTAlO1xyXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XHJcbiAgICBtYXJnaW4tdG9wOiA1JTtcclxuICAgIGJhY2tncm91bmQ6IHdoaXRlc21va2U7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxZW07XHJcbiAgICBib3gtc2hhZG93OiAwIDRweCA4cHggMCByZ2JhKDAsIDAsIDAsIDAuMiksIDAgNnB4IDIwcHggMCByZ2JhKDAsIDAsIDAsIDAuMTkpO1xyXG4gICAgYm9yZGVyOiA0cHggc29saWQgI2JlNDVlMDtcclxuICAgXHJcbn1cclxuXHJcbnRoIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgZm9udC1zaXplOiAxLjVlbTtcclxufVxyXG48L3N0eWxlPlxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzdGF0aXN0aWNzLnZ1ZT84ZTUwMTc1NCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///48\n");

/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__App_vue__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__App_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__App_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_bootstrap_vue_dist_bootstrap_vue_esm__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_router__ = __webpack_require__(22);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_profile_vue__ = __webpack_require__(19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_profile_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__components_profile_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_search_vue__ = __webpack_require__(20);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_search_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__components_search_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__components_artist_vue__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__components_artist_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__components_artist_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__components_album_vue__ = __webpack_require__(16);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__components_album_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__components_album_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__components_login_vue__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__components_login_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8__components_login_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__components_statistics_vue__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__components_statistics_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9__components_statistics_vue__);\n\n\n\n\n//import the vue router\n\n\n//tell vue to use the router\n__WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */].use(__WEBPACK_IMPORTED_MODULE_2_bootstrap_vue_dist_bootstrap_vue_esm__[\"a\" /* default */]);\n__WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */].use(__WEBPACK_IMPORTED_MODULE_3_vue_router__[\"a\" /* default */]);\n\n//import the hello component\n\n//import the about component\n\n//define your routes\n\n\n\n\n\n\n\n\nvar routes = [{ path: '/', component: __WEBPACK_IMPORTED_MODULE_5__components_search_vue___default.a }, { path: '/login', component: __WEBPACK_IMPORTED_MODULE_8__components_login_vue___default.a }, { path: '/statistics', component: __WEBPACK_IMPORTED_MODULE_9__components_statistics_vue___default.a }, { name: 'profile', path: '/profile/:name', component: __WEBPACK_IMPORTED_MODULE_4__components_profile_vue___default.a }, { name: 'artist', path: '/artist/:name/:id/:spotify', component: __WEBPACK_IMPORTED_MODULE_6__components_artist_vue___default.a }, { name: 'album', path: '/album/:title/:id/:artist', component: __WEBPACK_IMPORTED_MODULE_7__components_album_vue___default.a }];\n\n// Create the router instance and pass the `routes` option\n// You can pass in additional options here, but let's\n// keep it simple for now.\nvar router = new __WEBPACK_IMPORTED_MODULE_3_vue_router__[\"a\" /* default */]({\n  routes: routes, // short for routes: routes\n  mode: 'history'\n});\n\nnew __WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */]({\n  el: '#app',\n  render: function render(h) {\n    return h(__WEBPACK_IMPORTED_MODULE_1__App_vue___default.a);\n  },\n  router: router\n}).$mount('#app'); //mount the router on the app\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz8zNDc5Il0sIm5hbWVzIjpbIlZ1ZSIsInVzZSIsInJvdXRlcyIsInBhdGgiLCJjb21wb25lbnQiLCJuYW1lIiwicm91dGVyIiwibW9kZSIsImVsIiwicmVuZGVyIiwiaCIsIiRtb3VudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBOztBQUlBO0FBQ0E7O0FBRUE7QUFDQSxvREFBQUEsQ0FBSUMsR0FBSixDQUFRLHFGQUFSO0FBQ0Esb0RBQUFELENBQUlDLEdBQUosQ0FBUSwyREFBUjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBR0EsSUFBTUMsU0FBUyxDQUViLEVBQUVDLE1BQU0sR0FBUixFQUFhQyxXQUFXLDhEQUF4QixFQUZhLEVBSWIsRUFBRUQsTUFBTSxRQUFSLEVBQWtCQyxXQUFXLDZEQUE3QixFQUphLEVBTWIsRUFBRUQsTUFBTSxhQUFSLEVBQXVCQyxXQUFXLGtFQUFsQyxFQU5hLEVBUWIsRUFBRUMsTUFBTSxTQUFSLEVBQW1CRixNQUFNLGdCQUF6QixFQUEyQ0MsV0FBVywrREFBdEQsRUFSYSxFQVViLEVBQUVDLE1BQU0sUUFBUixFQUFrQkYsTUFBTSw0QkFBeEIsRUFBc0RDLFdBQVcsOERBQWpFLEVBVmEsRUFZYixFQUFFQyxNQUFNLE9BQVIsRUFBaUJGLE1BQU0sMkJBQXZCLEVBQW9EQyxXQUFXLDZEQUEvRCxFQVphLENBQWY7O0FBZ0JBO0FBQ0E7QUFDQTtBQUNBLElBQU1FLFNBQVMsSUFBSSwyREFBSixDQUFjO0FBQzNCSixnQkFEMkIsRUFDbkI7QUFDUkssUUFBTTtBQUZxQixDQUFkLENBQWY7O0FBS0EsSUFBSSxvREFBSixDQUFRO0FBQ05DLE1BQUksTUFERTtBQUVOQyxVQUFRO0FBQUEsV0FBS0MsRUFBRSxnREFBRixDQUFMO0FBQUEsR0FGRjtBQUdOSjtBQUhNLENBQVIsRUFJR0ssTUFKSCxDQUlVLE1BSlYsRSxDQUlpQiIsImZpbGUiOiI0OS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJ1xyXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwLnZ1ZSdcclxuaW1wb3J0IEJvb3RzdHJhcFZ1ZSBmcm9tICdib290c3RyYXAtdnVlL2Rpc3QvYm9vdHN0cmFwLXZ1ZS5lc20nO1xyXG5cclxuXHJcblxyXG4vL2ltcG9ydCB0aGUgdnVlIHJvdXRlclxyXG5pbXBvcnQgVnVlUm91dGVyIGZyb20gJ3Z1ZS1yb3V0ZXInXHJcblxyXG4vL3RlbGwgdnVlIHRvIHVzZSB0aGUgcm91dGVyXHJcblZ1ZS51c2UoQm9vdHN0cmFwVnVlKTtcclxuVnVlLnVzZShWdWVSb3V0ZXIpO1xyXG5cclxuLy9pbXBvcnQgdGhlIGhlbGxvIGNvbXBvbmVudFxyXG5pbXBvcnQgcHJvZmlsZSBmcm9tICcuL2NvbXBvbmVudHMvcHJvZmlsZS52dWUnXHJcbi8vaW1wb3J0IHRoZSBhYm91dCBjb21wb25lbnRcclxuaW1wb3J0IHNlYXJjaCBmcm9tICcuL2NvbXBvbmVudHMvc2VhcmNoLnZ1ZSdcclxuLy9kZWZpbmUgeW91ciByb3V0ZXNcclxuaW1wb3J0IGFydGlzdCBmcm9tICcuL2NvbXBvbmVudHMvYXJ0aXN0LnZ1ZSdcclxuXHJcbmltcG9ydCBhbGJ1bSBmcm9tICcuL2NvbXBvbmVudHMvYWxidW0udnVlJ1xyXG5cclxuaW1wb3J0IGxvZ2luIGZyb20gJy4vY29tcG9uZW50cy9sb2dpbi52dWUnXHJcblxyXG5pbXBvcnQgc3RhdGlzdGljcyBmcm9tICcuL2NvbXBvbmVudHMvc3RhdGlzdGljcy52dWUnXHJcblxyXG5cclxuY29uc3Qgcm91dGVzID0gW1xyXG5cclxuICB7IHBhdGg6ICcvJywgY29tcG9uZW50OiBzZWFyY2ggfSxcclxuXHJcbiAgeyBwYXRoOiAnL2xvZ2luJywgY29tcG9uZW50OiBsb2dpbiB9LFxyXG5cclxuICB7IHBhdGg6ICcvc3RhdGlzdGljcycsIGNvbXBvbmVudDogc3RhdGlzdGljcyB9LFxyXG5cclxuICB7IG5hbWU6ICdwcm9maWxlJywgcGF0aDogJy9wcm9maWxlLzpuYW1lJywgY29tcG9uZW50OiBwcm9maWxlIH0sXHJcblxyXG4gIHsgbmFtZTogJ2FydGlzdCcsIHBhdGg6ICcvYXJ0aXN0LzpuYW1lLzppZC86c3BvdGlmeScsIGNvbXBvbmVudDogYXJ0aXN0IH0sXHJcblxyXG4gIHsgbmFtZTogJ2FsYnVtJywgcGF0aDogJy9hbGJ1bS86dGl0bGUvOmlkLzphcnRpc3QnLCBjb21wb25lbnQ6IGFsYnVtIH0sXHJcblxyXG5dXHJcblxyXG4vLyBDcmVhdGUgdGhlIHJvdXRlciBpbnN0YW5jZSBhbmQgcGFzcyB0aGUgYHJvdXRlc2Agb3B0aW9uXHJcbi8vIFlvdSBjYW4gcGFzcyBpbiBhZGRpdGlvbmFsIG9wdGlvbnMgaGVyZSwgYnV0IGxldCdzXHJcbi8vIGtlZXAgaXQgc2ltcGxlIGZvciBub3cuXHJcbmNvbnN0IHJvdXRlciA9IG5ldyBWdWVSb3V0ZXIoe1xyXG4gIHJvdXRlcywgLy8gc2hvcnQgZm9yIHJvdXRlczogcm91dGVzXHJcbiAgbW9kZTogJ2hpc3RvcnknXHJcbn0pXHJcblxyXG5uZXcgVnVlKHtcclxuICBlbDogJyNhcHAnLFxyXG4gIHJlbmRlcjogaCA9PiBoKEFwcCksXHJcbiAgcm91dGVyXHJcbn0pLiRtb3VudCgnI2FwcCcpLy9tb3VudCB0aGUgcm91dGVyIG9uIHRoZSBhcHBcclxuXHJcblxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbWFpbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///49\n");

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(2)();\n// imports\n\n\n// module\nexports.push([module.i, \"\\nh1[data-v-113ac87a] {\\r\\n  color: white;\\n}\\nh2[data-v-113ac87a] {\\r\\n  font-weight: normal;\\r\\n  color: black;\\n}\\nul[data-v-113ac87a] {\\r\\n  list-style-type: none;\\r\\n  padding: 0;\\n}\\nli[data-v-113ac87a] {\\r\\n  margin: 0 10px;\\n}\\na[data-v-113ac87a] {\\r\\n  color: #871ca5;\\n}\\n.review-block[data-v-113ac87a] {\\r\\n  background-color: white;\\r\\n  border: 1px solid #EFEFEF;\\r\\n  padding: 15px;\\r\\n  border-radius: 3px;\\r\\n  margin-bottom: 15px;\\r\\n  width: 90%;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\n}\\n.review-block-name[data-v-113ac87a] {\\r\\n  font-size: 12px;\\r\\n  margin: 10px 0;\\n}\\n.review-block-date[data-v-113ac87a] {\\r\\n  font-size: 12px;\\n}\\n.review-block-rate[data-v-113ac87a] {\\r\\n  font-size: 13px;\\r\\n  margin-bottom: 15px;\\n}\\n.review-block-title[data-v-113ac87a] {\\r\\n  font-size: 15px;\\r\\n  font-weight: 700;\\r\\n  margin-bottom: 10px;\\r\\n  word-wrap: break-word;\\n}\\n.review-block-description[data-v-113ac87a] {\\r\\n  font-size: 13px;\\r\\n  word-wrap: break-word;\\n}\\n.albumTab[data-v-113ac87a] {\\r\\n  border-radius: 4px;\\r\\n  border: 3px solid gray;\\r\\n  height: 100%;\\r\\n  width: 20em;\\r\\n  text-align: center;\\r\\n  margin-top: 1em;\\r\\n  padding: 1em;\\r\\n  background: white;\\n}\\n.albumPic[data-v-113ac87a] {\\r\\n  border-radius: 4px;\\r\\n  border: 5px solid #1d2120;\\r\\n  height: 15em;\\r\\n  width: 15em;\\r\\n  display: block;\\r\\n  margin: auto;\\r\\n  margin: 1em;\\n}\\n.infoPic[data-v-113ac87a] {\\r\\n  border-radius: 4px;\\r\\n  border: 5px solid #1d2120;\\r\\n  height: 5em;\\r\\n  width: 5em;\\r\\n  display: block;\\r\\n\\r\\n  margin: 1em;\\n}\\n.albumPicture[data-v-113ac87a] {\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  max-width: 100%;\\r\\n  max-height: 100%;\\n}\\n.infoBlock[data-v-113ac87a] {\\r\\n  background: whitesmoke;\\r\\n  border-radius: 1em;\\r\\n  margin-top: 1.5em;\\r\\n  padding: 1em;\\r\\n  margin-right: 2%;\\r\\n  margin-left: 2%;\\r\\n  margin-bottom: 1em;\\r\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\n}\\n#profileContent[data-v-113ac87a] {\\r\\n  margin-top: 1em;\\n}\\n.inline[data-v-113ac87a] {\\r\\n  display: inline-block;\\r\\n  margin: 0 10px;\\n}\\n#profileNav[data-v-113ac87a] {\\r\\n  background: whitesmoke;\\r\\n  border-radius: 1em;\\r\\n  padding: 1em;\\r\\n  width: 82%;\\r\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\r\\n  margin: auto;\\r\\n  margin-bottom: 1em;\\n}\\n#profilePic[data-v-113ac87a] {\\r\\n  margin-left: 1em;\\r\\n  height: 6em;\\r\\n  width: 6em;\\r\\n  border-top-left-radius: 50% 50%;\\r\\n  border-top-right-radius: 50% 50%;\\r\\n  border-bottom-right-radius: 50% 50%;\\r\\n  border-bottom-left-radius: 50% 50%;\\n}\\n.collapseButton[data-v-113ac87a] {\\r\\n  width: 80%;\\r\\n  color: white;\\r\\n  background: #871ca5;\\r\\n  border-color: #871ca5;\\r\\n  margin-bottom: 0.5em;\\r\\n  margin-top: 0.5em;\\r\\n  border-radius: 0.7em;\\n}\\nth[data-v-113ac87a] {\\r\\n  text-align: center;\\r\\n  font-size: 1.2em;\\n}\\n#userVideo[data-v-113ac87a] {\\r\\n  width: 90%;\\r\\n  height: 20em;\\r\\n  margin: auto;\\r\\n  margin-top: 0.5em;\\n}\\n.userSong[data-v-113ac87a] {\\r\\n  margin-top: 1em;\\r\\n  width: 45%;\\r\\n  position: inline-block;\\n}\\n.someItem[data-v-113ac87a] {\\r\\n  height: 5em;\\r\\n  float: right;\\r\\n  margin-right: 3em;\\r\\n  margin-top: 0.5em;\\n}\\r\\n\", \"\", {\"version\":3,\"sources\":[\"/./src/components/profile.vue?3d956a38\"],\"names\":[],\"mappings\":\";AAwOA;EACA,aAAA;CACA;AAEA;EACA,oBAAA;EACA,aAAA;CACA;AAEA;EACA,sBAAA;EACA,WAAA;CACA;AAEA;EACA,eAAA;CACA;AAEA;EACA,eAAA;CACA;AAEA;EACA,wBAAA;EACA,0BAAA;EACA,cAAA;EACA,mBAAA;EACA,oBAAA;EACA,WAAA;EACA,kBAAA;EACA,mBAAA;CACA;AAEA;EACA,gBAAA;EACA,eAAA;CACA;AAEA;EACA,gBAAA;CACA;AAEA;EACA,gBAAA;EACA,oBAAA;CACA;AAEA;EACA,gBAAA;EACA,iBAAA;EACA,oBAAA;EACA,sBAAA;CACA;AAEA;EACA,gBAAA;EACA,sBAAA;CACA;AAEA;EACA,mBAAA;EACA,uBAAA;EACA,aAAA;EACA,YAAA;EACA,mBAAA;EACA,gBAAA;EACA,aAAA;EACA,kBAAA;CACA;AAEA;EACA,mBAAA;EACA,0BAAA;EACA,aAAA;EACA,YAAA;EACA,eAAA;EACA,aAAA;EACA,YAAA;CACA;AAEA;EACA,mBAAA;EACA,0BAAA;EACA,YAAA;EACA,WAAA;EACA,eAAA;;EAEA,YAAA;CACA;AAEA;EACA,YAAA;EACA,aAAA;EACA,gBAAA;EACA,iBAAA;CACA;AAEA;EACA,uBAAA;EACA,mBAAA;EACA,kBAAA;EACA,aAAA;EACA,iBAAA;EACA,gBAAA;EACA,mBAAA;EACA,6EAAA;CACA;AAIA;EACA,gBAAA;CACA;AAEA;EACA,sBAAA;EACA,eAAA;CAEA;AAEA;EACA,uBAAA;EACA,mBAAA;EACA,aAAA;EACA,WAAA;EACA,6EAAA;EACA,aAAA;EACA,mBAAA;CACA;AAEA;EACA,iBAAA;EACA,YAAA;EACA,WAAA;EACA,gCAAA;EACA,iCAAA;EACA,oCAAA;EACA,mCAAA;CACA;AAEA;EACA,WAAA;EACA,aAAA;EACA,oBAAA;EACA,sBAAA;EACA,qBAAA;EACA,kBAAA;EACA,qBAAA;CACA;AAEA;EACA,mBAAA;EACA,iBAAA;CACA;AAEA;EACA,WAAA;EACA,aAAA;EACA,aAAA;EACA,kBAAA;CACA;AAEA;EACA,gBAAA;EACA,WAAA;EACA,uBAAA;CACA;AAEA;EACA,YAAA;EACA,aAAA;EACA,kBAAA;EACA,kBAAA;CACA\",\"file\":\"profile.vue\",\"sourcesContent\":[\"<template>\\r\\n  <div class=\\\"profile\\\">\\r\\n    <br>\\r\\n\\r\\n    <div id=\\\"profileContent\\\">\\r\\n\\r\\n      <b-row id=\\\"profileNav\\\">\\r\\n\\r\\n        <b-col cols=\\\"6\\\">\\r\\n          <div id=\\\"profileNavLeft\\\">\\r\\n\\r\\n            <img id=\\\"profilePic\\\" src=\\\"/static/img/forsene.jpg\\\" alt=\\\"Pic\\\">\\r\\n            <h2 class=\\\"inline\\\">Logged in as {{this.$route.params.name}}</h2>\\r\\n          </div>\\r\\n        </b-col>\\r\\n\\r\\n        <b-col cols=\\\"6\\\">\\r\\n\\r\\n          <div id=\\\"profileNavRight\\\">\\r\\n\\r\\n            <iframe class=\\\"someItem\\\" src=\\\"https://embed.spotify.com/follow/1/?uri=spotify:user:testuser&size=detail&theme=light\\\" scrolling=\\\"no\\\" frameborder=\\\"0\\\" style=\\\"border:none; overflow:hidden;\\\" allowtransparency=\\\"true\\\"></iframe>\\r\\n            <iframe class=\\\"someItem\\\" allowtransparency=\\\"true\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/icon/?url=http%3A%2F%2Fsoundcloud.com%2Fmetallica&color=orange_white&size=64\\\" style=\\\"width: 64px; height: 64px;\\\"></iframe>\\r\\n          </div>\\r\\n        </b-col>\\r\\n\\r\\n      </b-row>\\r\\n\\r\\n      <b-row>\\r\\n        <b-col cols=\\\"1\\\">\\r\\n\\r\\n        </b-col>\\r\\n        <b-col cols=\\\"5\\\">\\r\\n\\r\\n          <div class=\\\"infoBlock\\\" id=\\\"userMusic\\\">\\r\\n\\r\\n            <b-btn class=\\\"collapseButton\\\" v-b-toggle.collapseA variant=\\\"primary\\\">Your music</b-btn>\\r\\n            <b-collapse id=\\\"collapseA\\\" class=\\\"mt-2\\\">\\r\\n              <b-card>\\r\\n                <div id=\\\"userVideos\\\">\\r\\n                  <h2> Your Media</h2>\\r\\n                  <iframe id=\\\"userVideo\\\" src=\\\"https://www.youtube.com/embed/mj-v6zCnEaw\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\\r\\n                </div>\\r\\n\\r\\n                <div id=\\\"userSongs\\\">\\r\\n                  <iframe class=\\\"userSong\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/246027770&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true\\\"></iframe>\\r\\n                  <iframe class=\\\"userSong\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/users/56705121&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true\\\"></iframe>\\r\\n                </div>\\r\\n\\r\\n              </b-card>\\r\\n            </b-collapse>\\r\\n\\r\\n          </div>\\r\\n\\r\\n        </b-col>\\r\\n\\r\\n        <b-col cols=\\\"5\\\">\\r\\n\\r\\n          <div class=\\\"infoBlock\\\" id=\\\"userAdded\\\">\\r\\n            <b-btn class=\\\"collapseButton\\\" v-b-toggle.collapseB variant=\\\"primary\\\">Mobile</b-btn>\\r\\n            <b-collapse id=\\\"collapseB\\\" class=\\\"mt-2\\\">\\r\\n              <b-card>\\r\\n                <table class=\\\"table table-responsive table-striped table-hover\\\">\\r\\n\\r\\n                  <thead>\\r\\n                    <tr>\\r\\n                      <th>Song title</th>\\r\\n                      <th>Artist</th>\\r\\n\\r\\n                    </tr>\\r\\n                  </thead>\\r\\n                  <tbody>\\r\\n                    <tr v-for=\\\"data in mobileAdded\\\" v-bind:key=\\\"data\\\">\\r\\n                      <td>{{data.title}}</td>\\r\\n                      <td>{{data.artist}}</td>\\r\\n\\r\\n                    </tr>\\r\\n\\r\\n                  </tbody>\\r\\n                </table>\\r\\n\\r\\n              </b-card>\\r\\n            </b-collapse>\\r\\n\\r\\n          </div>\\r\\n\\r\\n        </b-col>\\r\\n\\r\\n        <b-col cols=\\\"1\\\">\\r\\n\\r\\n        </b-col>\\r\\n      </b-row>\\r\\n\\r\\n      <b-row>\\r\\n        <b-col cols=\\\"1\\\">\\r\\n\\r\\n        </b-col>\\r\\n        <b-col cols=\\\"5\\\">\\r\\n\\r\\n          <div class=\\\"infoBlock\\\" id=\\\"review\\\">\\r\\n            <h2>Your reviews</h2>\\r\\n            <ul>\\r\\n              <li v-for=\\\"data in reviewResult\\\" v-bind:key=\\\"data\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                  <div class=\\\"col-sm-12\\\">\\r\\n                    <hr/>\\r\\n                    <div class=\\\"review-block\\\">\\r\\n                      <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-sm-3\\\">\\r\\n                          <img src=\\\"/static/img/forsene.jpg\\\" class=\\\"img-rounded\\\">\\r\\n                          <div class=\\\"review-block-name\\\">\\r\\n                            <router-link :to=\\\"{ name: 'profile', params: {name:  data.username}}\\\"> {{data.username}} </router-link>\\r\\n                          </div>\\r\\n                          <div class=\\\"review-block-date\\\">{{data.created_at}}</div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-sm-9\\\">\\r\\n                          <div class=\\\"review-block-rate\\\">\\r\\n                            <button type=\\\"button\\\" class=\\\"btn btn-warning btn-xs\\\" aria-label=\\\"Left Align\\\">\\r\\n                              <span class=\\\"glyphicon glyphicon-star\\\" aria-hidden=\\\"true\\\"></span>\\r\\n                            </button>\\r\\n                            <button type=\\\"button\\\" class=\\\"btn btn-warning btn-xs\\\" aria-label=\\\"Left Align\\\">\\r\\n                              <span class=\\\"glyphicon glyphicon-star\\\" aria-hidden=\\\"true\\\"></span>\\r\\n                            </button>\\r\\n                            <button type=\\\"button\\\" class=\\\"btn btn-warning btn-xs\\\" aria-label=\\\"Left Align\\\">\\r\\n                              <span class=\\\"glyphicon glyphicon-star\\\" aria-hidden=\\\"true\\\"></span>\\r\\n                            </button>\\r\\n                            <button type=\\\"button\\\" class=\\\"btn btn-default btn-grey btn-xs\\\" aria-label=\\\"Left Align\\\">\\r\\n                              <span class=\\\"glyphicon glyphicon-star\\\" aria-hidden=\\\"true\\\"></span>\\r\\n                            </button>\\r\\n                            <button type=\\\"button\\\" class=\\\"btn btn-default btn-grey btn-xs\\\" aria-label=\\\"Left Align\\\">\\r\\n                              <span class=\\\"glyphicon glyphicon-star\\\" aria-hidden=\\\"true\\\"></span>\\r\\n                            </button>\\r\\n                          </div>\\r\\n                          <div class=\\\"review-block-title\\\">{{data.title}}</div>\\r\\n                          <div class=\\\"review-block-description\\\">{{data.text}}</div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <hr/>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </li>\\r\\n            </ul>\\r\\n          </div>\\r\\n\\r\\n        </b-col>\\r\\n\\r\\n        <b-col cols=\\\"5\\\">\\r\\n\\r\\n          <div class=\\\"infoBlock\\\" id=\\\"albumList\\\">\\r\\n            <h2>Your albums</h2>\\r\\n\\r\\n            <ul>\\r\\n\\r\\n              <li class=\\\"inline\\\" v-for=\\\"data in albumResult\\\" v-bind:key=\\\"data\\\">\\r\\n\\r\\n                <router-link :to=\\\"{ name: 'album', params: {title:  data.title,   id: data.mbid   }}\\\"> {{ data.title }} </router-link>\\r\\n\\r\\n                <div class=\\\"albumPic\\\">\\r\\n                  <img class=\\\"albumPicture\\\" :src=\\\"data.cover\\\" alt=\\\"Album cover not found\\\" />\\r\\n                </div>\\r\\n\\r\\n              </li>\\r\\n            </ul>\\r\\n          </div>\\r\\n\\r\\n        </b-col>\\r\\n\\r\\n        <b-col cols=\\\"1\\\">\\r\\n\\r\\n        </b-col>\\r\\n      </b-row>\\r\\n    </div>\\r\\n\\r\\n    <br>\\r\\n\\r\\n    <!--  <audio controls>\\r\\n\\r\\n                                    <source src=\\\"https://p.scdn.co/mp3-preview/fca4ad6793f9eefad8208a8e559dac88793081f8?cid=8897482848704f2a8f8d7c79726a70d4\\\" type=\\\"audio/mpeg\\\">\\r\\n\\r\\n                                  </audio> -->\\r\\n  </div>\\r\\n</template>\\r\\n<script>\\r\\nimport axios from 'axios';\\r\\n\\r\\nexport default {\\r\\n  name: 'profile',\\r\\n  data() {\\r\\n    return {\\r\\n      reviewResult: '',\\r\\n      albumResult: '',\\r\\n      mobileAdded: '',\\r\\n    }\\r\\n  },\\r\\n  components: {\\r\\n  },\\r\\n\\r\\n  created: function() {\\r\\n    axios.get(\\\"/api/reviews/get/user/\\\" + this.$route.params.name)\\r\\n      .then((response) => {\\r\\n        this.reviewResult = response.data;\\r\\n\\r\\n      })\\r\\n      .catch(function(error) {\\r\\n        alert(error);\\r\\n      });\\r\\n    axios.get(\\\"/api/user/albums/get/\\\" + this.$route.params.name)\\r\\n      .then((response) => {\\r\\n        this.albumResult = response.data;\\r\\n\\r\\n      })\\r\\n      .catch(function(error) {\\r\\n        alert(error);\\r\\n      });\\r\\n\\r\\n    axios.get(\\\"/api/user/get/listened/\\\" + this.$route.params.name)\\r\\n      .then((response) => {\\r\\n\\r\\n        this.mobileAdded = response.data;\\r\\n\\r\\n      })\\r\\n      .catch(function(error) {\\r\\n        alert(error);\\r\\n      });\\r\\n  },\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n</script>\\r\\n<!-- Add \\\"scoped\\\" attribute to limit CSS to this component only -->\\r\\n<style scoped>\\r\\nh1 {\\r\\n  color: white;\\r\\n}\\r\\n\\r\\nh2 {\\r\\n  font-weight: normal;\\r\\n  color: black;\\r\\n}\\r\\n\\r\\nul {\\r\\n  list-style-type: none;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\nli {\\r\\n  margin: 0 10px;\\r\\n}\\r\\n\\r\\na {\\r\\n  color: #871ca5;\\r\\n}\\r\\n\\r\\n.review-block {\\r\\n  background-color: white;\\r\\n  border: 1px solid #EFEFEF;\\r\\n  padding: 15px;\\r\\n  border-radius: 3px;\\r\\n  margin-bottom: 15px;\\r\\n  width: 90%;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n}\\r\\n\\r\\n.review-block-name {\\r\\n  font-size: 12px;\\r\\n  margin: 10px 0;\\r\\n}\\r\\n\\r\\n.review-block-date {\\r\\n  font-size: 12px;\\r\\n}\\r\\n\\r\\n.review-block-rate {\\r\\n  font-size: 13px;\\r\\n  margin-bottom: 15px;\\r\\n}\\r\\n\\r\\n.review-block-title {\\r\\n  font-size: 15px;\\r\\n  font-weight: 700;\\r\\n  margin-bottom: 10px;\\r\\n  word-wrap: break-word;\\r\\n}\\r\\n\\r\\n.review-block-description {\\r\\n  font-size: 13px;\\r\\n  word-wrap: break-word;\\r\\n}\\r\\n\\r\\n.albumTab {\\r\\n  border-radius: 4px;\\r\\n  border: 3px solid gray;\\r\\n  height: 100%;\\r\\n  width: 20em;\\r\\n  text-align: center;\\r\\n  margin-top: 1em;\\r\\n  padding: 1em;\\r\\n  background: white;\\r\\n}\\r\\n\\r\\n.albumPic {\\r\\n  border-radius: 4px;\\r\\n  border: 5px solid #1d2120;\\r\\n  height: 15em;\\r\\n  width: 15em;\\r\\n  display: block;\\r\\n  margin: auto;\\r\\n  margin: 1em;\\r\\n}\\r\\n\\r\\n.infoPic {\\r\\n  border-radius: 4px;\\r\\n  border: 5px solid #1d2120;\\r\\n  height: 5em;\\r\\n  width: 5em;\\r\\n  display: block;\\r\\n\\r\\n  margin: 1em;\\r\\n}\\r\\n\\r\\n.albumPicture {\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  max-width: 100%;\\r\\n  max-height: 100%;\\r\\n}\\r\\n\\r\\n.infoBlock {\\r\\n  background: whitesmoke;\\r\\n  border-radius: 1em;\\r\\n  margin-top: 1.5em;\\r\\n  padding: 1em;\\r\\n  margin-right: 2%;\\r\\n  margin-left: 2%;\\r\\n  margin-bottom: 1em;\\r\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n#profileContent {\\r\\n  margin-top: 1em;\\r\\n}\\r\\n\\r\\n.inline {\\r\\n  display: inline-block;\\r\\n  margin: 0 10px;\\r\\n  \\r\\n}\\r\\n\\r\\n#profileNav {\\r\\n  background: whitesmoke;\\r\\n  border-radius: 1em;\\r\\n  padding: 1em;\\r\\n  width: 82%;\\r\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\r\\n  margin: auto;\\r\\n  margin-bottom: 1em;\\r\\n}\\r\\n\\r\\n#profilePic {\\r\\n  margin-left: 1em;\\r\\n  height: 6em;\\r\\n  width: 6em;\\r\\n  border-top-left-radius: 50% 50%;\\r\\n  border-top-right-radius: 50% 50%;\\r\\n  border-bottom-right-radius: 50% 50%;\\r\\n  border-bottom-left-radius: 50% 50%;\\r\\n}\\r\\n\\r\\n.collapseButton {\\r\\n  width: 80%;\\r\\n  color: white;\\r\\n  background: #871ca5;\\r\\n  border-color: #871ca5;\\r\\n  margin-bottom: 0.5em;\\r\\n  margin-top: 0.5em;\\r\\n  border-radius: 0.7em;\\r\\n}\\r\\n\\r\\nth {\\r\\n  text-align: center;\\r\\n  font-size: 1.2em;\\r\\n}\\r\\n\\r\\n#userVideo {\\r\\n  width: 90%;\\r\\n  height: 20em;\\r\\n  margin: auto;\\r\\n  margin-top: 0.5em;\\r\\n}\\r\\n\\r\\n.userSong {\\r\\n  margin-top: 1em;\\r\\n  width: 45%;\\r\\n  position: inline-block;\\r\\n}\\r\\n\\r\\n.someItem {\\r\\n  height: 5em;\\r\\n  float: right;\\r\\n  margin-right: 3em;\\r\\n  margin-top: 0.5em;\\r\\n}\\r\\n</style>\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///50\n");

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(2)();\n// imports\n\n\n// module\nexports.push([module.i, \"\\n.center_div[data-v-225c3a03] {\\r\\n    margin: 0 auto;\\r\\n    width: 30%/* value of your choice which suits your alignment */\\n}\\nh1[data-v-225c3a03],\\r\\nh2[data-v-225c3a03] {\\r\\n    font-weight: normal;\\n}\\nul[data-v-225c3a03] {\\r\\n    list-style-type: none;\\r\\n    padding: 0;\\n}\\nli[data-v-225c3a03] {\\r\\n    display: inline-block;\\r\\n    margin: 0 10px;\\n}\\na[data-v-225c3a03] {\\r\\n    color: #871ca5;\\n}\\nlabel[data-v-225c3a03] {\\r\\n    color: white;\\n}\\ninput[data-v-225c3a03] {\\r\\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\n}\\n.shadow[data-v-225c3a03] {\\r\\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\n}\\n#searchBut[data-v-225c3a03] {\\r\\n    background-color: #9C27B0;\\r\\n    border-color: #9C27B0;\\r\\n    color: white;\\n}\\r\\n\", \"\", {\"version\":3,\"sources\":[\"/./src/components/login.vue?71798cb5\"],\"names\":[],\"mappings\":\";AAiFA;IACA,eAAA;IACA,UAAA,qDAAA;CACA;AAEA;;IAEA,oBAAA;CACA;AAEA;IACA,sBAAA;IACA,WAAA;CACA;AAEA;IACA,sBAAA;IACA,eAAA;CACA;AAEA;IACA,eAAA;CACA;AAEA;IACA,aAAA;CACA;AAEA;IACA,6EAAA;CACA;AAEA;IACA,6EAAA;CACA;AAEA;IACA,0BAAA;IACA,sBAAA;IACA,aAAA;CACA\",\"file\":\"login.vue\",\"sourcesContent\":[\"<template>\\r\\n    <div class=\\\"login\\\">\\r\\n        <div class=\\\"center_div\\\">\\r\\n            <form action=\\\"/login\\\" method=\\\"post\\\">\\r\\n                <br>\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"user\\\">Username</label>\\r\\n                    <input id=\\\"user\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"username\\\">\\r\\n                </div>\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"password\\\">Password</label>\\r\\n                    <input id=\\\"password\\\" type=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\">\\r\\n                </div>\\r\\n\\r\\n                <button id=\\\"searchBut\\\" type=\\\"submit\\\" class=\\\"btn btn-warning btn-lg shadow\\\">Login</button>\\r\\n            </form>\\r\\n        </div>\\r\\n        <br>\\r\\n        <b-btn class=\\\"shadow\\\" v-b-modal=\\\"'regform'\\\">Register</b-btn>\\r\\n        <register></register>\\r\\n    </div>\\r\\n</template>\\r\\n<script>\\r\\nimport axios from 'axios';\\r\\nimport register from './register.vue'\\r\\nexport default {\\r\\n\\r\\n    name: 'login',\\r\\n    components: {\\r\\n        register\\r\\n\\r\\n    },\\r\\n\\r\\n    data: {\\r\\n        username: '',\\r\\n        password: ''\\r\\n\\r\\n    },\\r\\n    methods: {\\r\\n        clearData() {\\r\\n            this.username = '';\\r\\n            this.password = '';\\r\\n\\r\\n        },\\r\\n        handleOk(e) {\\r\\n            e.cancel();\\r\\n            if (!this.username) {\\r\\n                alert('Please enter your name');\\r\\n            }\\r\\n            else if (!this.password) {\\r\\n                alert('Please enter your password');\\r\\n            }\\r\\n            else {\\r\\n                this.handleLogin()\\r\\n\\r\\n            }\\r\\n        },\\r\\n        handleLogin() {\\r\\n\\r\\n\\r\\n            axios.post(`/login`, {\\r\\n                username: this.username,\\r\\n                password: this.password\\r\\n\\r\\n            })\\r\\n                .then(response => { })\\r\\n                .catch(e => {\\r\\n                    this.errors.push(e)\\r\\n                })\\r\\n\\r\\n            this.clearData();\\r\\n            this.$refs.modal1.hide()\\r\\n        },\\r\\n\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n</script>\\r\\n<!-- Add \\\"scoped\\\" attribute to limit CSS to this component only -->\\r\\n<style scoped>\\r\\n.center_div {\\r\\n    margin: 0 auto;\\r\\n    width: 30%/* value of your choice which suits your alignment */\\r\\n}\\r\\n\\r\\nh1,\\r\\nh2 {\\r\\n    font-weight: normal;\\r\\n}\\r\\n\\r\\nul {\\r\\n    list-style-type: none;\\r\\n    padding: 0;\\r\\n}\\r\\n\\r\\nli {\\r\\n    display: inline-block;\\r\\n    margin: 0 10px;\\r\\n}\\r\\n\\r\\na {\\r\\n    color: #871ca5;\\r\\n}\\r\\n\\r\\nlabel {\\r\\n    color: white;\\r\\n}\\r\\n\\r\\ninput {\\r\\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\r\\n}\\r\\n\\r\\n.shadow {\\r\\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\r\\n}\\r\\n\\r\\n#searchBut {\\r\\n    background-color: #9C27B0;\\r\\n    border-color: #9C27B0;\\r\\n    color: white;\\r\\n}\\r\\n</style>\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///51\n");

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(2)();\n// imports\n\n\n// module\nexports.push([module.i, \"\\nh1[data-v-27d1b20e] {\\r\\n    font-weight: normal;\\r\\n    color: black;\\r\\n    margin: auto;\\r\\n    padding-top: 0.5em;\\r\\n    padding-bottom: 0.5em;\\n}\\nh2[data-v-27d1b20e] {\\r\\n    font-weight: normal;\\n}\\nul[data-v-27d1b20e] {\\r\\n    list-style-type: none;\\r\\n    padding: 0;\\n}\\na[data-v-27d1b20e] {\\r\\n    color: #871ca5;\\n}\\n.statistics[data-v-27d1b20e] {\\r\\n    color: white;\\n}\\nthead[data-v-27d1b20e] {\\r\\n    display: table-header-group;\\n}\\n#tableBg[data-v-27d1b20e] {\\r\\n    height: 80%;\\r\\n    width: 90%;\\r\\n    margin-left: auto;\\r\\n    margin-right: auto;\\r\\n    margin-top: 5%;\\r\\n    background: whitesmoke;\\r\\n    border-radius: 1em;\\r\\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\r\\n    border: 4px solid #be45e0;\\n}\\nth[data-v-27d1b20e] {\\r\\n  text-align: center;\\r\\n  font-size: 1.5em;\\n}\\r\\n\", \"\", {\"version\":3,\"sources\":[\"/./src/components/statistics.vue?8e501754\"],\"names\":[],\"mappings\":\";AA4DA;IACA,oBAAA;IACA,aAAA;IACA,aAAA;IACA,mBAAA;IACA,sBAAA;CACA;AAEA;IACA,oBAAA;CACA;AAEA;IACA,sBAAA;IACA,WAAA;CACA;AAIA;IACA,eAAA;CACA;AAEA;IACA,aAAA;CACA;AAEA;IACA,4BAAA;CACA;AAEA;IACA,YAAA;IACA,WAAA;IACA,kBAAA;IACA,mBAAA;IACA,eAAA;IACA,uBAAA;IACA,mBAAA;IACA,6EAAA;IACA,0BAAA;CAEA;AAEA;EACA,mBAAA;EACA,iBAAA;CACA\",\"file\":\"statistics.vue\",\"sourcesContent\":[\"<template>\\r\\n    <div id=\\\"tableBg\\\">\\r\\n        <h1>Most popular albums</h1>\\r\\n\\r\\n        <table class=\\\"table table-responsive table-striped table-hover\\\">\\r\\n\\r\\n            <!-- center headers, fix logout, fix review sizes -->\\r\\n            <thead>\\r\\n                <tr>\\r\\n                    <th>Times added</th>\\r\\n                    <th>Album title</th>\\r\\n                    <th>Artist</th>\\r\\n\\r\\n                </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n                <tr v-for=\\\"data in albumData\\\" v-bind:key=\\\"data\\\">\\r\\n                    <td>{{data.added}}</td>\\r\\n                    <td>{{data.title}}</td>\\r\\n                    <td>{{data.artist}}</td>\\r\\n\\r\\n                </tr>\\r\\n\\r\\n            </tbody>\\r\\n        </table>\\r\\n\\r\\n    </div>\\r\\n</template>\\r\\n<script>\\r\\nimport axios from 'axios';\\r\\n\\r\\nexport default {\\r\\n\\r\\n    name: 'statistics',\\r\\n    data() {\\r\\n        return {\\r\\n            albumData: '',\\r\\n            tablePos: 0,\\r\\n\\r\\n        }\\r\\n    },\\r\\n    created: function() {\\r\\n\\r\\n        axios.get(\\\"/api/albums/get/all\\\")\\r\\n            .then((response) => {\\r\\n\\r\\n                this.albumData = response.data;\\r\\n\\r\\n            })\\r\\n            .catch(function(error) {\\r\\n                alert(error);\\r\\n            });\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n}\\r\\n</script>\\r\\n<!-- Add \\\"scoped\\\" attribute to limit CSS to this component only -->\\r\\n<style scoped>\\r\\nh1 {\\r\\n    font-weight: normal;\\r\\n    color: black;\\r\\n    margin: auto;\\r\\n    padding-top: 0.5em;\\r\\n    padding-bottom: 0.5em;\\r\\n}\\r\\n\\r\\nh2 {\\r\\n    font-weight: normal;\\r\\n}\\r\\n\\r\\nul {\\r\\n    list-style-type: none;\\r\\n    padding: 0;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\na {\\r\\n    color: #871ca5;\\r\\n}\\r\\n\\r\\n.statistics {\\r\\n    color: white;\\r\\n}\\r\\n\\r\\nthead {\\r\\n    display: table-header-group;\\r\\n}\\r\\n\\r\\n#tableBg {\\r\\n    height: 80%;\\r\\n    width: 90%;\\r\\n    margin-left: auto;\\r\\n    margin-right: auto;\\r\\n    margin-top: 5%;\\r\\n    background: whitesmoke;\\r\\n    border-radius: 1em;\\r\\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\r\\n    border: 4px solid #be45e0;\\r\\n   \\r\\n}\\r\\n\\r\\nth {\\r\\n  text-align: center;\\r\\n  font-size: 1.5em;\\r\\n}\\r\\n</style>\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zdGF0aXN0aWNzLnZ1ZT9iM2I1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7OztBQUdBO0FBQ0EsZ0RBQWlELDRCQUE0QixxQkFBcUIscUJBQXFCLDJCQUEyQiw4QkFBOEIsR0FBRyx1QkFBdUIsNEJBQTRCLEdBQUcsdUJBQXVCLDhCQUE4QixtQkFBbUIsR0FBRyxzQkFBc0IsdUJBQXVCLEdBQUcsZ0NBQWdDLHFCQUFxQixHQUFHLDBCQUEwQixvQ0FBb0MsR0FBRyw2QkFBNkIsb0JBQW9CLG1CQUFtQiwwQkFBMEIsMkJBQTJCLHVCQUF1QiwrQkFBK0IsMkJBQTJCLHFGQUFxRixrQ0FBa0MsR0FBRyx1QkFBdUIseUJBQXlCLHVCQUF1QixHQUFHLFlBQVksNEZBQTRGLE1BQU0sV0FBVyxVQUFVLFVBQVUsV0FBVyxXQUFXLEtBQUssS0FBSyxXQUFXLEtBQUssS0FBSyxXQUFXLFVBQVUsS0FBSyxLQUFLLFVBQVUsS0FBSyxLQUFLLFVBQVUsS0FBSyxLQUFLLFdBQVcsS0FBSyxLQUFLLFVBQVUsVUFBVSxXQUFXLFdBQVcsVUFBVSxXQUFXLFdBQVcsV0FBVyxXQUFXLEtBQUssS0FBSyxXQUFXLFdBQVcsMG5CQUEwbkIsWUFBWSxtQ0FBbUMsWUFBWSxtQ0FBbUMsYUFBYSw2SkFBNkosd0JBQXdCLCtDQUErQyxvQkFBb0IsMkVBQTJFLFNBQVMsOEJBQThCLHVGQUF1Rix1REFBdUQscUJBQXFCLHlDQUF5QyxpQ0FBaUMsaUJBQWlCLEVBQUUsaUJBQWlCLFNBQVMsZ0hBQWdILDRCQUE0QixxQkFBcUIscUJBQXFCLDJCQUEyQiw4QkFBOEIsS0FBSyxZQUFZLDRCQUE0QixLQUFLLFlBQVksOEJBQThCLG1CQUFtQixLQUFLLG1CQUFtQix1QkFBdUIsS0FBSyxxQkFBcUIscUJBQXFCLEtBQUssZUFBZSxvQ0FBb0MsS0FBSyxrQkFBa0Isb0JBQW9CLG1CQUFtQiwwQkFBMEIsMkJBQTJCLHVCQUF1QiwrQkFBK0IsMkJBQTJCLHFGQUFxRixrQ0FBa0MsWUFBWSxZQUFZLHlCQUF5Qix1QkFBdUIsS0FBSyx5Q0FBeUM7O0FBRXZoSCIsImZpbGUiOiI1Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbmgxW2RhdGEtdi0yN2QxYjIwZV0ge1xcclxcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xcclxcbiAgICBjb2xvcjogYmxhY2s7XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG4gICAgcGFkZGluZy10b3A6IDAuNWVtO1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMC41ZW07XFxufVxcbmgyW2RhdGEtdi0yN2QxYjIwZV0ge1xcclxcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xcbn1cXG51bFtkYXRhLXYtMjdkMWIyMGVdIHtcXHJcXG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcbn1cXG5hW2RhdGEtdi0yN2QxYjIwZV0ge1xcclxcbiAgICBjb2xvcjogIzg3MWNhNTtcXG59XFxuLnN0YXRpc3RpY3NbZGF0YS12LTI3ZDFiMjBlXSB7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXG59XFxudGhlYWRbZGF0YS12LTI3ZDFiMjBlXSB7XFxyXFxuICAgIGRpc3BsYXk6IHRhYmxlLWhlYWRlci1ncm91cDtcXG59XFxuI3RhYmxlQmdbZGF0YS12LTI3ZDFiMjBlXSB7XFxyXFxuICAgIGhlaWdodDogODAlO1xcclxcbiAgICB3aWR0aDogOTAlO1xcclxcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcclxcbiAgICBtYXJnaW4tdG9wOiA1JTtcXHJcXG4gICAgYmFja2dyb3VuZDogd2hpdGVzbW9rZTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMWVtO1xcclxcbiAgICBib3gtc2hhZG93OiAwIDRweCA4cHggMCByZ2JhKDAsIDAsIDAsIDAuMiksIDAgNnB4IDIwcHggMCByZ2JhKDAsIDAsIDAsIDAuMTkpO1xcclxcbiAgICBib3JkZXI6IDRweCBzb2xpZCAjYmU0NWUwO1xcbn1cXG50aFtkYXRhLXYtMjdkMWIyMGVdIHtcXHJcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gIGZvbnQtc2l6ZTogMS41ZW07XFxufVxcclxcblwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvLi9zcmMvY29tcG9uZW50cy9zdGF0aXN0aWNzLnZ1ZT84ZTUwMTc1NFwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBNERBO0lBQ0Esb0JBQUE7SUFDQSxhQUFBO0lBQ0EsYUFBQTtJQUNBLG1CQUFBO0lBQ0Esc0JBQUE7Q0FDQTtBQUVBO0lBQ0Esb0JBQUE7Q0FDQTtBQUVBO0lBQ0Esc0JBQUE7SUFDQSxXQUFBO0NBQ0E7QUFJQTtJQUNBLGVBQUE7Q0FDQTtBQUVBO0lBQ0EsYUFBQTtDQUNBO0FBRUE7SUFDQSw0QkFBQTtDQUNBO0FBRUE7SUFDQSxZQUFBO0lBQ0EsV0FBQTtJQUNBLGtCQUFBO0lBQ0EsbUJBQUE7SUFDQSxlQUFBO0lBQ0EsdUJBQUE7SUFDQSxtQkFBQTtJQUNBLDZFQUFBO0lBQ0EsMEJBQUE7Q0FFQTtBQUVBO0VBQ0EsbUJBQUE7RUFDQSxpQkFBQTtDQUNBXCIsXCJmaWxlXCI6XCJzdGF0aXN0aWNzLnZ1ZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxyXFxuICAgIDxkaXYgaWQ9XFxcInRhYmxlQmdcXFwiPlxcclxcbiAgICAgICAgPGgxPk1vc3QgcG9wdWxhciBhbGJ1bXM8L2gxPlxcclxcblxcclxcbiAgICAgICAgPHRhYmxlIGNsYXNzPVxcXCJ0YWJsZSB0YWJsZS1yZXNwb25zaXZlIHRhYmxlLXN0cmlwZWQgdGFibGUtaG92ZXJcXFwiPlxcclxcblxcclxcbiAgICAgICAgICAgIDwhLS0gY2VudGVyIGhlYWRlcnMsIGZpeCBsb2dvdXQsIGZpeCByZXZpZXcgc2l6ZXMgLS0+XFxyXFxuICAgICAgICAgICAgPHRoZWFkPlxcclxcbiAgICAgICAgICAgICAgICA8dHI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dGg+VGltZXMgYWRkZWQ8L3RoPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHRoPkFsYnVtIHRpdGxlPC90aD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDx0aD5BcnRpc3Q8L3RoPlxcclxcblxcclxcbiAgICAgICAgICAgICAgICA8L3RyPlxcclxcbiAgICAgICAgICAgIDwvdGhlYWQ+XFxyXFxuICAgICAgICAgICAgPHRib2R5PlxcclxcbiAgICAgICAgICAgICAgICA8dHIgdi1mb3I9XFxcImRhdGEgaW4gYWxidW1EYXRhXFxcIiB2LWJpbmQ6a2V5PVxcXCJkYXRhXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDx0ZD57e2RhdGEuYWRkZWR9fTwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dGQ+e3tkYXRhLnRpdGxlfX08L3RkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHRkPnt7ZGF0YS5hcnRpc3R9fTwvdGQ+XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgIDwvdHI+XFxyXFxuXFxyXFxuICAgICAgICAgICAgPC90Ym9keT5cXHJcXG4gICAgICAgIDwvdGFibGU+XFxyXFxuXFxyXFxuICAgIDwvZGl2PlxcclxcbjwvdGVtcGxhdGU+XFxyXFxuPHNjcmlwdD5cXHJcXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xcclxcblxcclxcbmV4cG9ydCBkZWZhdWx0IHtcXHJcXG5cXHJcXG4gICAgbmFtZTogJ3N0YXRpc3RpY3MnLFxcclxcbiAgICBkYXRhKCkge1xcclxcbiAgICAgICAgcmV0dXJuIHtcXHJcXG4gICAgICAgICAgICBhbGJ1bURhdGE6ICcnLFxcclxcbiAgICAgICAgICAgIHRhYmxlUG9zOiAwLFxcclxcblxcclxcbiAgICAgICAgfVxcclxcbiAgICB9LFxcclxcbiAgICBjcmVhdGVkOiBmdW5jdGlvbigpIHtcXHJcXG5cXHJcXG4gICAgICAgIGF4aW9zLmdldChcXFwiL2FwaS9hbGJ1bXMvZ2V0L2FsbFxcXCIpXFxyXFxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgIHRoaXMuYWxidW1EYXRhID0gcmVzcG9uc2UuZGF0YTtcXHJcXG5cXHJcXG4gICAgICAgICAgICB9KVxcclxcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xcclxcbiAgICAgICAgICAgICAgICBhbGVydChlcnJvcik7XFxyXFxuICAgICAgICAgICAgfSk7XFxyXFxuXFxyXFxuXFxyXFxuICAgIH1cXHJcXG5cXHJcXG59XFxyXFxuPC9zY3JpcHQ+XFxyXFxuPCEtLSBBZGQgXFxcInNjb3BlZFxcXCIgYXR0cmlidXRlIHRvIGxpbWl0IENTUyB0byB0aGlzIGNvbXBvbmVudCBvbmx5IC0tPlxcclxcbjxzdHlsZSBzY29wZWQ+XFxyXFxuaDEge1xcclxcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xcclxcbiAgICBjb2xvcjogYmxhY2s7XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG4gICAgcGFkZGluZy10b3A6IDAuNWVtO1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMC41ZW07XFxyXFxufVxcclxcblxcclxcbmgyIHtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXHJcXG59XFxyXFxuXFxyXFxudWwge1xcclxcbiAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxyXFxuICAgIHBhZGRpbmc6IDA7XFxyXFxufVxcclxcblxcclxcblxcclxcblxcclxcbmEge1xcclxcbiAgICBjb2xvcjogIzg3MWNhNTtcXHJcXG59XFxyXFxuXFxyXFxuLnN0YXRpc3RpY3Mge1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxufVxcclxcblxcclxcbnRoZWFkIHtcXHJcXG4gICAgZGlzcGxheTogdGFibGUtaGVhZGVyLWdyb3VwO1xcclxcbn1cXHJcXG5cXHJcXG4jdGFibGVCZyB7XFxyXFxuICAgIGhlaWdodDogODAlO1xcclxcbiAgICB3aWR0aDogOTAlO1xcclxcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcclxcbiAgICBtYXJnaW4tdG9wOiA1JTtcXHJcXG4gICAgYmFja2dyb3VuZDogd2hpdGVzbW9rZTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMWVtO1xcclxcbiAgICBib3gtc2hhZG93OiAwIDRweCA4cHggMCByZ2JhKDAsIDAsIDAsIDAuMiksIDAgNnB4IDIwcHggMCByZ2JhKDAsIDAsIDAsIDAuMTkpO1xcclxcbiAgICBib3JkZXI6IDRweCBzb2xpZCAjYmU0NWUwO1xcclxcbiAgIFxcclxcbn1cXHJcXG5cXHJcXG50aCB7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICBmb250LXNpemU6IDEuNWVtO1xcclxcbn1cXHJcXG48L3N0eWxlPlwiXSxcInNvdXJjZVJvb3RcIjpcIndlYnBhY2s6Ly9cIn1dKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2Nzcy1sb2FkZXI/c291cmNlTWFwIS4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi0yN2QxYjIwZVwiLFwic2NvcGVkXCI6dHJ1ZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL3N0YXRpc3RpY3MudnVlXG4vLyBtb2R1bGUgaWQgPSA1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///52\n");

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(2)();\n// imports\n\n\n// module\nexports.push([module.i, \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\", \"\", {\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"register.vue\",\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9yZWdpc3Rlci52dWU/M2RhZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOzs7QUFHQTtBQUNBLG1OQUFvTixrR0FBa0c7O0FBRXRUIiwiZmlsZSI6IjUzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXCIsIFwiXCIsIHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcImZpbGVcIjpcInJlZ2lzdGVyLnZ1ZVwiLFwic291cmNlUm9vdFwiOlwid2VicGFjazovL1wifV0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTQ4ZDNmYmY5XCIsXCJzY29wZWRcIjp0cnVlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvcmVnaXN0ZXIudnVlXG4vLyBtb2R1bGUgaWQgPSA1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///53\n");

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(2)();\n// imports\n\n\n// module\nexports.push([module.i, \"\\n#about {\\r\\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\\r\\n  -webkit-font-smoothing: antialiased;\\r\\n  -moz-osx-font-smoothing: grayscale;\\r\\n  text-align: center;\\r\\n  color: #2c3e50;\\r\\n  margin-top: 60px;\\n}\\n#searchResults {\\r\\n  font-size: 1.5em;\\n}\\n.search-but {\\r\\n  color: #fff;\\r\\n  background-color: #9C27B0;\\r\\n  border-color: #9C27B0;\\r\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\r\\n  margin-top: 2em;\\r\\n  width: 30%;\\n}\\nh1 {\\r\\n  color: white;\\n}\\n#searchBar {\\r\\n  margin-top: 2em;\\n}\\n#inputField {\\r\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\r\\n  height: 3em;\\r\\n  font-size: 1.4em;\\r\\n  font-weight: bold;\\n}\\n#searchBg {\\r\\n  background: whitesmoke;\\r\\n  border-radius: 0.5em;\\r\\n  width: 100%;\\r\\n  margin-top: 2em;\\r\\n  padding: 1em;\\r\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\n}\\n#resultPrint {\\r\\n  color: #871ca5;\\r\\n  text-shadow:\\r\\n\\t\\t-0.5px -0.5px 0 #000,\\r\\n\\t\\t0.5px -0.5px 0 #000,\\r\\n\\t\\t-0.5px 0.5px 0 #000,\\r\\n\\t\\t0.5px 0.5px 0 #000;\\r\\n    font-size: 1.3em;\\n}\\r\\n\\r\\n\", \"\", {\"version\":3,\"sources\":[\"/./src/components/search.vue?62032e70\"],\"names\":[],\"mappings\":\";AAuFA;EACA,oDAAA;EACA,oCAAA;EACA,mCAAA;EACA,mBAAA;EACA,eAAA;EACA,iBAAA;CACA;AAEA;EACA,iBAAA;CACA;AAEA;EACA,YAAA;EACA,0BAAA;EACA,sBAAA;EACA,6EAAA;EACA,gBAAA;EACA,WAAA;CACA;AAEA;EACA,aAAA;CACA;AAEA;EACA,gBAAA;CACA;AAEA;EACA,6EAAA;EACA,YAAA;EACA,iBAAA;EACA,kBAAA;CAEA;AAEA;EACA,uBAAA;EACA,qBAAA;EACA,YAAA;EACA,gBAAA;EACA,aAAA;EACA,6EAAA;CACA;AAEA;EACA,eAAA;EACA;;;;qBAIA;IACA,iBAAA;CACA\",\"file\":\"search.vue\",\"sourcesContent\":[\"<template>\\r\\n  <b-container>\\r\\n    <b-row>\\r\\n      <b-col></b-col>\\r\\n      <b-col cols=\\\"8\\\">\\r\\n        <div>\\r\\n          <br>\\r\\n          <H1>Search for an artist</H1>\\r\\n          <form id=\\\"searchBar\\\" @submit.stop.prevent=\\\"artistSearch\\\">\\r\\n            <b-form-input id=\\\"inputField\\\" type=\\\"text\\\" placeholder=\\\"For example Metallica...\\\" v-model=\\\"searchValue\\\"></b-form-input>\\r\\n            <p></p>\\r\\n            <b-button type=\\\"submit\\\" class=\\\"search-but shadow\\\">Search</b-button>\\r\\n          </form>\\r\\n        </div>\\r\\n      </b-col>\\r\\n      <b-col></b-col>\\r\\n\\r\\n    </b-row>\\r\\n    <p></p>\\r\\n    <b-row id=\\\"searchResults\\\">\\r\\n      <b-col></b-col>\\r\\n      <b-col cols=\\\"10\\\">\\r\\n        <div id=\\\"searchBg\\\" v-if=\\\"seen\\\">\\r\\n\\r\\n          <ol>\\r\\n            <li v-for=\\\"data in resultValue\\\" v-bind:key=\\\"data\\\">\\r\\n              <router-link id=\\\"resultPrint\\\" :to=\\\"{ name: 'artist', params: { name:  data.name,   id: data.musicbrainz_id, spotify: data.spotify_id  }}\\\"> {{ data.name }} </router-link>\\r\\n\\r\\n            </li>\\r\\n          </ol>\\r\\n        </div>\\r\\n      </b-col>\\r\\n      <b-col></b-col>\\r\\n    </b-row>\\r\\n\\r\\n  </b-container>\\r\\n</template>\\r\\n\\r\\n<script>\\r\\nimport axios from 'axios';\\r\\nexport default {\\r\\n\\r\\n  name: 'search',\\r\\n\\r\\n  data: {\\r\\n    searchValue: '',\\r\\n    resultValue: \\\"\\\",\\r\\n  },\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  data() {\\r\\n    return {\\r\\n      resultValue: \\\"\\\",\\r\\n      searchValue: \\\"\\\",\\r\\n      seen: false\\r\\n    }\\r\\n  },\\r\\n\\r\\n  methods: {\\r\\n\\r\\n    artistSearch() {\\r\\n\\r\\n      axios.get(\\\"/api/artists/\\\" + this.searchValue)\\r\\n        .then((response) => {\\r\\n\\r\\n          this.resultValue = response.data.data;\\r\\n         \\r\\n          if ((typeof this.resultValue[0] !== 'undefined') && (this.searchvalue !== '')) {\\r\\n           \\r\\n            this.seen = true;\\r\\n          }\\r\\n\\r\\n        })\\r\\n        .catch(function(error) {\\r\\n          alert(error);\\r\\n        });\\r\\n\\r\\n\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n</script>\\r\\n<!-- styling for the component -->\\r\\n<style>\\r\\n#about {\\r\\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\\r\\n  -webkit-font-smoothing: antialiased;\\r\\n  -moz-osx-font-smoothing: grayscale;\\r\\n  text-align: center;\\r\\n  color: #2c3e50;\\r\\n  margin-top: 60px;\\r\\n}\\r\\n\\r\\n#searchResults {\\r\\n  font-size: 1.5em;\\r\\n}\\r\\n\\r\\n.search-but {\\r\\n  color: #fff;\\r\\n  background-color: #9C27B0;\\r\\n  border-color: #9C27B0;\\r\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\r\\n  margin-top: 2em;\\r\\n  width: 30%;\\r\\n}\\r\\n\\r\\nh1 {\\r\\n  color: white;\\r\\n}\\r\\n\\r\\n#searchBar {\\r\\n  margin-top: 2em;\\r\\n}\\r\\n\\r\\n#inputField {\\r\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\r\\n  height: 3em;\\r\\n  font-size: 1.4em;\\r\\n  font-weight: bold;\\r\\n \\r\\n}\\r\\n\\r\\n#searchBg {\\r\\n  background: whitesmoke;\\r\\n  border-radius: 0.5em;\\r\\n  width: 100%;\\r\\n  margin-top: 2em;\\r\\n  padding: 1em;\\r\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\r\\n}\\r\\n\\r\\n#resultPrint {\\r\\n  color: #871ca5;\\r\\n  text-shadow:\\r\\n\\t\\t-0.5px -0.5px 0 #000,\\r\\n\\t\\t0.5px -0.5px 0 #000,\\r\\n\\t\\t-0.5px 0.5px 0 #000,\\r\\n\\t\\t0.5px 0.5px 0 #000;\\r\\n    font-size: 1.3em;\\r\\n}\\r\\n\\r\\n</style>\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///54\n");

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(2)();\n// imports\n\n\n// module\nexports.push([module.i, \"\\nh1[data-v-8cfc9bc6] {\\r\\n  color: black;\\n}\\nh2[data-v-8cfc9bc6] {\\r\\n  font-weight: normal;\\n}\\nul[data-v-8cfc9bc6] {\\r\\n  list-style-type: none;\\r\\n  padding: 0;\\n}\\n.inline[data-v-8cfc9bc6] {\\r\\n  display: inline-block;\\r\\n  margin: 0 10px;\\n}\\na[data-v-8cfc9bc6] {\\r\\n  color: #871ca5;\\n}\\n.albumTab[data-v-8cfc9bc6] {\\r\\n  border-radius: 4px;\\r\\n  border: 3px solid gray;\\r\\n  height: 100%;\\r\\n  width: 20em;\\r\\n  text-align: center;\\r\\n  margin-top: 1em;\\r\\n  padding: 1em;\\r\\n  background: white;\\n}\\n.albumPic[data-v-8cfc9bc6] {\\r\\n  border-radius: 4px;\\r\\n  border: 5px solid #1d2120;\\r\\n  height: 15em;\\r\\n  width: 15em;\\r\\n  display: block;\\r\\n  margin: auto;\\r\\n  margin: 1em;\\n}\\n.albumPicture[data-v-8cfc9bc6] {\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  max-width: 100%;\\r\\n  max-height: 100%;\\n}\\n.btn-grey[data-v-8cfc9bc6] {\\r\\n  background-color: #D8D8D8;\\r\\n  color: #FFF;\\n}\\naudio[data-v-8cfc9bc6] {\\r\\n\\r\\n  margin: 0 auto;\\r\\n  width: 30%/* value of your choice which suits your alignment */\\n}\\n.bold[data-v-8cfc9bc6] {\\r\\n  font-weight: 700;\\n}\\n.padding-bottom-7[data-v-8cfc9bc6] {\\r\\n  padding-bottom: 7px;\\n}\\n.review-block[data-v-8cfc9bc6] {\\r\\n  background-color: white;\\r\\n  border: 1px solid #EFEFEF;\\r\\n  padding: 15px;\\r\\n  border-radius: 3px;\\r\\n  margin-bottom: 15px;\\r\\n  width: 90%;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\n}\\n.review-block-name[data-v-8cfc9bc6] {\\r\\n  font-size: 12px;\\r\\n  margin: 10px 0;\\n}\\n.review-block-date[data-v-8cfc9bc6] {\\r\\n  font-size: 12px;\\n}\\n.review-block-rate[data-v-8cfc9bc6] {\\r\\n  font-size: 13px;\\r\\n  margin-bottom: 15px;\\n}\\n.review-block-title[data-v-8cfc9bc6] {\\r\\n  font-size: 15px;\\r\\n  font-weight: 700;\\r\\n  margin-bottom: 10px;\\r\\n  word-wrap: break-word;\\n}\\n.review-block-description[data-v-8cfc9bc6] {\\r\\n  font-size: 13px;\\r\\n  word-wrap: break-word;\\n}\\n.artistInfo[data-v-8cfc9bc6] {\\r\\n  margin: 1% 3% 3% 3%;\\r\\n  width: 29%;\\r\\n  height: 90%;\\r\\n  float: left;\\r\\n  position: fixed;\\r\\n  background: whitesmoke;\\r\\n  border-radius: 1em;\\r\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\n}\\n.artistContent[data-v-8cfc9bc6] {\\r\\n  width: 62%;\\r\\n  margin: 1% 3% 3% 0%;\\r\\n  float: right;\\r\\n  background: whitesmoke;\\r\\n  border-radius: 1em;\\r\\n  padding-top: 1%;\\r\\n  padding-bottom: 1em;\\r\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\n}\\n#spotifyPlayer[data-v-8cfc9bc6] {\\r\\n  width: 100%;\\r\\n  height: 100%;\\n}\\n#spotifyCont[data-v-8cfc9bc6] {\\r\\n  display: -webkit-flex;\\r\\n  display: flex;\\r\\n  -webkit-flex-direction: row;\\r\\n  flex-direction: row;\\r\\n  -webkit-align-items: center;\\r\\n  align-items: center;\\r\\n  -webkit-justify-content: center;\\r\\n  justify-content: center;\\r\\n  height: 38%;\\r\\n  width: 85%;\\r\\n  padding-bottom: 1%;\\r\\n  padding-top: 1%;\\r\\n  margin: auto;\\n}\\n#artistDetails[data-v-8cfc9bc6] {\\r\\n  height: 45%;\\r\\n  width: 100%;\\n}\\n.artistBody[data-v-8cfc9bc6] {\\r\\n  background: #42a1f4 !important;\\n}\\n#reviewButton[data-v-8cfc9bc6] {\\r\\n  width: 90%;\\r\\n  margin-top: 2em;\\r\\n  color: white;\\r\\n  background: #871ca5;\\r\\n  border-color: #871ca5;\\n}\\n#newReview[data-v-8cfc9bc6] {\\r\\n  width: 90%;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n  margin-top: 2em;\\r\\n  margin-bottom: 2em;\\n}\\n#infoList[data-v-8cfc9bc6] {\\r\\n  display: -webkit-flex;\\r\\n  display: flex;\\r\\n  -webkit-align-items: center;\\r\\n  align-items: center;\\r\\n  -webkit-justify-content: center;\\r\\n  justify-content: center;\\r\\n  -webkit-flex-direction: row;\\r\\n  flex-direction: row;\\r\\n  -webkit-flex-wrap: wrap;\\r\\n  flex-wrap: wrap;\\r\\n  -webkit-flex-flow: row wrap;\\r\\n  flex-flow: row wrap;\\r\\n  -webkit-align-content: flex-end;\\r\\n  align-content: flex-end;\\r\\n  margin: auto;\\r\\n  width: 85%;\\r\\n  height: 35%;\\n}\\n.infoPic[data-v-8cfc9bc6] {\\r\\n  border-radius: 4px;\\r\\n  border: 2px solid #1d2120;\\r\\n  height: 3em;\\r\\n  width: 3em;\\r\\n  margin: 1em;\\n}\\n#recImage[data-v-8cfc9bc6] {\\r\\n  width: 50%;\\r\\n  height: 100%;\\n}\\n#recText[data-v-8cfc9bc6] {\\r\\n  font-weight: bold;\\r\\n  font-size: 3em;\\r\\n  color: white;\\n}\\n#recSlide[data-v-8cfc9bc6] {\\r\\n  width: 90%;\\r\\n  height: 25em;\\r\\n  background: #a3a8af;\\r\\n  margin: auto;\\r\\n  border-radius: 4px;\\r\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\n}\\n#albumlist[data-v-8cfc9bc6] {\\r\\n  margin-bottom: 2em;\\n}\\n#recGenres[data-v-8cfc9bc6] {\\r\\n  /* margin-right: -15em; */\\r\\n  text-shadow: none !important;\\r\\n  font-size: 2em;\\r\\n  position: absolute;\\r\\n  bottom: 0.8em;\\r\\n  right: 0;\\r\\n  opacity: 0.8;\\r\\n  color: #871ca5 !important;\\r\\n  background: #871ca5;\\r\\n  border-color: #871ca5;\\n}\\n#recFollow[data-v-8cfc9bc6] {\\r\\n  position: absolute;\\r\\n  bottom: 1.5em;\\r\\n  left: 0;\\r\\n  height: 5.5em;\\r\\n  width: 8.6em;\\r\\n  padding: 4px;\\r\\n  background: whitesmoke;\\r\\n  border-radius: 4px;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n  opacity: 0.8;\\n}\\n#recommendations[data-v-8cfc9bc6] {\\r\\n  margin-top: 2em;\\n}\\n#artistDesc[data-v-8cfc9bc6] {\\r\\n  width: 88%;\\r\\n  height: 14em;\\r\\n  background: white;\\r\\n  margin: auto;\\r\\n  margin-top: 1em !important;\\r\\n  border-radius: 4px;\\r\\n  padding-top: 0.7em;\\r\\n  padding-left: 1em;\\n}\\n#rating-block[data-v-8cfc9bc6] {\\r\\n  border-radius: 3px;\\r\\n  width: 15em;\\r\\n  height: 10em;\\r\\n  float: left;\\n}\\n#artistFollow[data-v-8cfc9bc6] {\\r\\n  float: right;\\n}\\n#artistTitle h1[data-v-8cfc9bc6] {\\r\\n  color: #871ca5;\\r\\n  text-shadow: -0.5px -0.5px 0 #000,\\r\\n  0.5px -0.5px 0 #000,\\r\\n  -0.5px 0.5px 0 #000,\\r\\n  0.5px 0.5px 0 #000;\\r\\n  font-weight: bold;\\r\\n  margin-top: 0.6em;\\r\\n  font-size: 3em;\\r\\n  width: 90%;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\n}\\n#addButton[data-v-8cfc9bc6] {\\r\\n  color: white;\\r\\n  background: #871ca5;\\r\\n  border-color: #871ca5;\\n}\\nth[data-v-8cfc9bc6] {\\r\\n  text-align: center;\\n}\\n.tableItem[data-v-8cfc9bc6] {\\r\\n  margin: auto;\\r\\n  height: 5em;\\r\\n  vertical-align: middle;\\n}\\naudio[data-v-8cfc9bc6] {\\r\\n  width: 15em;\\n}\\n#topSongs[data-v-8cfc9bc6] {\\r\\n  width: 90%;\\r\\n  background: white;\\r\\n  margin: auto;\\r\\n  border-radius: 1em;\\n}\\r\\n\", \"\", {\"version\":3,\"sources\":[\"/./src/components/artist.vue?88c980fe\"],\"names\":[],\"mappings\":\";AAiZA;EACA,aAAA;CACA;AAEA;EACA,oBAAA;CACA;AAEA;EACA,sBAAA;EACA,WAAA;CACA;AAEA;EACA,sBAAA;EACA,eAAA;CACA;AAEA;EACA,eAAA;CACA;AAEA;EACA,mBAAA;EACA,uBAAA;EACA,aAAA;EACA,YAAA;EACA,mBAAA;EACA,gBAAA;EACA,aAAA;EACA,kBAAA;CACA;AAEA;EACA,mBAAA;EACA,0BAAA;EACA,aAAA;EACA,YAAA;EACA,eAAA;EACA,aAAA;EACA,YAAA;CACA;AAIA;EACA,YAAA;EACA,aAAA;EACA,gBAAA;EACA,iBAAA;CACA;AAEA;EACA,0BAAA;EACA,YAAA;CACA;AAEA;;EAEA,eAAA;EACA,UAAA,qDAAA;CACA;AAEA;EACA,iBAAA;CACA;AAEA;EACA,oBAAA;CACA;AAEA;EACA,wBAAA;EACA,0BAAA;EACA,cAAA;EACA,mBAAA;EACA,oBAAA;EACA,WAAA;EACA,kBAAA;EACA,mBAAA;CACA;AAEA;EACA,gBAAA;EACA,eAAA;CACA;AAEA;EACA,gBAAA;CACA;AAEA;EACA,gBAAA;EACA,oBAAA;CACA;AAEA;EACA,gBAAA;EACA,iBAAA;EACA,oBAAA;EACA,sBAAA;CACA;AAEA;EACA,gBAAA;EACA,sBAAA;CACA;AAEA;EACA,oBAAA;EACA,WAAA;EACA,YAAA;EACA,YAAA;EACA,gBAAA;EACA,uBAAA;EACA,mBAAA;EACA,6EAAA;CACA;AAEA;EACA,WAAA;EACA,oBAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,gBAAA;EACA,oBAAA;EACA,6EAAA;CACA;AAEA;EACA,YAAA;EACA,aAAA;CACA;AAEA;EACA,sBAAA;EACA,cAAA;EACA,4BAAA;EACA,oBAAA;EACA,4BAAA;EACA,oBAAA;EACA,gCAAA;EACA,wBAAA;EACA,YAAA;EACA,WAAA;EACA,mBAAA;EACA,gBAAA;EACA,aAAA;CACA;AAEA;EACA,YAAA;EACA,YAAA;CACA;AAEA;EACA,+BAAA;CACA;AAEA;EACA,WAAA;EACA,gBAAA;EACA,aAAA;EACA,oBAAA;EACA,sBAAA;CACA;AAEA;EACA,WAAA;EACA,kBAAA;EACA,mBAAA;EACA,gBAAA;EACA,mBAAA;CACA;AAEA;EACA,sBAAA;EACA,cAAA;EACA,4BAAA;EACA,oBAAA;EACA,gCAAA;EACA,wBAAA;EACA,4BAAA;EACA,oBAAA;EACA,wBAAA;EACA,gBAAA;EACA,4BAAA;EACA,oBAAA;EACA,gCAAA;EACA,wBAAA;EACA,aAAA;EACA,WAAA;EACA,YAAA;CACA;AAEA;EACA,mBAAA;EACA,0BAAA;EACA,YAAA;EACA,WAAA;EACA,YAAA;CACA;AAIA;EACA,WAAA;EACA,aAAA;CACA;AAGA;EACA,kBAAA;EACA,eAAA;EACA,aAAA;CACA;AAEA;EACA,WAAA;EACA,aAAA;EACA,oBAAA;EACA,aAAA;EACA,mBAAA;EACA,6EAAA;CACA;AAEA;EACA,mBAAA;CACA;AAEA;EACA,0BAAA;EACA,6BAAA;EACA,eAAA;EACA,mBAAA;EACA,cAAA;EACA,SAAA;EACA,aAAA;EACA,0BAAA;EACA,oBAAA;EACA,sBAAA;CACA;AAEA;EACA,mBAAA;EACA,cAAA;EACA,QAAA;EACA,cAAA;EACA,aAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,kBAAA;EACA,mBAAA;EACA,aAAA;CACA;AAEA;EACA,gBAAA;CACA;AAEA;EACA,WAAA;EACA,aAAA;EACA,kBAAA;EACA,aAAA;EACA,2BAAA;EACA,mBAAA;EACA,mBAAA;EACA,kBAAA;CACA;AAEA;EACA,mBAAA;EACA,YAAA;EACA,aAAA;EACA,YAAA;CACA;AAEA;EACA,aAAA;CACA;AAEA;EACA,eAAA;EACA;;;qBAGA;EACA,kBAAA;EACA,kBAAA;EACA,eAAA;EACA,WAAA;EACA,kBAAA;EACA,mBAAA;CACA;AAEA;EACA,aAAA;EACA,oBAAA;EACA,sBAAA;CACA;AAEA;EACA,mBAAA;CACA;AAEA;EACA,aAAA;EACA,YAAA;EACA,uBAAA;CAEA;AAEA;EACA,YAAA;CACA;AAEA;EACA,WAAA;EACA,kBAAA;EACA,aAAA;EACA,mBAAA;CAEA\",\"file\":\"artist.vue\",\"sourcesContent\":[\"<template>\\r\\n  <div class=\\\"artist\\\">\\r\\n\\r\\n    <div class=\\\"artistBody\\\">\\r\\n\\r\\n      <div class=\\\"artistInfo\\\">\\r\\n        <div id=\\\"artistTitle\\\">\\r\\n          <h1>{{$route.params.name}}</h1>\\r\\n          <br>\\r\\n        </div>\\r\\n\\r\\n        <div id=\\\"artistDetails\\\">\\r\\n          <ul v-if=\\\"$route.params.name == 'Metallica'\\\">\\r\\n            <li> Year formed: 1981</li>\\r\\n            <li> Year to: Present</li>\\r\\n            <br>\\r\\n            <li> James Hetfield</li>\\r\\n            <li> Lars Ulrich</li>\\r\\n            <li> Kirk Hammett </li>\\r\\n            <li> Robert Trujillo</li>\\r\\n            <br>\\r\\n\\r\\n          </ul>\\r\\n          <div id=\\\"infoList\\\">\\r\\n\\r\\n            <div class=\\\"infoPic\\\" v-for=\\\"data in infoResult\\\" v-bind:key=\\\"data\\\">\\r\\n              <a :href='data.url' target=\\\"_blank\\\">\\r\\n                <img class=\\\"albumPicture\\\" :src='data.picture' alt='img' />\\r\\n              </a>\\r\\n\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n\\r\\n        <div id=\\\"spotifyCont\\\">\\r\\n          <iframe id=\\\"spotifyPlayer\\\" :src=\\\"'https://open.spotify.com/embed?uri=spotify%3Aalbum%3A'  + this.playerId + '&theme=white'\\\" frameborder=\\\"0\\\" allowtransparency=\\\"true\\\"></iframe>\\r\\n        </div>\\r\\n\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"artistContent\\\">\\r\\n\\r\\n        <div id=\\\"artistDesc\\\">\\r\\n\\r\\n          <h1> Description{{this.artistDescription}}</h1>\\r\\n\\r\\n          <iframe id=\\\"artistFollow\\\" :src=\\\"'https://open.spotify.com/follow/1/?uri=spotify:artist:'+$route.params.spotify+'&size=detail&theme=light'\\\" scrolling=\\\"no\\\" frameborder=\\\"0\\\" style=\\\"border:none; overflow:hidden;\\\" allowtransparency=\\\"true\\\"></iframe>\\r\\n\\r\\n          <div id=\\\"rating-block\\\">\\r\\n            <h4>Average user rating</h4>\\r\\n            <h2 class=\\\"bold padding-bottom-7\\\">{{this.average}}\\r\\n              <small>/ 5</small>\\r\\n            </h2>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-warning btn-sm\\\" aria-label=\\\"Left Align\\\">\\r\\n              <span class=\\\"glyphicon glyphicon-star\\\" aria-hidden=\\\"true\\\"></span>\\r\\n            </button>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-warning btn-sm\\\" aria-label=\\\"Left Align\\\">\\r\\n              <span class=\\\"glyphicon glyphicon-star\\\" aria-hidden=\\\"true\\\"></span>\\r\\n            </button>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-warning btn-sm\\\" aria-label=\\\"Left Align\\\">\\r\\n              <span class=\\\"glyphicon glyphicon-star\\\" aria-hidden=\\\"true\\\"></span>\\r\\n            </button>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-grey btn-sm\\\" aria-label=\\\"Left Align\\\">\\r\\n              <span class=\\\"glyphicon glyphicon-star\\\" aria-hidden=\\\"true\\\"></span>\\r\\n            </button>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-grey btn-sm\\\" aria-label=\\\"Left Align\\\">\\r\\n              <span class=\\\"glyphicon glyphicon-star\\\" aria-hidden=\\\"true\\\"></span>\\r\\n            </button>\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n\\r\\n        <div id=\\\"albumList\\\">\\r\\n          <ul>\\r\\n\\r\\n            <li class=\\\"inline\\\" v-for=\\\"data in albumResult\\\" v-bind:key=\\\"data\\\">\\r\\n              <div class=\\\"albumTab\\\">\\r\\n                <router-link :to=\\\"{ name: 'album', params: {title:  data.title,   id: data.album_musicbrainz_id, artist: $route.params.name  }}\\\"> {{ data.title }} </router-link>\\r\\n\\r\\n                <div class=\\\"albumPic\\\">\\r\\n                  <img class=\\\"albumPicture\\\" :src=\\\"'https://coverartarchive.org/release-group/' + data.album_musicbrainz_id + '/front.jpg'\\\" alt=\\\"Album cover not found\\\" />\\r\\n                </div>\\r\\n\\r\\n                <ul>\\r\\n\\r\\n                  <li class=\\\"inline\\\" v-if=\\\"data.release_date == undefined\\\"> Date: Not found </li>\\r\\n                  <li class=\\\"inline\\\" v-else> Date: {{ data.release_date }} </li>\\r\\n\\r\\n                  <li class=\\\"inline\\\">\\r\\n\\r\\n                    <button v-b-tooltip.hover.auto title=\\\"Add this album to your profile\\\" type=\\\"submit\\\" variant=\\\"primary\\\" v-on:click=\\\"add(data.artist_name,data.title,data.album_musicbrainz_id)\\\">Add</button>\\r\\n\\r\\n                  </li>\\r\\n                  <li class=\\\"inline\\\">\\r\\n                    <button v-b-tooltip.hover.auto title=\\\"Listen to this album\\\" type=\\\"submit\\\" variant=\\\"primary\\\" v-on:click=\\\"updateSpotify(data.title)\\\">Listen</button>\\r\\n                  </li>\\r\\n                </ul>\\r\\n\\r\\n              </div>\\r\\n            </li>\\r\\n          </ul>\\r\\n        </div>\\r\\n        <div id=\\\"recommendations\\\">\\r\\n\\r\\n          <b-carousel style=\\\"text-shadow: 1px 1px 2px #333;\\\" controls indicators img-width=\\\"100%\\\" img-height=\\\"25em\\\" background=\\\"whitesmoke\\\" :interval=\\\"4000\\\" v-model=\\\"slide\\\">\\r\\n\\r\\n            <b-carousel-slide id=\\\"recSlide\\\" v-for=\\\"data in recResult\\\" v-bind:key=\\\"data\\\">\\r\\n              <h1 id=\\\"recText\\\"> {{ data.name}} </h1>\\r\\n              <iframe id=\\\"recFollow\\\" :src=\\\"'https://open.spotify.com/follow/1/?uri=spotify:artist:'+data.id+'&size=detail&theme=light'\\\" frameborder=\\\"0\\\" allowtransparency=\\\"false\\\"></iframe>\\r\\n              <b-dropdown id=\\\"recGenres\\\" dropup text=\\\"Genres\\\" variant=\\\"primary\\\">\\r\\n                <b-dropdown-header> {{ data.genres[0]}} </b-dropdown-header>\\r\\n                <b-dropdown-header> {{ data.genres[1]}} </b-dropdown-header>\\r\\n                <b-dropdown-header> {{ data.genres[2]}} </b-dropdown-header>\\r\\n                <b-dropdown-header> {{ data.genres[3]}} </b-dropdown-header>\\r\\n                <b-dropdown-header> {{ data.genres[4]}} </b-dropdown-header>\\r\\n                <b-dropdown-header> {{ data.genres[5]}} </b-dropdown-header>\\r\\n                <b-dropdown-header> {{ data.genres[6]}} </b-dropdown-header>\\r\\n                <b-dropdown-header> {{ data.genres[7]}} </b-dropdown-header>\\r\\n                <b-dropdown-header> {{ data.genres[8]}} </b-dropdown-header>\\r\\n\\r\\n              </b-dropdown>\\r\\n\\r\\n              <img id=\\\"recImage\\\" slot=\\\"img\\\" :src=\\\"data.images[0].url\\\" alt=\\\"N/A\\\">\\r\\n            </b-carousel-slide>\\r\\n\\r\\n          </b-carousel>\\r\\n\\r\\n        </div>\\r\\n\\r\\n        <div id=\\\"artistReviews\\\">\\r\\n\\r\\n          <div id=\\\"addReview\\\">\\r\\n\\r\\n            <button id=\\\"reviewButton\\\" type=\\\"button\\\" v-if=\\\"this.username != null\\\" class=\\\"btn btn-info\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#newReview\\\">Write a review</button>\\r\\n            <br>\\r\\n            <div id=\\\"newReview\\\" class=\\\"collapse\\\">\\r\\n              <form action=\\\"/api/reviews/create\\\" method=\\\"post\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label for=\\\"title\\\">Title</label>\\r\\n                  <textarea name=\\\"title\\\" class=\\\"form-control\\\" id=\\\"title\\\" rows=\\\"1\\\"></textarea>\\r\\n                </div>\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label for=\\\"score\\\">Score</label>\\r\\n                  <select class=\\\"form-control\\\" name=\\\"score\\\" id=\\\"score\\\">\\r\\n                    <option>1</option>\\r\\n                    <option>2</option>\\r\\n                    <option>3</option>\\r\\n                    <option>4</option>\\r\\n                    <option>5</option>\\r\\n                  </select>\\r\\n                </div>\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label for=\\\"text\\\">Review</label>\\r\\n                  <textarea class=\\\"form-control\\\" name=\\\"text\\\" id=\\\"text\\\" rows=\\\"3\\\"></textarea>\\r\\n                </div>\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <input type=\\\"hidden\\\" name=\\\"artistId\\\" readonly class=\\\"form-control-plaintext\\\" id=\\\"artistId\\\" v-bind:value=\\\"this.id\\\">\\r\\n                </div>\\r\\n                <button type=\\\"submit\\\" class=\\\"btn btn-warning btn-lg\\\">Save</button>\\r\\n              </form>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n           <div id=\\\"topSongs\\\">\\r\\n\\r\\n          <table class=\\\"table table-responsive\\\">\\r\\n\\r\\n            <thead>\\r\\n              <tr>\\r\\n                <th>Title</th>\\r\\n                <th>Album</th>\\r\\n                <th>Popularity</th>\\r\\n                <th>Sample</th>\\r\\n                <th>Spotify</th>\\r\\n\\r\\n              </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n              <tr v-for=\\\"data in spotifyResult\\\" v-bind:key=\\\"data\\\">\\r\\n                <td class=\\\"tableItem\\\">{{data.name}}</td>\\r\\n                <td class=\\\"tableItem\\\"> <img :src=\\\"data.album.images[2].url\\\" alt=\\\"N/A\\\"></td>\\r\\n                <td class=\\\"tableItem\\\">{{data.popularity}}</td>\\r\\n                <td class=\\\"tableItem\\\">\\r\\n                  <audio controls>\\r\\n                    <source :src=\\\"data.preview_url\\\" type=\\\"audio/mpeg\\\">\\r\\n                  </audio>\\r\\n                </td>\\r\\n                <td class=\\\"tableItem\\\">\\r\\n                  <iframe class=\\\"tableItem\\\" :src=\\\"'https://open.spotify.com/embed?uri='+data.uri\\\" frameborder=\\\"0\\\" allowtransparency=\\\"true\\\"></iframe>\\r\\n                </td>\\r\\n\\r\\n              </tr>\\r\\n\\r\\n            </tbody>\\r\\n          </table>\\r\\n\\r\\n    \\r\\n        </div>\\r\\n\\r\\n          <div id=\\\"review\\\">\\r\\n            <ul>\\r\\n              <li v-for=\\\"data in reviewResult\\\" v-bind:key=\\\"data\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                  <div class=\\\"col-sm-12\\\">\\r\\n                    <hr/>\\r\\n                    <div class=\\\"review-block\\\">\\r\\n                      <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-sm-3\\\">\\r\\n                          <img src=\\\"/static/img/forsene.jpg\\\" class=\\\"img-rounded\\\">\\r\\n                          <div class=\\\"review-block-name\\\">\\r\\n                            <router-link :to=\\\"{ name: 'profile', params: {name:  data.username}}\\\"> {{data.username}} </router-link>\\r\\n                          </div>\\r\\n                          <div class=\\\"review-block-date\\\">{{data.created_at}}</div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-sm-9\\\">\\r\\n                          <div class=\\\"review-block-rate\\\">\\r\\n                            <button type=\\\"button\\\" class=\\\"btn btn-warning btn-xs\\\" aria-label=\\\"Left Align\\\">\\r\\n                              <span class=\\\"glyphicon glyphicon-star\\\" aria-hidden=\\\"true\\\"></span>\\r\\n                            </button>\\r\\n                            <button type=\\\"button\\\" class=\\\"btn btn-warning btn-xs\\\" aria-label=\\\"Left Align\\\">\\r\\n                              <span class=\\\"glyphicon glyphicon-star\\\" aria-hidden=\\\"true\\\"></span>\\r\\n                            </button>\\r\\n                            <button type=\\\"button\\\" class=\\\"btn btn-warning btn-xs\\\" aria-label=\\\"Left Align\\\">\\r\\n                              <span class=\\\"glyphicon glyphicon-star\\\" aria-hidden=\\\"true\\\"></span>\\r\\n                            </button>\\r\\n                            <button type=\\\"button\\\" class=\\\"btn btn-default btn-grey btn-xs\\\" aria-label=\\\"Left Align\\\">\\r\\n                              <span class=\\\"glyphicon glyphicon-star\\\" aria-hidden=\\\"true\\\"></span>\\r\\n                            </button>\\r\\n                            <button type=\\\"button\\\" class=\\\"btn btn-default btn-grey btn-xs\\\" aria-label=\\\"Left Align\\\">\\r\\n                              <span class=\\\"glyphicon glyphicon-star\\\" aria-hidden=\\\"true\\\"></span>\\r\\n                            </button>\\r\\n                          </div>\\r\\n                          <div class=\\\"review-block-title\\\">{{data.title}}</div>\\r\\n                          <div class=\\\"review-block-description\\\">{{data.text}}</div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <hr/>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </li>\\r\\n            </ul>\\r\\n          </div>\\r\\n        </div>\\r\\n       \\r\\n\\r\\n        <div id=\\\"artistRecommendations\\\">\\r\\n\\r\\n        </div>\\r\\n\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n</template>\\r\\n<script>\\r\\nimport axios from 'axios';\\r\\nexport default {\\r\\n  name: 'artist',\\r\\n  data() {\\r\\n    return {\\r\\n      albumResult: '',\\r\\n      picResult: '',\\r\\n      reviewResult: '',\\r\\n      infoResult: '',\\r\\n      spotifyResult: '',\\r\\n      recResult: '',\\r\\n      albumId: '',\\r\\n      playerId: '',\\r\\n      spotifyAlbums: '',\\r\\n      artistDescription: '',\\r\\n      average: 0,\\r\\n\\r\\n      id: this.$route.params.id,\\r\\n      username: null,\\r\\n\\r\\n    }\\r\\n  },\\r\\n  created: function() {\\r\\n\\r\\n    axios.get(\\\"/api/artists/bio/\\\" + this.$route.params.id)\\r\\n      .then((response) => {\\r\\n        this.artistDescription = response.data.media.data.text;\\r\\n\\r\\n\\r\\n\\r\\n      })\\r\\n      .catch(function(error) {\\r\\n\\r\\n      });\\r\\n\\r\\n\\r\\n    axios.get(\\\"/api/spotify/get/related/\\\" + this.$route.params.spotify)\\r\\n      .then((response) => {\\r\\n        this.recResult = response.data.artists;\\r\\n\\r\\n      })\\r\\n      .catch(function(error) {\\r\\n\\r\\n      });\\r\\n    axios.get(\\\"/api/user/get/\\\")\\r\\n      .then((response) => {\\r\\n        this.username = response.data;\\r\\n      })\\r\\n      .catch(function(error) {\\r\\n      });\\r\\n    axios.get(\\\"/api/albums/\\\" + this.$route.params.name)\\r\\n      .then((response) => {\\r\\n        this.albumResult = response.data.data;\\r\\n\\r\\n      })\\r\\n      .catch(function(error) {\\r\\n        alert(error);\\r\\n      });\\r\\n    axios.get(\\\"/api/spotify/get/toptracks/\\\" + this.$route.params.spotify)\\r\\n      .then((response) => {\\r\\n        this.spotifyResult = response.data.tracks;\\r\\n\\r\\n      })\\r\\n      .catch(function(error) {\\r\\n        alert(error);\\r\\n      });\\r\\n    axios.get(\\\"/api/artists/info/\\\" + this.$route.params.id)\\r\\n      .then((response) => {\\r\\n        this.infoResult = response.data;\\r\\n\\r\\n      })\\r\\n      .catch(function(error) {\\r\\n        alert(error);\\r\\n      });\\r\\n    axios.get(\\\"/api/reviews/get/\\\" + this.$route.params.id)\\r\\n      .then((response) => {\\r\\n        this.reviewResult = response.data;\\r\\n        let total = 0.0;\\r\\n        let count = 0.0;\\r\\n        for (let value of this.reviewResult) {\\r\\n          total += value.score;\\r\\n          count += 1;\\r\\n        }\\r\\n        this.average = Math.round((total / count) * 10) / 10;\\r\\n      })\\r\\n      .catch(function(error) {\\r\\n        alert(error);\\r\\n\\r\\n        this.albumResult\\r\\n      });\\r\\n\\r\\n    axios.get(\\\"/api/spotify/get/albums/\\\" + this.$route.params.spotify)\\r\\n      .then((response) => {\\r\\n        this.spotifyAlbums = response.data.items;\\r\\n        this.playerId = this.spotifyAlbums[0].id;\\r\\n\\r\\n\\r\\n      })\\r\\n      .catch(function(error) {\\r\\n        alert(error);\\r\\n      });\\r\\n\\r\\n  },\\r\\n  methods: {\\r\\n\\r\\n    add: function(artist, title, mbid) {\\r\\n      axios.get('/api/user/albums/add/' + artist + '/' + title + '/' + mbid)\\r\\n        .then((response) => {\\r\\n          if (response.data == \\\"Added\\\")\\r\\n            alert(title + \\\" added\\\");\\r\\n          else\\r\\n            alert(\\\"Log in!\\\");\\r\\n\\r\\n\\r\\n        })\\r\\n        .catch(function(error) {\\r\\n\\r\\n        });\\r\\n\\r\\n    },\\r\\n\\r\\n    updateSpotify: function(albumId) {\\r\\n\\r\\n      albumId = albumId.replace(/\\\\s+/g, '').toLowerCase();\\r\\n\\r\\n      for (let data of this.spotifyAlbums) {\\r\\n\\r\\n        if (data.name.replace(/\\\\s+/g, '').toLowerCase().includes(albumId)) {\\r\\n\\r\\n          this.playerId = data.id;\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n  }\\r\\n}\\r\\n</script>\\r\\n<!-- Add \\\"scoped\\\" attribute to limit CSS to this component only -->\\r\\n<style scoped>\\r\\nh1 {\\r\\n  color: black;\\r\\n}\\r\\n\\r\\nh2 {\\r\\n  font-weight: normal;\\r\\n}\\r\\n\\r\\nul {\\r\\n  list-style-type: none;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n.inline {\\r\\n  display: inline-block;\\r\\n  margin: 0 10px;\\r\\n}\\r\\n\\r\\na {\\r\\n  color: #871ca5;\\r\\n}\\r\\n\\r\\n.albumTab {\\r\\n  border-radius: 4px;\\r\\n  border: 3px solid gray;\\r\\n  height: 100%;\\r\\n  width: 20em;\\r\\n  text-align: center;\\r\\n  margin-top: 1em;\\r\\n  padding: 1em;\\r\\n  background: white;\\r\\n}\\r\\n\\r\\n.albumPic {\\r\\n  border-radius: 4px;\\r\\n  border: 5px solid #1d2120;\\r\\n  height: 15em;\\r\\n  width: 15em;\\r\\n  display: block;\\r\\n  margin: auto;\\r\\n  margin: 1em;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n.albumPicture {\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  max-width: 100%;\\r\\n  max-height: 100%;\\r\\n}\\r\\n\\r\\n.btn-grey {\\r\\n  background-color: #D8D8D8;\\r\\n  color: #FFF;\\r\\n}\\r\\n\\r\\naudio {\\r\\n\\r\\n  margin: 0 auto;\\r\\n  width: 30%/* value of your choice which suits your alignment */\\r\\n}\\r\\n\\r\\n.bold {\\r\\n  font-weight: 700;\\r\\n}\\r\\n\\r\\n.padding-bottom-7 {\\r\\n  padding-bottom: 7px;\\r\\n}\\r\\n\\r\\n.review-block {\\r\\n  background-color: white;\\r\\n  border: 1px solid #EFEFEF;\\r\\n  padding: 15px;\\r\\n  border-radius: 3px;\\r\\n  margin-bottom: 15px;\\r\\n  width: 90%;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n}\\r\\n\\r\\n.review-block-name {\\r\\n  font-size: 12px;\\r\\n  margin: 10px 0;\\r\\n}\\r\\n\\r\\n.review-block-date {\\r\\n  font-size: 12px;\\r\\n}\\r\\n\\r\\n.review-block-rate {\\r\\n  font-size: 13px;\\r\\n  margin-bottom: 15px;\\r\\n}\\r\\n\\r\\n.review-block-title {\\r\\n  font-size: 15px;\\r\\n  font-weight: 700;\\r\\n  margin-bottom: 10px;\\r\\n  word-wrap: break-word;\\r\\n}\\r\\n\\r\\n.review-block-description {\\r\\n  font-size: 13px;\\r\\n  word-wrap: break-word;\\r\\n}\\r\\n\\r\\n.artistInfo {\\r\\n  margin: 1% 3% 3% 3%;\\r\\n  width: 29%;\\r\\n  height: 90%;\\r\\n  float: left;\\r\\n  position: fixed;\\r\\n  background: whitesmoke;\\r\\n  border-radius: 1em;\\r\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\r\\n}\\r\\n\\r\\n.artistContent {\\r\\n  width: 62%;\\r\\n  margin: 1% 3% 3% 0%;\\r\\n  float: right;\\r\\n  background: whitesmoke;\\r\\n  border-radius: 1em;\\r\\n  padding-top: 1%;\\r\\n  padding-bottom: 1em;\\r\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\r\\n}\\r\\n\\r\\n#spotifyPlayer {\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n}\\r\\n\\r\\n#spotifyCont {\\r\\n  display: -webkit-flex;\\r\\n  display: flex;\\r\\n  -webkit-flex-direction: row;\\r\\n  flex-direction: row;\\r\\n  -webkit-align-items: center;\\r\\n  align-items: center;\\r\\n  -webkit-justify-content: center;\\r\\n  justify-content: center;\\r\\n  height: 38%;\\r\\n  width: 85%;\\r\\n  padding-bottom: 1%;\\r\\n  padding-top: 1%;\\r\\n  margin: auto;\\r\\n}\\r\\n\\r\\n#artistDetails {\\r\\n  height: 45%;\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.artistBody {\\r\\n  background: #42a1f4 !important;\\r\\n}\\r\\n\\r\\n#reviewButton {\\r\\n  width: 90%;\\r\\n  margin-top: 2em;\\r\\n  color: white;\\r\\n  background: #871ca5;\\r\\n  border-color: #871ca5;\\r\\n}\\r\\n\\r\\n#newReview {\\r\\n  width: 90%;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n  margin-top: 2em;\\r\\n  margin-bottom: 2em;\\r\\n}\\r\\n\\r\\n#infoList {\\r\\n  display: -webkit-flex;\\r\\n  display: flex;\\r\\n  -webkit-align-items: center;\\r\\n  align-items: center;\\r\\n  -webkit-justify-content: center;\\r\\n  justify-content: center;\\r\\n  -webkit-flex-direction: row;\\r\\n  flex-direction: row;\\r\\n  -webkit-flex-wrap: wrap;\\r\\n  flex-wrap: wrap;\\r\\n  -webkit-flex-flow: row wrap;\\r\\n  flex-flow: row wrap;\\r\\n  -webkit-align-content: flex-end;\\r\\n  align-content: flex-end;\\r\\n  margin: auto;\\r\\n  width: 85%;\\r\\n  height: 35%;\\r\\n}\\r\\n\\r\\n.infoPic {\\r\\n  border-radius: 4px;\\r\\n  border: 2px solid #1d2120;\\r\\n  height: 3em;\\r\\n  width: 3em;\\r\\n  margin: 1em;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n#recImage {\\r\\n  width: 50%;\\r\\n  height: 100%;\\r\\n}\\r\\n\\r\\n\\r\\n#recText {\\r\\n  font-weight: bold;\\r\\n  font-size: 3em;\\r\\n  color: white;\\r\\n}\\r\\n\\r\\n#recSlide {\\r\\n  width: 90%;\\r\\n  height: 25em;\\r\\n  background: #a3a8af;\\r\\n  margin: auto;\\r\\n  border-radius: 4px;\\r\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\r\\n}\\r\\n\\r\\n#albumlist {\\r\\n  margin-bottom: 2em;\\r\\n}\\r\\n\\r\\n#recGenres {\\r\\n  /* margin-right: -15em; */\\r\\n  text-shadow: none !important;\\r\\n  font-size: 2em;\\r\\n  position: absolute;\\r\\n  bottom: 0.8em;\\r\\n  right: 0;\\r\\n  opacity: 0.8;\\r\\n  color: #871ca5 !important;\\r\\n  background: #871ca5;\\r\\n  border-color: #871ca5;\\r\\n}\\r\\n\\r\\n#recFollow {\\r\\n  position: absolute;\\r\\n  bottom: 1.5em;\\r\\n  left: 0;\\r\\n  height: 5.5em;\\r\\n  width: 8.6em;\\r\\n  padding: 4px;\\r\\n  background: whitesmoke;\\r\\n  border-radius: 4px;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n  opacity: 0.8;\\r\\n}\\r\\n\\r\\n#recommendations {\\r\\n  margin-top: 2em;\\r\\n}\\r\\n\\r\\n#artistDesc {\\r\\n  width: 88%;\\r\\n  height: 14em;\\r\\n  background: white;\\r\\n  margin: auto;\\r\\n  margin-top: 1em !important;\\r\\n  border-radius: 4px;\\r\\n  padding-top: 0.7em;\\r\\n  padding-left: 1em;\\r\\n}\\r\\n\\r\\n#rating-block {\\r\\n  border-radius: 3px;\\r\\n  width: 15em;\\r\\n  height: 10em;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n#artistFollow {\\r\\n  float: right;\\r\\n}\\r\\n\\r\\n#artistTitle h1 {\\r\\n  color: #871ca5;\\r\\n  text-shadow: -0.5px -0.5px 0 #000,\\r\\n  0.5px -0.5px 0 #000,\\r\\n  -0.5px 0.5px 0 #000,\\r\\n  0.5px 0.5px 0 #000;\\r\\n  font-weight: bold;\\r\\n  margin-top: 0.6em;\\r\\n  font-size: 3em;\\r\\n  width: 90%;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n}\\r\\n\\r\\n#addButton {\\r\\n  color: white;\\r\\n  background: #871ca5;\\r\\n  border-color: #871ca5;\\r\\n}\\r\\n\\r\\nth {\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.tableItem {\\r\\n  margin: auto;\\r\\n  height: 5em;\\r\\n  vertical-align: middle;\\r\\n  \\r\\n}\\r\\n\\r\\naudio {\\r\\n  width: 15em;\\r\\n}\\r\\n\\r\\n#topSongs {\\r\\n  width: 90%;\\r\\n  background: white;\\r\\n  margin: auto;\\r\\n  border-radius: 1em;\\r\\n  \\r\\n}\\r\\n</style>\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55\n");

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(2)();\n// imports\n\n\n// module\nexports.push([module.i, \"\\nh1[data-v-d09653ee],\\r\\nh2[data-v-d09653ee] {\\r\\n  font-weight: normal;\\n}\\nul[data-v-d09653ee] {\\r\\n  list-style-type: none;\\r\\n  padding: 0;\\n}\\nli[data-v-d09653ee] {\\r\\n  display: inline-block;\\r\\n  margin: 0 10px;\\n}\\na[data-v-d09653ee] {\\r\\n  color: #42b983;\\n}\\n.albumPic[data-v-d09653ee] {\\r\\n  border-radius: 4px;\\r\\n  border: 5px solid #1d2120;\\r\\n  height: 15em;\\r\\n  width: 15em;\\r\\n  display: block;\\r\\n  margin: auto;\\r\\n  margin: 1em;\\n}\\n.albumPicture[data-v-d09653ee] {\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  max-width: 100%;\\r\\n  max-height: 100%;\\n}\\n#lyricTab[data-v-d09653ee] {\\r\\n  width: 90%;\\r\\n  margin-top: 5em;\\r\\n  margin-bottom: 1em;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\n}\\r\\n\", \"\", {\"version\":3,\"sources\":[\"/./src/components/album.vue?58fbd92c\"],\"names\":[],\"mappings\":\";AAwGA;;EAEA,oBAAA;CACA;AAEA;EACA,sBAAA;EACA,WAAA;CACA;AAEA;EACA,sBAAA;EACA,eAAA;CACA;AAEA;EACA,eAAA;CACA;AAEA;EACA,mBAAA;EACA,0BAAA;EACA,aAAA;EACA,YAAA;EACA,eAAA;EACA,aAAA;EACA,YAAA;CACA;AAIA;EACA,YAAA;EACA,aAAA;EACA,gBAAA;EACA,iBAAA;CACA;AAEA;EACA,WAAA;EACA,gBAAA;EACA,mBAAA;EACA,kBAAA;EACA,mBAAA;CACA\",\"file\":\"album.vue\",\"sourcesContent\":[\"<template>\\r\\n  <div class=\\\"album\\\">\\r\\n\\r\\n    <div id=\\\"lyricTab\\\">\\r\\n      <!-- Tabs with card integration -->\\r\\n      <b-card>\\r\\n        <h2>Song lyrics: {{$route.params.title}}</h2>\\r\\n        <br>\\r\\n\\r\\n        <b-tabs small card ref=\\\"tabs\\\" v-model=\\\"tabIndex\\\">\\r\\n\\r\\n          <b-card>\\r\\n          <pre>\\r\\n          {{this.lyricData}}\\r\\n          </pre>\\r\\n            </b-card>\\r\\n\\r\\n          <div v-for=\\\"data in trackData\\\" :key=\\\"data\\\">\\r\\n\\r\\n            <b-tab v-for=\\\"data2 in data.media[0].tracks\\\" :key=\\\"data2\\\" v-on:click=\\\"say(data.artist,data2.title)\\\" :title=\\\"data2.title\\\">\\r\\n\\r\\n    \\r\\n            \\r\\n            </b-tab>\\r\\n\\r\\n          </div>\\r\\n\\r\\n        </b-tabs>\\r\\n\\r\\n        <span class=\\\"text-muted\\\">Current Tab: {{tabIndex + 1}}</span>\\r\\n      </b-card>\\r\\n\\r\\n      <!-- Control buttons-->\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <!-- <p>{{this.lyricData}} </p>\\r\\n      <ul>\\r\\n        <li v-for=\\\"data in trackData\\\" :key=\\\"data\\\">\\r\\n          <div class=\\\"albumPic\\\">\\r\\n            <img class=\\\"albumPicture\\\" :src=\\\"data.images[0].url + '?user_key=468c1cfb7b96f816544e86fa0698b0cd&inc=images&maxResultCount=1'\\\" />\\r\\n          </div>\\r\\n          <div v-for=\\\"data2 in data.media[0].tracks\\\" :key=\\\"data2\\\">\\r\\n\\r\\n            <p> {{data2.title}} </p>\\r\\n            <button v-on:click=\\\"say(data.artist,data2.title)\\\">Get lyrics</button>\\r\\n\\r\\n          </div>\\r\\n        </li>\\r\\n\\r\\n      </ul> -->\\r\\n\\r\\n  <!-- <a :href='data.url' target=\\\"_blank\\\">\\r\\n                                                    <img class=\\\"albumPicture\\\" :src='data.picture' alt='img' />\\r\\n                                                  </a> -->\\r\\n\\r\\n  </div>\\r\\n</template>\\r\\n\\r\\n<script>\\r\\nimport axios from 'axios';\\r\\nexport default {\\r\\n  name: 'album',\\r\\n  data() {\\r\\n    return {\\r\\n      albumData: '',\\r\\n      trackData: '',\\r\\n      lyricData: '',\\r\\n      abIndex: 1,\\r\\n    }\\r\\n  },\\r\\n  created: function() {\\r\\n    axios.get(\\\"/api/albums/get/\\\" + this.$route.params.artist + \\\"/\\\" + this.$route.params.title)\\r\\n      .then((response) => {\\r\\n        this.trackData = response.data;\\r\\n        this.albumData = response.data;\\r\\n\\r\\n      })\\r\\n      .catch(function(error) {\\r\\n\\r\\n      });\\r\\n  },\\r\\n  methods: {\\r\\n    say: function(artist, title) {\\r\\n      axios.get(\\\"/api/track/get/lyrics/\\\" + artist + \\\"/\\\" + title)\\r\\n        .then((response) => {\\r\\n\\r\\n          this.lyricData = response.data.lyric;\\r\\n\\r\\n        })\\r\\n        .catch(function(error) {\\r\\n\\r\\n        });\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n  }\\r\\n\\r\\n}\\r\\n</script>\\r\\n<!-- Add \\\"scoped\\\" attribute to limit CSS to this component only -->\\r\\n<style scoped>\\r\\nh1,\\r\\nh2 {\\r\\n  font-weight: normal;\\r\\n}\\r\\n\\r\\nul {\\r\\n  list-style-type: none;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\nli {\\r\\n  display: inline-block;\\r\\n  margin: 0 10px;\\r\\n}\\r\\n\\r\\na {\\r\\n  color: #42b983;\\r\\n}\\r\\n\\r\\n.albumPic {\\r\\n  border-radius: 4px;\\r\\n  border: 5px solid #1d2120;\\r\\n  height: 15em;\\r\\n  width: 15em;\\r\\n  display: block;\\r\\n  margin: auto;\\r\\n  margin: 1em;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n.albumPicture {\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  max-width: 100%;\\r\\n  max-height: 100%;\\r\\n}\\r\\n\\r\\n#lyricTab {\\r\\n  width: 90%;\\r\\n  margin-top: 5em;\\r\\n  margin-bottom: 1em;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n}\\r\\n</style>\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///56\n");

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(2)();\n// imports\n\n\n// module\nexports.push([module.i, \"\\n#app {\\r\\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\\r\\n  -webkit-font-smoothing: antialiased;\\r\\n  -moz-osx-font-smoothing: grayscale;\\r\\n  text-align: center;\\r\\n  margin-top: 60px;\\n}\\nbody,\\r\\nh1,\\r\\nh2,\\r\\nh3,\\r\\nh4,\\r\\nh5,\\r\\nh6 {\\r\\n  font-family: \\\"Lato\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\r\\n  font-weight: 700;\\n}\\nbody {\\r\\n  background: url(/static/img/free-purple-triangles-vector.jpg);\\r\\n  background-attachment: fixed;\\r\\n  background-repeat: no-repeat;\\r\\n  background-size: cover;\\n}\\n.navbar {   \\r\\n  background-color:  #9C27B0;  \\r\\n  border-bottom-style: solid;\\r\\n  border-bottom-color: rgb(239, 241, 242);\\r\\n  border-bottom-width: 0;\\r\\n  box-shadow: none;\\n}\\n<!\\\\--.navbar:hover {\\r\\n  display: block;  \\r\\n  background-color: #9C27B0;  \\r\\n  transition-property: all;\\r\\n  transition-duration: 0.3s;\\r\\n  transition-timing-function: ease-out;\\r\\n  transition-delay: initial;\\n}\\n\\\\-->\\r\\n\\r\\n.home-back { \\r\\n  position: absolute;\\r\\n  width: 100%;\\r\\n  height: auto;  \\r\\n  box-shadow: 1px 1px 23px 0 rgba(0,0,0,.6);\\n}\\n.home-wrapper {\\r\\n  position: absolute;\\r\\n  left: 0px;\\r\\n  top: 0px;\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  z-index: -1;\\n}\\n.navbar .navbar-brand {\\r\\n  color: #ecf0f1;\\n}\\n.navbar .navbar-brand:hover,\\r\\n.navbar .navbar-brand:focus {\\r\\n  color: #a7dff4;\\n}\\n.navbar .navbar-text {\\r\\n  color: #ecf0f1;\\n}\\n.navbar .navbar-nav .nav-link {\\r\\n  color: #ecf0f1;\\r\\n  border-radius: .25rem;\\r\\n  margin: 0 0.25em;\\n}\\n.navbar .navbar-nav .nav-link:not(.disabled):hover,\\r\\n.navbar .navbar-nav .nav-link:not(.disabled):focus {\\r\\n  color: #a7dff4;\\n}\\n.navbar .navbar-nav .nav-item.active .nav-link,\\r\\n.navbar .navbar-nav .nav-item.active .nav-link:hover,\\r\\n.navbar .navbar-nav .nav-item.active .nav-link:focus,\\r\\n.navbar .navbar-nav .nav-item.show .nav-link,\\r\\n.navbar .navbar-nav .nav-item.show .nav-link:hover,\\r\\n.navbar .navbar-nav .nav-item.show .nav-link:focus {\\r\\n  color: #a7dff4;\\r\\n  background-color: #0091c5;\\n}\\n.navbar .navbar-toggle {\\r\\n  border-color: #0091c5;\\n}\\n.navbar .navbar-toggle:hover,\\r\\n.navbar .navbar-toggle:focus {\\r\\n  background-color: #0091c5;\\n}\\n.navbar .navbar-toggle .navbar-toggler-icon {\\r\\n  color: #ecf0f1;\\n}\\n.navbar .navbar-collapse,\\r\\n.navbar .navbar-form {\\r\\n  border-color: #ecf0f1;\\n}\\n.navbar .navbar-link {\\r\\n  color: #ecf0f1;\\n}\\n.navbar .navbar-link:hover {\\r\\n  color: #a7dff4;\\n}\\n@media (max-width: 575px) {\\n.navbar-expand-sm .navbar-nav .show .dropdown-menu .dropdown-item {\\r\\n    color: #ecf0f1;\\n}\\n.navbar-expand-sm .navbar-nav .show .dropdown-menu .dropdown-item:hover,\\r\\n  .navbar-expand-sm .navbar-nav .show .dropdown-menu .dropdown-item:focus {\\r\\n    color: #a7dff4;\\n}\\n.navbar-expand-sm .navbar-nav .show .dropdown-menu .dropdown-item.active {\\r\\n    color: #a7dff4;\\r\\n    background-color: #0091c5;\\n}\\n}\\n@media (max-width: 767px) {\\n.navbar-expand-md .navbar-nav .show .dropdown-menu .dropdown-item {\\r\\n    color: #ecf0f1;\\n}\\n.navbar-expand-md .navbar-nav .show .dropdown-menu .dropdown-item:hover,\\r\\n  .navbar-expand-md .navbar-nav .show .dropdown-menu .dropdown-item:focus {\\r\\n    color: #a7dff4;\\n}\\n.navbar-expand-md .navbar-nav .show .dropdown-menu .dropdown-item.active {\\r\\n    color: #a7dff4;\\r\\n    background-color: #0091c5;\\n}\\n}\\n@media (max-width: 991px) {\\n.navbar-expand-lg .navbar-nav .show .dropdown-menu .dropdown-item {\\r\\n    color: #ecf0f1;\\n}\\n.navbar-expand-lg .navbar-nav .show .dropdown-menu .dropdown-item:hover,\\r\\n  .navbar-expand-lg .navbar-nav .show .dropdown-menu .dropdown-item:focus {\\r\\n    color: #a7dff4;\\n}\\n.navbar-expand-lg .navbar-nav .show .dropdown-menu .dropdown-item.active {\\r\\n    color: #a7dff4;\\r\\n    background-color: #0091c5;\\n}\\n}\\n@media (max-width: 1199px) {\\n.navbar-expand-xl .navbar-nav .show .dropdown-menu .dropdown-item {\\r\\n    color: #ecf0f1;\\n}\\n.navbar-expand-xl .navbar-nav .show .dropdown-menu .dropdown-item:hover,\\r\\n  .navbar-expand-xl .navbar-nav .show .dropdown-menu .dropdown-item:focus {\\r\\n    color: #a7dff4;\\n}\\n.navbar-expand-xl .navbar-nav .show .dropdown-menu .dropdown-item.active {\\r\\n    color: #a7dff4;\\r\\n    background-color: #0091c5;\\n}\\n}\\n.navbar-expand .navbar-nav .show .dropdown-menu .dropdown-item {\\r\\n  color: #ecf0f1;\\n}\\n.navbar-expand .navbar-nav .show .dropdown-menu .dropdown-item:hover,\\r\\n.navbar-expand .navbar-nav .show .dropdown-menu .dropdown-item:focus {\\r\\n  color: #a7dff4;\\n}\\n.navbar-expand .navbar-nav .show .dropdown-menu .dropdown-item.active {\\r\\n  color: #a7dff4;\\r\\n  background-color: #0091c5;\\n}\\n#render {\\n}\\r\\n\\r\\n\\r\\n/* .owo {\\r\\n\\r\\n  color: black;\\r\\n} */\\r\\n\", \"\", {\"version\":3,\"sources\":[\"/./src/App.vue?6310a30f\"],\"names\":[],\"mappings\":\";AAuGA;EACA,oDAAA;EACA,oCAAA;EACA,mCAAA;EACA,mBAAA;EACA,iBAAA;CACA;AAEA;;;;;;;EAOA,oEAAA;EACA,iBAAA;CACA;AAEA;EACA,8DAAA;EACA,6BAAA;EACA,6BAAA;EACA,uBAAA;CACA;AAEA;EACA,2BAAA;EACA,2BAAA;EACA,wCAAA;EACA,uBAAA;EACA,iBAAA;CACA;AACA;EACA,eAAA;EACA,0BAAA;EACA,yBAAA;EACA,0BAAA;EACA,qCAAA;EACA,0BAAA;CACA;AAAA;;;EAGA,mBAAA;EACA,YAAA;EACA,aAAA;EACA,0CAAA;CACA;AAEA;EACA,mBAAA;EACA,UAAA;EACA,SAAA;EACA,YAAA;EACA,aAAA;EACA,YAAA;CACA;AAGA;EACA,eAAA;CACA;AAEA;;EAEA,eAAA;CACA;AAEA;EACA,eAAA;CACA;AAEA;EACA,eAAA;EACA,sBAAA;EACA,iBAAA;CACA;AAEA;;EAEA,eAAA;CACA;AAEA;;;;;;EAMA,eAAA;EACA,0BAAA;CACA;AAEA;EACA,sBAAA;CACA;AAEA;;EAEA,0BAAA;CACA;AAEA;EACA,eAAA;CACA;AAEA;;EAEA,sBAAA;CACA;AAEA;EACA,eAAA;CACA;AAEA;EACA,eAAA;CACA;AAEA;AACA;IACA,eAAA;CACA;AACA;;IAEA,eAAA;CACA;AACA;IACA,eAAA;IACA,0BAAA;CACA;CACA;AAEA;AACA;IACA,eAAA;CACA;AACA;;IAEA,eAAA;CACA;AACA;IACA,eAAA;IACA,0BAAA;CACA;CACA;AAEA;AACA;IACA,eAAA;CACA;AACA;;IAEA,eAAA;CACA;AACA;IACA,eAAA;IACA,0BAAA;CACA;CACA;AAEA;AACA;IACA,eAAA;CACA;AACA;;IAEA,eAAA;CACA;AACA;IACA,eAAA;IACA,0BAAA;CACA;CACA;AAEA;EACA,eAAA;CACA;AAEA;;EAEA,eAAA;CACA;AAEA;EACA,eAAA;EACA,0BAAA;CACA;AAEA;CAAA;;;AAGA;;;IAGA\",\"file\":\"App.vue\",\"sourcesContent\":[\"<template>\\r\\n  <div id=\\\"app\\\">\\r\\n\\r\\n<!--    <section class=\\\"home-wrapper\\\">\\r\\n      <div class=\\\"home-back\\\">\\r\\n        <img class=\\\"back-img\\\" src=\\\"/static/img/background-home.jpg\\\" style=\\\"width:100%\\\">\\r\\n      </div>\\r\\n      \\r\\n    </section>\\r\\n    -->\\r\\n\\r\\n    <nav class=\\\"navbar fixed-top navbar-expand-lg navbar-dark\\\">\\r\\n\\r\\n      <div class=\\\"container\\\">\\r\\n\\r\\n        <div>\\r\\n          <router-link class=\\\"navbar-brand\\\" v-bind:to=\\\"'/'\\\">\\r\\n            <img src=\\\"/static/img/logo_and_name/logo/icon1-white.png\\\" style=\\\"width:auto; height:30px\\\" class=\\\"d-inline-block align-top\\\" alt=\\\"\\\">\\r\\n            <img src=\\\"/static/img/logo_and_name/name/name1-white.png\\\" style=\\\"width:auto; height:30px\\\" class=\\\"d-inline-block align-top\\\" alt=\\\"\\\">\\r\\n          </router-link>\\r\\n\\r\\n        </div>\\r\\n\\r\\n        <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarResponsive\\\" aria-controls=\\\"navbarResponsive\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\r\\n          <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n\\r\\n        </button>\\r\\n        <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarResponsive\\\">\\r\\n\\r\\n          <ul class=\\\"navbar-nav ml-auto\\\">\\r\\n            <li class=\\\"nav-item\\\" >\\r\\n              <router-link class=\\\"nav-link\\\" v-bind:to=\\\"'/statistics'\\\">Statistics</router-link>\\r\\n            </li>\\r\\n             <li class=\\\"nav-item\\\" >\\r\\n              <router-link class=\\\"nav-link\\\" v-bind:to=\\\"'/artist/Metallica/65f4f0c5-ef9e-490c-aee3-909e7ae6b2ab/2ye2Wgw4gimLv2eAKyk1NB'\\\">Artist</router-link>\\r\\n            </li>\\r\\n            <li class=\\\"nav-item\\\" v-if=\\\"this.username != null\\\">\\r\\n              <router-link class=\\\"nav-link owo\\\" v-bind:to=\\\"'/profile/'+ username\\\">Profile {{username}}</router-link>\\r\\n            </li>\\r\\n            <li class=\\\"nav-item\\\" v-if=\\\"this.username != null\\\">\\r\\n\\r\\n              <a class=\\\"nav-link\\\" href=\\\"/logout\\\">Logout!</a>\\r\\n\\r\\n            </li>\\r\\n\\r\\n            <li class=\\\"nav-item owo\\\" v-else>\\r\\n              <router-link class=\\\"nav-link\\\" v-bind:to=\\\"'/login'\\\">Login</router-link>\\r\\n            </li>\\r\\n\\r\\n          </ul>\\r\\n        </div>\\r\\n      </div>\\r\\n    </nav>\\r\\n\\r\\n   \\r\\n\\r\\n    <!-- the router outlet, where all matched components would ber viewed -->\\r\\n\\r\\n    <!--  <router-link v-bind:to=\\\"'/about'\\\">About</router-link> -->\\r\\n\\r\\n    <div id=\\\"render\\\">\\r\\n      <router-view></router-view>\\r\\n    </div>\\r\\n\\r\\n       \\r\\n\\r\\n  </div>\\r\\n</template>\\r\\n\\r\\n\\r\\n<script>\\r\\nimport register from './components/register.vue'\\r\\nimport axios from 'axios';\\r\\nexport default {\\r\\n  name: 'app',\\r\\n  components: {\\r\\n    register\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      username: null,\\r\\n\\r\\n\\r\\n\\r\\n    }\\r\\n  },\\r\\n  created: function() {\\r\\n\\r\\n    axios.get(\\\"/api/user/get/\\\")\\r\\n      .then((response) => {\\r\\n        this.username = response.data;\\r\\n      })\\r\\n      .catch(function(error) {\\r\\n\\r\\n      });\\r\\n  },\\r\\n\\r\\n}\\r\\n\\r\\n</script>\\r\\n\\r\\n<!-- styling for the component -->\\r\\n<style>\\r\\n#app {\\r\\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\\r\\n  -webkit-font-smoothing: antialiased;\\r\\n  -moz-osx-font-smoothing: grayscale;\\r\\n  text-align: center;\\r\\n  margin-top: 60px;\\r\\n}\\r\\n\\r\\nbody,\\r\\nh1,\\r\\nh2,\\r\\nh3,\\r\\nh4,\\r\\nh5,\\r\\nh6 {\\r\\n  font-family: \\\"Lato\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\r\\n  font-weight: 700;\\r\\n}\\r\\n\\r\\nbody {\\r\\n  background: url(/static/img/free-purple-triangles-vector.jpg);\\r\\n  background-attachment: fixed;\\r\\n  background-repeat: no-repeat;\\r\\n  background-size: cover;\\r\\n}\\r\\n\\r\\n.navbar {   \\r\\n  background-color:  #9C27B0;  \\r\\n  border-bottom-style: solid;\\r\\n  border-bottom-color: rgb(239, 241, 242);\\r\\n  border-bottom-width: 0;\\r\\n  box-shadow: none;\\r\\n}\\r\\n<!--.navbar:hover {\\r\\n  display: block;  \\r\\n  background-color: #9C27B0;  \\r\\n  transition-property: all;\\r\\n  transition-duration: 0.3s;\\r\\n  transition-timing-function: ease-out;\\r\\n  transition-delay: initial;\\r\\n}-->\\r\\n\\r\\n.home-back { \\r\\n  position: absolute;\\r\\n  width: 100%;\\r\\n  height: auto;  \\r\\n  box-shadow: 1px 1px 23px 0 rgba(0,0,0,.6);\\r\\n}\\r\\n\\r\\n.home-wrapper {\\r\\n  position: absolute;\\r\\n  left: 0px;\\r\\n  top: 0px;\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  z-index: -1;\\r\\n}\\r\\n\\r\\n\\r\\n.navbar .navbar-brand {\\r\\n  color: #ecf0f1;\\r\\n}\\r\\n\\r\\n.navbar .navbar-brand:hover,\\r\\n.navbar .navbar-brand:focus {\\r\\n  color: #a7dff4;\\r\\n}\\r\\n\\r\\n.navbar .navbar-text {\\r\\n  color: #ecf0f1;\\r\\n}\\r\\n\\r\\n.navbar .navbar-nav .nav-link {\\r\\n  color: #ecf0f1;\\r\\n  border-radius: .25rem;\\r\\n  margin: 0 0.25em;\\r\\n}\\r\\n\\r\\n.navbar .navbar-nav .nav-link:not(.disabled):hover,\\r\\n.navbar .navbar-nav .nav-link:not(.disabled):focus {\\r\\n  color: #a7dff4;\\r\\n}\\r\\n\\r\\n.navbar .navbar-nav .nav-item.active .nav-link,\\r\\n.navbar .navbar-nav .nav-item.active .nav-link:hover,\\r\\n.navbar .navbar-nav .nav-item.active .nav-link:focus,\\r\\n.navbar .navbar-nav .nav-item.show .nav-link,\\r\\n.navbar .navbar-nav .nav-item.show .nav-link:hover,\\r\\n.navbar .navbar-nav .nav-item.show .nav-link:focus {\\r\\n  color: #a7dff4;\\r\\n  background-color: #0091c5;\\r\\n}\\r\\n\\r\\n.navbar .navbar-toggle {\\r\\n  border-color: #0091c5;\\r\\n}\\r\\n\\r\\n.navbar .navbar-toggle:hover,\\r\\n.navbar .navbar-toggle:focus {\\r\\n  background-color: #0091c5;\\r\\n}\\r\\n\\r\\n.navbar .navbar-toggle .navbar-toggler-icon {\\r\\n  color: #ecf0f1;\\r\\n}\\r\\n\\r\\n.navbar .navbar-collapse,\\r\\n.navbar .navbar-form {\\r\\n  border-color: #ecf0f1;\\r\\n}\\r\\n\\r\\n.navbar .navbar-link {\\r\\n  color: #ecf0f1;\\r\\n}\\r\\n\\r\\n.navbar .navbar-link:hover {\\r\\n  color: #a7dff4;\\r\\n}\\r\\n\\r\\n@media (max-width: 575px) {\\r\\n  .navbar-expand-sm .navbar-nav .show .dropdown-menu .dropdown-item {\\r\\n    color: #ecf0f1;\\r\\n  }\\r\\n  .navbar-expand-sm .navbar-nav .show .dropdown-menu .dropdown-item:hover,\\r\\n  .navbar-expand-sm .navbar-nav .show .dropdown-menu .dropdown-item:focus {\\r\\n    color: #a7dff4;\\r\\n  }\\r\\n  .navbar-expand-sm .navbar-nav .show .dropdown-menu .dropdown-item.active {\\r\\n    color: #a7dff4;\\r\\n    background-color: #0091c5;\\r\\n  }\\r\\n}\\r\\n\\r\\n@media (max-width: 767px) {\\r\\n  .navbar-expand-md .navbar-nav .show .dropdown-menu .dropdown-item {\\r\\n    color: #ecf0f1;\\r\\n  }\\r\\n  .navbar-expand-md .navbar-nav .show .dropdown-menu .dropdown-item:hover,\\r\\n  .navbar-expand-md .navbar-nav .show .dropdown-menu .dropdown-item:focus {\\r\\n    color: #a7dff4;\\r\\n  }\\r\\n  .navbar-expand-md .navbar-nav .show .dropdown-menu .dropdown-item.active {\\r\\n    color: #a7dff4;\\r\\n    background-color: #0091c5;\\r\\n  }\\r\\n}\\r\\n\\r\\n@media (max-width: 991px) {\\r\\n  .navbar-expand-lg .navbar-nav .show .dropdown-menu .dropdown-item {\\r\\n    color: #ecf0f1;\\r\\n  }\\r\\n  .navbar-expand-lg .navbar-nav .show .dropdown-menu .dropdown-item:hover,\\r\\n  .navbar-expand-lg .navbar-nav .show .dropdown-menu .dropdown-item:focus {\\r\\n    color: #a7dff4;\\r\\n  }\\r\\n  .navbar-expand-lg .navbar-nav .show .dropdown-menu .dropdown-item.active {\\r\\n    color: #a7dff4;\\r\\n    background-color: #0091c5;\\r\\n  }\\r\\n}\\r\\n\\r\\n@media (max-width: 1199px) {\\r\\n  .navbar-expand-xl .navbar-nav .show .dropdown-menu .dropdown-item {\\r\\n    color: #ecf0f1;\\r\\n  }\\r\\n  .navbar-expand-xl .navbar-nav .show .dropdown-menu .dropdown-item:hover,\\r\\n  .navbar-expand-xl .navbar-nav .show .dropdown-menu .dropdown-item:focus {\\r\\n    color: #a7dff4;\\r\\n  }\\r\\n  .navbar-expand-xl .navbar-nav .show .dropdown-menu .dropdown-item.active {\\r\\n    color: #a7dff4;\\r\\n    background-color: #0091c5;\\r\\n  }\\r\\n}\\r\\n\\r\\n.navbar-expand .navbar-nav .show .dropdown-menu .dropdown-item {\\r\\n  color: #ecf0f1;\\r\\n}\\r\\n\\r\\n.navbar-expand .navbar-nav .show .dropdown-menu .dropdown-item:hover,\\r\\n.navbar-expand .navbar-nav .show .dropdown-menu .dropdown-item:focus {\\r\\n  color: #a7dff4;\\r\\n}\\r\\n\\r\\n.navbar-expand .navbar-nav .show .dropdown-menu .dropdown-item.active {\\r\\n  color: #a7dff4;\\r\\n  background-color: #0091c5;\\r\\n}\\r\\n\\r\\n#render {}\\r\\n\\r\\n\\r\\n/* .owo {\\r\\n\\r\\n  color: black;\\r\\n} */\\r\\n</style>\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///57\n");

/***/ }),
/* 58 */
/***/ (function(module, exports) {

eval("/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lzLWJ1ZmZlci9pbmRleC5qcz8xZjZhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI1OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pcy1idWZmZXIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///58\n");

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"profile\"\n  }, [_c('br'), _vm._v(\" \"), _c('div', {\n    attrs: {\n      \"id\": \"profileContent\"\n    }\n  }, [_c('b-row', {\n    attrs: {\n      \"id\": \"profileNav\"\n    }\n  }, [_c('b-col', {\n    attrs: {\n      \"cols\": \"6\"\n    }\n  }, [_c('div', {\n    attrs: {\n      \"id\": \"profileNavLeft\"\n    }\n  }, [_c('img', {\n    attrs: {\n      \"id\": \"profilePic\",\n      \"src\": \"/static/img/forsene.jpg\",\n      \"alt\": \"Pic\"\n    }\n  }), _vm._v(\" \"), _c('h2', {\n    staticClass: \"inline\"\n  }, [_vm._v(\"Logged in as \" + _vm._s(this.$route.params.name))])])]), _vm._v(\" \"), _c('b-col', {\n    attrs: {\n      \"cols\": \"6\"\n    }\n  }, [_c('div', {\n    attrs: {\n      \"id\": \"profileNavRight\"\n    }\n  }, [_c('iframe', {\n    staticClass: \"someItem\",\n    staticStyle: {\n      \"border\": \"none\",\n      \"overflow\": \"hidden\"\n    },\n    attrs: {\n      \"src\": \"https://embed.spotify.com/follow/1/?uri=spotify:user:testuser&size=detail&theme=light\",\n      \"scrolling\": \"no\",\n      \"frameborder\": \"0\",\n      \"allowtransparency\": \"true\"\n    }\n  }), _vm._v(\" \"), _c('iframe', {\n    staticClass: \"someItem\",\n    staticStyle: {\n      \"width\": \"64px\",\n      \"height\": \"64px\"\n    },\n    attrs: {\n      \"allowtransparency\": \"true\",\n      \"scrolling\": \"no\",\n      \"frameborder\": \"no\",\n      \"src\": \"https://w.soundcloud.com/icon/?url=http%3A%2F%2Fsoundcloud.com%2Fmetallica&color=orange_white&size=64\"\n    }\n  })])])], 1), _vm._v(\" \"), _c('b-row', [_c('b-col', {\n    attrs: {\n      \"cols\": \"1\"\n    }\n  }), _vm._v(\" \"), _c('b-col', {\n    attrs: {\n      \"cols\": \"5\"\n    }\n  }, [_c('div', {\n    staticClass: \"infoBlock\",\n    attrs: {\n      \"id\": \"userMusic\"\n    }\n  }, [_c('b-btn', {\n    directives: [{\n      name: \"b-toggle\",\n      rawName: \"v-b-toggle.collapseA\",\n      modifiers: {\n        \"collapseA\": true\n      }\n    }],\n    staticClass: \"collapseButton\",\n    attrs: {\n      \"variant\": \"primary\"\n    }\n  }, [_vm._v(\"Your music\")]), _vm._v(\" \"), _c('b-collapse', {\n    staticClass: \"mt-2\",\n    attrs: {\n      \"id\": \"collapseA\"\n    }\n  }, [_c('b-card', [_c('div', {\n    attrs: {\n      \"id\": \"userVideos\"\n    }\n  }, [_c('h2', [_vm._v(\" Your Media\")]), _vm._v(\" \"), _c('iframe', {\n    attrs: {\n      \"id\": \"userVideo\",\n      \"src\": \"https://www.youtube.com/embed/mj-v6zCnEaw\",\n      \"frameborder\": \"0\",\n      \"allowfullscreen\": \"\"\n    }\n  })]), _vm._v(\" \"), _c('div', {\n    attrs: {\n      \"id\": \"userSongs\"\n    }\n  }, [_c('iframe', {\n    staticClass: \"userSong\",\n    attrs: {\n      \"scrolling\": \"no\",\n      \"frameborder\": \"no\",\n      \"src\": \"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/246027770&color=%23ff5500&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true\"\n    }\n  }), _vm._v(\" \"), _c('iframe', {\n    staticClass: \"userSong\",\n    attrs: {\n      \"scrolling\": \"no\",\n      \"frameborder\": \"no\",\n      \"src\": \"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/users/56705121&color=%23ff5500&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true\"\n    }\n  })])])], 1)], 1)]), _vm._v(\" \"), _c('b-col', {\n    attrs: {\n      \"cols\": \"5\"\n    }\n  }, [_c('div', {\n    staticClass: \"infoBlock\",\n    attrs: {\n      \"id\": \"userAdded\"\n    }\n  }, [_c('b-btn', {\n    directives: [{\n      name: \"b-toggle\",\n      rawName: \"v-b-toggle.collapseB\",\n      modifiers: {\n        \"collapseB\": true\n      }\n    }],\n    staticClass: \"collapseButton\",\n    attrs: {\n      \"variant\": \"primary\"\n    }\n  }, [_vm._v(\"Mobile\")]), _vm._v(\" \"), _c('b-collapse', {\n    staticClass: \"mt-2\",\n    attrs: {\n      \"id\": \"collapseB\"\n    }\n  }, [_c('b-card', [_c('table', {\n    staticClass: \"table table-responsive table-striped table-hover\"\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"Song title\")]), _vm._v(\" \"), _c('th', [_vm._v(\"Artist\")])])]), _vm._v(\" \"), _c('tbody', _vm._l((_vm.mobileAdded), function(data) {\n    return _c('tr', {\n      key: data\n    }, [_c('td', [_vm._v(_vm._s(data.title))]), _vm._v(\" \"), _c('td', [_vm._v(_vm._s(data.artist))])])\n  }))])])], 1)], 1)]), _vm._v(\" \"), _c('b-col', {\n    attrs: {\n      \"cols\": \"1\"\n    }\n  })], 1), _vm._v(\" \"), _c('b-row', [_c('b-col', {\n    attrs: {\n      \"cols\": \"1\"\n    }\n  }), _vm._v(\" \"), _c('b-col', {\n    attrs: {\n      \"cols\": \"5\"\n    }\n  }, [_c('div', {\n    staticClass: \"infoBlock\",\n    attrs: {\n      \"id\": \"review\"\n    }\n  }, [_c('h2', [_vm._v(\"Your reviews\")]), _vm._v(\" \"), _c('ul', _vm._l((_vm.reviewResult), function(data) {\n    return _c('li', {\n      key: data\n    }, [_c('div', {\n      staticClass: \"row\"\n    }, [_c('div', {\n      staticClass: \"col-sm-12\"\n    }, [_c('hr'), _vm._v(\" \"), _c('div', {\n      staticClass: \"review-block\"\n    }, [_c('div', {\n      staticClass: \"row\"\n    }, [_c('div', {\n      staticClass: \"col-sm-3\"\n    }, [_c('img', {\n      staticClass: \"img-rounded\",\n      attrs: {\n        \"src\": \"/static/img/forsene.jpg\"\n      }\n    }), _vm._v(\" \"), _c('div', {\n      staticClass: \"review-block-name\"\n    }, [_c('router-link', {\n      attrs: {\n        \"to\": {\n          name: 'profile',\n          params: {\n            name: data.username\n          }\n        }\n      }\n    }, [_vm._v(\" \" + _vm._s(data.username) + \" \")])], 1), _vm._v(\" \"), _c('div', {\n      staticClass: \"review-block-date\"\n    }, [_vm._v(_vm._s(data.created_at))])]), _vm._v(\" \"), _c('div', {\n      staticClass: \"col-sm-9\"\n    }, [_c('div', {\n      staticClass: \"review-block-rate\"\n    }, [_c('button', {\n      staticClass: \"btn btn-warning btn-xs\",\n      attrs: {\n        \"type\": \"button\",\n        \"aria-label\": \"Left Align\"\n      }\n    }, [_c('span', {\n      staticClass: \"glyphicon glyphicon-star\",\n      attrs: {\n        \"aria-hidden\": \"true\"\n      }\n    })]), _vm._v(\" \"), _c('button', {\n      staticClass: \"btn btn-warning btn-xs\",\n      attrs: {\n        \"type\": \"button\",\n        \"aria-label\": \"Left Align\"\n      }\n    }, [_c('span', {\n      staticClass: \"glyphicon glyphicon-star\",\n      attrs: {\n        \"aria-hidden\": \"true\"\n      }\n    })]), _vm._v(\" \"), _c('button', {\n      staticClass: \"btn btn-warning btn-xs\",\n      attrs: {\n        \"type\": \"button\",\n        \"aria-label\": \"Left Align\"\n      }\n    }, [_c('span', {\n      staticClass: \"glyphicon glyphicon-star\",\n      attrs: {\n        \"aria-hidden\": \"true\"\n      }\n    })]), _vm._v(\" \"), _c('button', {\n      staticClass: \"btn btn-default btn-grey btn-xs\",\n      attrs: {\n        \"type\": \"button\",\n        \"aria-label\": \"Left Align\"\n      }\n    }, [_c('span', {\n      staticClass: \"glyphicon glyphicon-star\",\n      attrs: {\n        \"aria-hidden\": \"true\"\n      }\n    })]), _vm._v(\" \"), _c('button', {\n      staticClass: \"btn btn-default btn-grey btn-xs\",\n      attrs: {\n        \"type\": \"button\",\n        \"aria-label\": \"Left Align\"\n      }\n    }, [_c('span', {\n      staticClass: \"glyphicon glyphicon-star\",\n      attrs: {\n        \"aria-hidden\": \"true\"\n      }\n    })])]), _vm._v(\" \"), _c('div', {\n      staticClass: \"review-block-title\"\n    }, [_vm._v(_vm._s(data.title))]), _vm._v(\" \"), _c('div', {\n      staticClass: \"review-block-description\"\n    }, [_vm._v(_vm._s(data.text))])])]), _vm._v(\" \"), _c('hr')])])])])\n  }))])]), _vm._v(\" \"), _c('b-col', {\n    attrs: {\n      \"cols\": \"5\"\n    }\n  }, [_c('div', {\n    staticClass: \"infoBlock\",\n    attrs: {\n      \"id\": \"albumList\"\n    }\n  }, [_c('h2', [_vm._v(\"Your albums\")]), _vm._v(\" \"), _c('ul', _vm._l((_vm.albumResult), function(data) {\n    return _c('li', {\n      key: data,\n      staticClass: \"inline\"\n    }, [_c('router-link', {\n      attrs: {\n        \"to\": {\n          name: 'album',\n          params: {\n            title: data.title,\n            id: data.mbid\n          }\n        }\n      }\n    }, [_vm._v(\" \" + _vm._s(data.title) + \" \")]), _vm._v(\" \"), _c('div', {\n      staticClass: \"albumPic\"\n    }, [_c('img', {\n      staticClass: \"albumPicture\",\n      attrs: {\n        \"src\": data.cover,\n        \"alt\": \"Album cover not found\"\n      }\n    })])], 1)\n  }))])]), _vm._v(\" \"), _c('b-col', {\n    attrs: {\n      \"cols\": \"1\"\n    }\n  })], 1)], 1), _vm._v(\" \"), _c('br')])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-113ac87a\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///59\n");

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"login\"\n  }, [_vm._m(0), _vm._v(\" \"), _c('br'), _vm._v(\" \"), _c('b-btn', {\n    directives: [{\n      name: \"b-modal\",\n      rawName: \"v-b-modal\",\n      value: ('regform'),\n      expression: \"'regform'\"\n    }],\n    staticClass: \"shadow\"\n  }, [_vm._v(\"Register\")]), _vm._v(\" \"), _c('register')], 1)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"center_div\"\n  }, [_c('form', {\n    attrs: {\n      \"action\": \"/login\",\n      \"method\": \"post\"\n    }\n  }, [_c('br'), _vm._v(\" \"), _c('div', {\n    staticClass: \"form-group\"\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"user\"\n    }\n  }, [_vm._v(\"Username\")]), _vm._v(\" \"), _c('input', {\n    staticClass: \"form-control\",\n    attrs: {\n      \"id\": \"user\",\n      \"type\": \"text\",\n      \"name\": \"username\"\n    }\n  })]), _vm._v(\" \"), _c('div', {\n    staticClass: \"form-group\"\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"password\"\n    }\n  }, [_vm._v(\"Password\")]), _vm._v(\" \"), _c('input', {\n    staticClass: \"form-control\",\n    attrs: {\n      \"id\": \"password\",\n      \"type\": \"password\",\n      \"name\": \"password\"\n    }\n  })]), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn btn-warning btn-lg shadow\",\n    attrs: {\n      \"id\": \"searchBut\",\n      \"type\": \"submit\"\n    }\n  }, [_vm._v(\"Login\")])])])\n}]}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-225c3a03\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9sb2dpbi52dWU/Mzc4MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQW1CLGFBQWEsMEJBQTBCO0FBQzFFO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSCxDQUFDLCtCQUErQixhQUFhLDBCQUEwQjtBQUN2RTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI2MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcImxvZ2luXCJcbiAgfSwgW192bS5fbSgwKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2JyJyksIF92bS5fdihcIiBcIiksIF9jKCdiLWJ0bicsIHtcbiAgICBkaXJlY3RpdmVzOiBbe1xuICAgICAgbmFtZTogXCJiLW1vZGFsXCIsXG4gICAgICByYXdOYW1lOiBcInYtYi1tb2RhbFwiLFxuICAgICAgdmFsdWU6ICgncmVnZm9ybScpLFxuICAgICAgZXhwcmVzc2lvbjogXCIncmVnZm9ybSdcIlxuICAgIH1dLFxuICAgIHN0YXRpY0NsYXNzOiBcInNoYWRvd1wiXG4gIH0sIFtfdm0uX3YoXCJSZWdpc3RlclwiKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygncmVnaXN0ZXInKV0sIDEpXG59LHN0YXRpY1JlbmRlckZuczogW2Z1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJjZW50ZXJfZGl2XCJcbiAgfSwgW19jKCdmb3JtJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImFjdGlvblwiOiBcIi9sb2dpblwiLFxuICAgICAgXCJtZXRob2RcIjogXCJwb3N0XCJcbiAgICB9XG4gIH0sIFtfYygnYnInKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJmb3JtLWdyb3VwXCJcbiAgfSwgW19jKCdsYWJlbCcsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJmb3JcIjogXCJ1c2VyXCJcbiAgICB9XG4gIH0sIFtfdm0uX3YoXCJVc2VybmFtZVwiKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygnaW5wdXQnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiZm9ybS1jb250cm9sXCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaWRcIjogXCJ1c2VyXCIsXG4gICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICBcIm5hbWVcIjogXCJ1c2VybmFtZVwiXG4gICAgfVxuICB9KV0pLCBfdm0uX3YoXCIgXCIpLCBfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tZ3JvdXBcIlxuICB9LCBbX2MoJ2xhYmVsJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImZvclwiOiBcInBhc3N3b3JkXCJcbiAgICB9XG4gIH0sIFtfdm0uX3YoXCJQYXNzd29yZFwiKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygnaW5wdXQnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiZm9ybS1jb250cm9sXCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaWRcIjogXCJwYXNzd29yZFwiLFxuICAgICAgXCJ0eXBlXCI6IFwicGFzc3dvcmRcIixcbiAgICAgIFwibmFtZVwiOiBcInBhc3N3b3JkXCJcbiAgICB9XG4gIH0pXSksIF92bS5fdihcIiBcIiksIF9jKCdidXR0b24nLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sZyBzaGFkb3dcIixcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiBcInNlYXJjaEJ1dFwiLFxuICAgICAgXCJ0eXBlXCI6IFwic3VibWl0XCJcbiAgICB9XG4gIH0sIFtfdm0uX3YoXCJMb2dpblwiKV0pXSldKVxufV19XG5tb2R1bGUuZXhwb3J0cy5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpLnJlcmVuZGVyKFwiZGF0YS12LTIyNWMzYTAzXCIsIG1vZHVsZS5leHBvcnRzKVxuICB9XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtMjI1YzNhMDNcIixcImhhc1Njb3BlZFwiOnRydWV9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9sb2dpbi52dWVcbi8vIG1vZHVsZSBpZCA9IDYwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///60\n");

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": \"tableBg\"\n    }\n  }, [_c('h1', [_vm._v(\"Most popular albums\")]), _vm._v(\" \"), _c('table', {\n    staticClass: \"table table-responsive table-striped table-hover\"\n  }, [_vm._m(0), _vm._v(\" \"), _c('tbody', _vm._l((_vm.albumData), function(data) {\n    return _c('tr', {\n      key: data\n    }, [_c('td', [_vm._v(_vm._s(data.added))]), _vm._v(\" \"), _c('td', [_vm._v(_vm._s(data.title))]), _vm._v(\" \"), _c('td', [_vm._v(_vm._s(data.artist))])])\n  }))])])\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('thead', [_c('tr', [_c('th', [_vm._v(\"Times added\")]), _vm._v(\" \"), _c('th', [_vm._v(\"Album title\")]), _vm._v(\" \"), _c('th', [_vm._v(\"Artist\")])])])\n}]}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-27d1b20e\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zdGF0aXN0aWNzLnZ1ZT8wYWQyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQywrQkFBK0IsYUFBYSwwQkFBMEI7QUFDdkU7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiBcInRhYmxlQmdcIlxuICAgIH1cbiAgfSwgW19jKCdoMScsIFtfdm0uX3YoXCJNb3N0IHBvcHVsYXIgYWxidW1zXCIpXSksIF92bS5fdihcIiBcIiksIF9jKCd0YWJsZScsIHtcbiAgICBzdGF0aWNDbGFzczogXCJ0YWJsZSB0YWJsZS1yZXNwb25zaXZlIHRhYmxlLXN0cmlwZWQgdGFibGUtaG92ZXJcIlxuICB9LCBbX3ZtLl9tKDApLCBfdm0uX3YoXCIgXCIpLCBfYygndGJvZHknLCBfdm0uX2woKF92bS5hbGJ1bURhdGEpLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIF9jKCd0cicsIHtcbiAgICAgIGtleTogZGF0YVxuICAgIH0sIFtfYygndGQnLCBbX3ZtLl92KF92bS5fcyhkYXRhLmFkZGVkKSldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3RkJywgW192bS5fdihfdm0uX3MoZGF0YS50aXRsZSkpXSksIF92bS5fdihcIiBcIiksIF9jKCd0ZCcsIFtfdm0uX3YoX3ZtLl9zKGRhdGEuYXJ0aXN0KSldKV0pXG4gIH0pKV0pXSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygndGhlYWQnLCBbX2MoJ3RyJywgW19jKCd0aCcsIFtfdm0uX3YoXCJUaW1lcyBhZGRlZFwiKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygndGgnLCBbX3ZtLl92KFwiQWxidW0gdGl0bGVcIildKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3RoJywgW192bS5fdihcIkFydGlzdFwiKV0pXSldKVxufV19XG5tb2R1bGUuZXhwb3J0cy5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpLnJlcmVuZGVyKFwiZGF0YS12LTI3ZDFiMjBlXCIsIG1vZHVsZS5leHBvcnRzKVxuICB9XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtMjdkMWIyMGVcIixcImhhc1Njb3BlZFwiOnRydWV9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9zdGF0aXN0aWNzLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///61\n");

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"register\"\n  }, [_c('div', [_c('b-modal', {\n    ref: \"regform\",\n    attrs: {\n      \"id\": \"regform\",\n      \"title\": \"Submit your account information\"\n    },\n    on: {\n      \"ok\": _vm.handleOk,\n      \"shown\": _vm.clearData\n    }\n  }, [_c('form', {\n    on: {\n      \"submit\": function($event) {\n        $event.stopPropagation();\n        $event.preventDefault();\n        _vm.handleSubmit($event)\n      }\n    }\n  }, [_c('b-form-input', {\n    attrs: {\n      \"type\": \"text\",\n      \"value\": \"\",\n      \"placeholder\": \"Enter your name\"\n    },\n    model: {\n      value: (_vm.username),\n      callback: function($$v) {\n        _vm.username = $$v\n      },\n      expression: \"username\"\n    }\n  }), _vm._v(\" \"), _c('b-form-input', {\n    attrs: {\n      \"type\": \"password\",\n      \"placeholder\": \"Enter your password\"\n    },\n    model: {\n      value: (_vm.password),\n      callback: function($$v) {\n        _vm.password = $$v\n      },\n      expression: \"password\"\n    }\n  }), _vm._v(\" \"), _c('b-form-input', {\n    attrs: {\n      \"type\": \"password\",\n      \"placeholder\": \"Re-enter your password\"\n    },\n    model: {\n      value: (_vm.rePass),\n      callback: function($$v) {\n        _vm.rePass = $$v\n      },\n      expression: \"rePass\"\n    }\n  })], 1)])], 1)])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-48d3fbf9\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9yZWdpc3Rlci52dWU/OTYwNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQW1CLGFBQWEsMEJBQTBCO0FBQzFFO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJyZWdpc3RlclwiXG4gIH0sIFtfYygnZGl2JywgW19jKCdiLW1vZGFsJywge1xuICAgIHJlZjogXCJyZWdmb3JtXCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaWRcIjogXCJyZWdmb3JtXCIsXG4gICAgICBcInRpdGxlXCI6IFwiU3VibWl0IHlvdXIgYWNjb3VudCBpbmZvcm1hdGlvblwiXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJva1wiOiBfdm0uaGFuZGxlT2ssXG4gICAgICBcInNob3duXCI6IF92bS5jbGVhckRhdGFcbiAgICB9XG4gIH0sIFtfYygnZm9ybScsIHtcbiAgICBvbjoge1xuICAgICAgXCJzdWJtaXRcIjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIF92bS5oYW5kbGVTdWJtaXQoJGV2ZW50KVxuICAgICAgfVxuICAgIH1cbiAgfSwgW19jKCdiLWZvcm0taW5wdXQnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgIFwidmFsdWVcIjogXCJcIixcbiAgICAgIFwicGxhY2Vob2xkZXJcIjogXCJFbnRlciB5b3VyIG5hbWVcIlxuICAgIH0sXG4gICAgbW9kZWw6IHtcbiAgICAgIHZhbHVlOiAoX3ZtLnVzZXJuYW1lKSxcbiAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHtcbiAgICAgICAgX3ZtLnVzZXJuYW1lID0gJCR2XG4gICAgICB9LFxuICAgICAgZXhwcmVzc2lvbjogXCJ1c2VybmFtZVwiXG4gICAgfVxuICB9KSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2ItZm9ybS1pbnB1dCcsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJ0eXBlXCI6IFwicGFzc3dvcmRcIixcbiAgICAgIFwicGxhY2Vob2xkZXJcIjogXCJFbnRlciB5b3VyIHBhc3N3b3JkXCJcbiAgICB9LFxuICAgIG1vZGVsOiB7XG4gICAgICB2YWx1ZTogKF92bS5wYXNzd29yZCksXG4gICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7XG4gICAgICAgIF92bS5wYXNzd29yZCA9ICQkdlxuICAgICAgfSxcbiAgICAgIGV4cHJlc3Npb246IFwicGFzc3dvcmRcIlxuICAgIH1cbiAgfSksIF92bS5fdihcIiBcIiksIF9jKCdiLWZvcm0taW5wdXQnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwidHlwZVwiOiBcInBhc3N3b3JkXCIsXG4gICAgICBcInBsYWNlaG9sZGVyXCI6IFwiUmUtZW50ZXIgeW91ciBwYXNzd29yZFwiXG4gICAgfSxcbiAgICBtb2RlbDoge1xuICAgICAgdmFsdWU6IChfdm0ucmVQYXNzKSxcbiAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHtcbiAgICAgICAgX3ZtLnJlUGFzcyA9ICQkdlxuICAgICAgfSxcbiAgICAgIGV4cHJlc3Npb246IFwicmVQYXNzXCJcbiAgICB9XG4gIH0pXSwgMSldKV0sIDEpXSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbXX1cbm1vZHVsZS5leHBvcnRzLnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikucmVyZW5kZXIoXCJkYXRhLXYtNDhkM2ZiZjlcIiwgbW9kdWxlLmV4cG9ydHMpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi00OGQzZmJmOVwiLFwiaGFzU2NvcGVkXCI6dHJ1ZX0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL3JlZ2lzdGVyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///62\n");

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('b-container', [_c('b-row', [_c('b-col'), _vm._v(\" \"), _c('b-col', {\n    attrs: {\n      \"cols\": \"8\"\n    }\n  }, [_c('div', [_c('br'), _vm._v(\" \"), _c('H1', [_vm._v(\"Search for an artist\")]), _vm._v(\" \"), _c('form', {\n    attrs: {\n      \"id\": \"searchBar\"\n    },\n    on: {\n      \"submit\": function($event) {\n        $event.stopPropagation();\n        $event.preventDefault();\n        _vm.artistSearch($event)\n      }\n    }\n  }, [_c('b-form-input', {\n    attrs: {\n      \"id\": \"inputField\",\n      \"type\": \"text\",\n      \"placeholder\": \"For example Metallica...\"\n    },\n    model: {\n      value: (_vm.searchValue),\n      callback: function($$v) {\n        _vm.searchValue = $$v\n      },\n      expression: \"searchValue\"\n    }\n  }), _vm._v(\" \"), _c('p'), _vm._v(\" \"), _c('b-button', {\n    staticClass: \"search-but shadow\",\n    attrs: {\n      \"type\": \"submit\"\n    }\n  }, [_vm._v(\"Search\")])], 1)], 1)]), _vm._v(\" \"), _c('b-col')], 1), _vm._v(\" \"), _c('p'), _vm._v(\" \"), _c('b-row', {\n    attrs: {\n      \"id\": \"searchResults\"\n    }\n  }, [_c('b-col'), _vm._v(\" \"), _c('b-col', {\n    attrs: {\n      \"cols\": \"10\"\n    }\n  }, [(_vm.seen) ? _c('div', {\n    attrs: {\n      \"id\": \"searchBg\"\n    }\n  }, [_c('ol', _vm._l((_vm.resultValue), function(data) {\n    return _c('li', {\n      key: data\n    }, [_c('router-link', {\n      attrs: {\n        \"id\": \"resultPrint\",\n        \"to\": {\n          name: 'artist',\n          params: {\n            name: data.name,\n            id: data.musicbrainz_id,\n            spotify: data.spotify_id\n          }\n        }\n      }\n    }, [_vm._v(\" \" + _vm._s(data.name) + \" \")])], 1)\n  }))]) : _vm._e()]), _vm._v(\" \"), _c('b-col')], 1)], 1)\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-699d1ffe\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zZWFyY2gudnVlPzU0ZDgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFtQixhQUFhLDBCQUEwQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ2ItY29udGFpbmVyJywgW19jKCdiLXJvdycsIFtfYygnYi1jb2wnKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2ItY29sJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImNvbHNcIjogXCI4XCJcbiAgICB9XG4gIH0sIFtfYygnZGl2JywgW19jKCdicicpLCBfdm0uX3YoXCIgXCIpLCBfYygnSDEnLCBbX3ZtLl92KFwiU2VhcmNoIGZvciBhbiBhcnRpc3RcIildKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2Zvcm0nLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaWRcIjogXCJzZWFyY2hCYXJcIlxuICAgIH0sXG4gICAgb246IHtcbiAgICAgIFwic3VibWl0XCI6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfdm0uYXJ0aXN0U2VhcmNoKCRldmVudClcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtfYygnYi1mb3JtLWlucHV0Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwiaW5wdXRGaWVsZFwiLFxuICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgXCJwbGFjZWhvbGRlclwiOiBcIkZvciBleGFtcGxlIE1ldGFsbGljYS4uLlwiXG4gICAgfSxcbiAgICBtb2RlbDoge1xuICAgICAgdmFsdWU6IChfdm0uc2VhcmNoVmFsdWUpLFxuICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikge1xuICAgICAgICBfdm0uc2VhcmNoVmFsdWUgPSAkJHZcbiAgICAgIH0sXG4gICAgICBleHByZXNzaW9uOiBcInNlYXJjaFZhbHVlXCJcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCIgXCIpLCBfYygncCcpLCBfdm0uX3YoXCIgXCIpLCBfYygnYi1idXR0b24nLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwic2VhcmNoLWJ1dCBzaGFkb3dcIixcbiAgICBhdHRyczoge1xuICAgICAgXCJ0eXBlXCI6IFwic3VibWl0XCJcbiAgICB9XG4gIH0sIFtfdm0uX3YoXCJTZWFyY2hcIildKV0sIDEpXSwgMSldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2ItY29sJyldLCAxKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3AnKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2Itcm93Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwic2VhcmNoUmVzdWx0c1wiXG4gICAgfVxuICB9LCBbX2MoJ2ItY29sJyksIF92bS5fdihcIiBcIiksIF9jKCdiLWNvbCcsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJjb2xzXCI6IFwiMTBcIlxuICAgIH1cbiAgfSwgWyhfdm0uc2VlbikgPyBfYygnZGl2Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwic2VhcmNoQmdcIlxuICAgIH1cbiAgfSwgW19jKCdvbCcsIF92bS5fbCgoX3ZtLnJlc3VsdFZhbHVlKSwgZnVuY3Rpb24oZGF0YSkge1xuICAgIHJldHVybiBfYygnbGknLCB7XG4gICAgICBrZXk6IGRhdGFcbiAgICB9LCBbX2MoJ3JvdXRlci1saW5rJywge1xuICAgICAgYXR0cnM6IHtcbiAgICAgICAgXCJpZFwiOiBcInJlc3VsdFByaW50XCIsXG4gICAgICAgIFwidG9cIjoge1xuICAgICAgICAgIG5hbWU6ICdhcnRpc3QnLFxuICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgbmFtZTogZGF0YS5uYW1lLFxuICAgICAgICAgICAgaWQ6IGRhdGEubXVzaWNicmFpbnpfaWQsXG4gICAgICAgICAgICBzcG90aWZ5OiBkYXRhLnNwb3RpZnlfaWRcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBbX3ZtLl92KFwiIFwiICsgX3ZtLl9zKGRhdGEubmFtZSkgKyBcIiBcIildKV0sIDEpXG4gIH0pKV0pIDogX3ZtLl9lKCldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2ItY29sJyldLCAxKV0sIDEpXG59LHN0YXRpY1JlbmRlckZuczogW119XG5tb2R1bGUuZXhwb3J0cy5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpLnJlcmVuZGVyKFwiZGF0YS12LTY5OWQxZmZlXCIsIG1vZHVsZS5leHBvcnRzKVxuICB9XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtNjk5ZDFmZmVcIixcImhhc1Njb3BlZFwiOmZhbHNlfSEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvc2VhcmNoLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///63\n");

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"artist\"\n  }, [_c('div', {\n    staticClass: \"artistBody\"\n  }, [_c('div', {\n    staticClass: \"artistInfo\"\n  }, [_c('div', {\n    attrs: {\n      \"id\": \"artistTitle\"\n    }\n  }, [_c('h1', [_vm._v(_vm._s(_vm.$route.params.name))]), _vm._v(\" \"), _c('br')]), _vm._v(\" \"), _c('div', {\n    attrs: {\n      \"id\": \"artistDetails\"\n    }\n  }, [(_vm.$route.params.name == 'Metallica') ? _c('ul', [_c('li', [_vm._v(\" Year formed: 1981\")]), _vm._v(\" \"), _c('li', [_vm._v(\" Year to: Present\")]), _vm._v(\" \"), _c('br'), _vm._v(\" \"), _c('li', [_vm._v(\" James Hetfield\")]), _vm._v(\" \"), _c('li', [_vm._v(\" Lars Ulrich\")]), _vm._v(\" \"), _c('li', [_vm._v(\" Kirk Hammett \")]), _vm._v(\" \"), _c('li', [_vm._v(\" Robert Trujillo\")]), _vm._v(\" \"), _c('br')]) : _vm._e(), _vm._v(\" \"), _c('div', {\n    attrs: {\n      \"id\": \"infoList\"\n    }\n  }, _vm._l((_vm.infoResult), function(data) {\n    return _c('div', {\n      key: data,\n      staticClass: \"infoPic\"\n    }, [_c('a', {\n      attrs: {\n        \"href\": data.url,\n        \"target\": \"_blank\"\n      }\n    }, [_c('img', {\n      staticClass: \"albumPicture\",\n      attrs: {\n        \"src\": data.picture,\n        \"alt\": \"img\"\n      }\n    })])])\n  }))]), _vm._v(\" \"), _c('div', {\n    attrs: {\n      \"id\": \"spotifyCont\"\n    }\n  }, [_c('iframe', {\n    attrs: {\n      \"id\": \"spotifyPlayer\",\n      \"src\": 'https://open.spotify.com/embed?uri=spotify%3Aalbum%3A' + this.playerId + '&theme=white',\n      \"frameborder\": \"0\",\n      \"allowtransparency\": \"true\"\n    }\n  })])]), _vm._v(\" \"), _c('div', {\n    staticClass: \"artistContent\"\n  }, [_c('div', {\n    attrs: {\n      \"id\": \"artistDesc\"\n    }\n  }, [_c('h1', [_vm._v(\" Description\" + _vm._s(this.artistDescription))]), _vm._v(\" \"), _c('iframe', {\n    staticStyle: {\n      \"border\": \"none\",\n      \"overflow\": \"hidden\"\n    },\n    attrs: {\n      \"id\": \"artistFollow\",\n      \"src\": 'https://open.spotify.com/follow/1/?uri=spotify:artist:' + _vm.$route.params.spotify + '&size=detail&theme=light',\n      \"scrolling\": \"no\",\n      \"frameborder\": \"0\",\n      \"allowtransparency\": \"true\"\n    }\n  }), _vm._v(\" \"), _c('div', {\n    attrs: {\n      \"id\": \"rating-block\"\n    }\n  }, [_c('h4', [_vm._v(\"Average user rating\")]), _vm._v(\" \"), _c('h2', {\n    staticClass: \"bold padding-bottom-7\"\n  }, [_vm._v(_vm._s(this.average) + \"\\n            \"), _c('small', [_vm._v(\"/ 5\")])]), _vm._v(\" \"), _vm._m(0), _vm._v(\" \"), _vm._m(1), _vm._v(\" \"), _vm._m(2), _vm._v(\" \"), _vm._m(3), _vm._v(\" \"), _vm._m(4)])]), _vm._v(\" \"), _c('div', {\n    attrs: {\n      \"id\": \"albumList\"\n    }\n  }, [_c('ul', _vm._l((_vm.albumResult), function(data) {\n    return _c('li', {\n      key: data,\n      staticClass: \"inline\"\n    }, [_c('div', {\n      staticClass: \"albumTab\"\n    }, [_c('router-link', {\n      attrs: {\n        \"to\": {\n          name: 'album',\n          params: {\n            title: data.title,\n            id: data.album_musicbrainz_id,\n            artist: _vm.$route.params.name\n          }\n        }\n      }\n    }, [_vm._v(\" \" + _vm._s(data.title) + \" \")]), _vm._v(\" \"), _c('div', {\n      staticClass: \"albumPic\"\n    }, [_c('img', {\n      staticClass: \"albumPicture\",\n      attrs: {\n        \"src\": 'https://coverartarchive.org/release-group/' + data.album_musicbrainz_id + '/front.jpg',\n        \"alt\": \"Album cover not found\"\n      }\n    })]), _vm._v(\" \"), _c('ul', [(data.release_date == undefined) ? _c('li', {\n      staticClass: \"inline\"\n    }, [_vm._v(\" Date: Not found \")]) : _c('li', {\n      staticClass: \"inline\"\n    }, [_vm._v(\" Date: \" + _vm._s(data.release_date) + \" \")]), _vm._v(\" \"), _c('li', {\n      staticClass: \"inline\"\n    }, [_c('button', {\n      directives: [{\n        name: \"b-tooltip\",\n        rawName: \"v-b-tooltip.hover.auto\",\n        modifiers: {\n          \"hover\": true,\n          \"auto\": true\n        }\n      }],\n      attrs: {\n        \"title\": \"Add this album to your profile\",\n        \"type\": \"submit\",\n        \"variant\": \"primary\"\n      },\n      on: {\n        \"click\": function($event) {\n          _vm.add(data.artist_name, data.title, data.album_musicbrainz_id)\n        }\n      }\n    }, [_vm._v(\"Add\")])]), _vm._v(\" \"), _c('li', {\n      staticClass: \"inline\"\n    }, [_c('button', {\n      directives: [{\n        name: \"b-tooltip\",\n        rawName: \"v-b-tooltip.hover.auto\",\n        modifiers: {\n          \"hover\": true,\n          \"auto\": true\n        }\n      }],\n      attrs: {\n        \"title\": \"Listen to this album\",\n        \"type\": \"submit\",\n        \"variant\": \"primary\"\n      },\n      on: {\n        \"click\": function($event) {\n          _vm.updateSpotify(data.title)\n        }\n      }\n    }, [_vm._v(\"Listen\")])])])], 1)])\n  }))]), _vm._v(\" \"), _c('div', {\n    attrs: {\n      \"id\": \"recommendations\"\n    }\n  }, [_c('b-carousel', {\n    staticStyle: {\n      \"text-shadow\": \"1px 1px 2px #333\"\n    },\n    attrs: {\n      \"controls\": \"\",\n      \"indicators\": \"\",\n      \"img-width\": \"100%\",\n      \"img-height\": \"25em\",\n      \"background\": \"whitesmoke\",\n      \"interval\": 4000\n    },\n    model: {\n      value: (_vm.slide),\n      callback: function($$v) {\n        _vm.slide = $$v\n      },\n      expression: \"slide\"\n    }\n  }, _vm._l((_vm.recResult), function(data) {\n    return _c('b-carousel-slide', {\n      key: data,\n      attrs: {\n        \"id\": \"recSlide\"\n      }\n    }, [_c('h1', {\n      attrs: {\n        \"id\": \"recText\"\n      }\n    }, [_vm._v(\" \" + _vm._s(data.name) + \" \")]), _vm._v(\" \"), _c('iframe', {\n      attrs: {\n        \"id\": \"recFollow\",\n        \"src\": 'https://open.spotify.com/follow/1/?uri=spotify:artist:' + data.id + '&size=detail&theme=light',\n        \"frameborder\": \"0\",\n        \"allowtransparency\": \"false\"\n      }\n    }), _vm._v(\" \"), _c('b-dropdown', {\n      attrs: {\n        \"id\": \"recGenres\",\n        \"dropup\": \"\",\n        \"text\": \"Genres\",\n        \"variant\": \"primary\"\n      }\n    }, [_c('b-dropdown-header', [_vm._v(\" \" + _vm._s(data.genres[0]) + \" \")]), _vm._v(\" \"), _c('b-dropdown-header', [_vm._v(\" \" + _vm._s(data.genres[1]) + \" \")]), _vm._v(\" \"), _c('b-dropdown-header', [_vm._v(\" \" + _vm._s(data.genres[2]) + \" \")]), _vm._v(\" \"), _c('b-dropdown-header', [_vm._v(\" \" + _vm._s(data.genres[3]) + \" \")]), _vm._v(\" \"), _c('b-dropdown-header', [_vm._v(\" \" + _vm._s(data.genres[4]) + \" \")]), _vm._v(\" \"), _c('b-dropdown-header', [_vm._v(\" \" + _vm._s(data.genres[5]) + \" \")]), _vm._v(\" \"), _c('b-dropdown-header', [_vm._v(\" \" + _vm._s(data.genres[6]) + \" \")]), _vm._v(\" \"), _c('b-dropdown-header', [_vm._v(\" \" + _vm._s(data.genres[7]) + \" \")]), _vm._v(\" \"), _c('b-dropdown-header', [_vm._v(\" \" + _vm._s(data.genres[8]) + \" \")])], 1), _vm._v(\" \"), _c('img', {\n      attrs: {\n        \"slot\": \"img\",\n        \"id\": \"recImage\",\n        \"src\": data.images[0].url,\n        \"alt\": \"N/A\"\n      },\n      slot: \"img\"\n    })], 1)\n  }))], 1), _vm._v(\" \"), _c('div', {\n    attrs: {\n      \"id\": \"artistReviews\"\n    }\n  }, [_c('div', {\n    attrs: {\n      \"id\": \"addReview\"\n    }\n  }, [(this.username != null) ? _c('button', {\n    staticClass: \"btn btn-info\",\n    attrs: {\n      \"id\": \"reviewButton\",\n      \"type\": \"button\",\n      \"data-toggle\": \"collapse\",\n      \"data-target\": \"#newReview\"\n    }\n  }, [_vm._v(\"Write a review\")]) : _vm._e(), _vm._v(\" \"), _c('br'), _vm._v(\" \"), _c('div', {\n    staticClass: \"collapse\",\n    attrs: {\n      \"id\": \"newReview\"\n    }\n  }, [_c('form', {\n    attrs: {\n      \"action\": \"/api/reviews/create\",\n      \"method\": \"post\"\n    }\n  }, [_vm._m(5), _vm._v(\" \"), _vm._m(6), _vm._v(\" \"), _vm._m(7), _vm._v(\" \"), _c('div', {\n    staticClass: \"form-group\"\n  }, [_c('input', {\n    staticClass: \"form-control-plaintext\",\n    attrs: {\n      \"type\": \"hidden\",\n      \"name\": \"artistId\",\n      \"readonly\": \"\",\n      \"id\": \"artistId\"\n    },\n    domProps: {\n      \"value\": this.id\n    }\n  })]), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn btn-warning btn-lg\",\n    attrs: {\n      \"type\": \"submit\"\n    }\n  }, [_vm._v(\"Save\")])])])]), _vm._v(\" \"), _c('div', {\n    attrs: {\n      \"id\": \"topSongs\"\n    }\n  }, [_c('table', {\n    staticClass: \"table table-responsive\"\n  }, [_vm._m(8), _vm._v(\" \"), _c('tbody', _vm._l((_vm.spotifyResult), function(data) {\n    return _c('tr', {\n      key: data\n    }, [_c('td', {\n      staticClass: \"tableItem\"\n    }, [_vm._v(_vm._s(data.name))]), _vm._v(\" \"), _c('td', {\n      staticClass: \"tableItem\"\n    }, [_c('img', {\n      attrs: {\n        \"src\": data.album.images[2].url,\n        \"alt\": \"N/A\"\n      }\n    })]), _vm._v(\" \"), _c('td', {\n      staticClass: \"tableItem\"\n    }, [_vm._v(_vm._s(data.popularity))]), _vm._v(\" \"), _c('td', {\n      staticClass: \"tableItem\"\n    }, [_c('audio', {\n      attrs: {\n        \"controls\": \"\"\n      }\n    }, [_c('source', {\n      attrs: {\n        \"src\": data.preview_url,\n        \"type\": \"audio/mpeg\"\n      }\n    })])]), _vm._v(\" \"), _c('td', {\n      staticClass: \"tableItem\"\n    }, [_c('iframe', {\n      staticClass: \"tableItem\",\n      attrs: {\n        \"src\": 'https://open.spotify.com/embed?uri=' + data.uri,\n        \"frameborder\": \"0\",\n        \"allowtransparency\": \"true\"\n      }\n    })])])\n  }))])]), _vm._v(\" \"), _c('div', {\n    attrs: {\n      \"id\": \"review\"\n    }\n  }, [_c('ul', _vm._l((_vm.reviewResult), function(data) {\n    return _c('li', {\n      key: data\n    }, [_c('div', {\n      staticClass: \"row\"\n    }, [_c('div', {\n      staticClass: \"col-sm-12\"\n    }, [_c('hr'), _vm._v(\" \"), _c('div', {\n      staticClass: \"review-block\"\n    }, [_c('div', {\n      staticClass: \"row\"\n    }, [_c('div', {\n      staticClass: \"col-sm-3\"\n    }, [_c('img', {\n      staticClass: \"img-rounded\",\n      attrs: {\n        \"src\": \"/static/img/forsene.jpg\"\n      }\n    }), _vm._v(\" \"), _c('div', {\n      staticClass: \"review-block-name\"\n    }, [_c('router-link', {\n      attrs: {\n        \"to\": {\n          name: 'profile',\n          params: {\n            name: data.username\n          }\n        }\n      }\n    }, [_vm._v(\" \" + _vm._s(data.username) + \" \")])], 1), _vm._v(\" \"), _c('div', {\n      staticClass: \"review-block-date\"\n    }, [_vm._v(_vm._s(data.created_at))])]), _vm._v(\" \"), _c('div', {\n      staticClass: \"col-sm-9\"\n    }, [_vm._m(9, true), _vm._v(\" \"), _c('div', {\n      staticClass: \"review-block-title\"\n    }, [_vm._v(_vm._s(data.title))]), _vm._v(\" \"), _c('div', {\n      staticClass: \"review-block-description\"\n    }, [_vm._v(_vm._s(data.text))])])]), _vm._v(\" \"), _c('hr')])])])])\n  }))])]), _vm._v(\" \"), _c('div', {\n    attrs: {\n      \"id\": \"artistRecommendations\"\n    }\n  })])])])\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('button', {\n    staticClass: \"btn btn-warning btn-sm\",\n    attrs: {\n      \"type\": \"button\",\n      \"aria-label\": \"Left Align\"\n    }\n  }, [_c('span', {\n    staticClass: \"glyphicon glyphicon-star\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  })])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('button', {\n    staticClass: \"btn btn-warning btn-sm\",\n    attrs: {\n      \"type\": \"button\",\n      \"aria-label\": \"Left Align\"\n    }\n  }, [_c('span', {\n    staticClass: \"glyphicon glyphicon-star\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  })])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('button', {\n    staticClass: \"btn btn-warning btn-sm\",\n    attrs: {\n      \"type\": \"button\",\n      \"aria-label\": \"Left Align\"\n    }\n  }, [_c('span', {\n    staticClass: \"glyphicon glyphicon-star\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  })])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('button', {\n    staticClass: \"btn btn-default btn-grey btn-sm\",\n    attrs: {\n      \"type\": \"button\",\n      \"aria-label\": \"Left Align\"\n    }\n  }, [_c('span', {\n    staticClass: \"glyphicon glyphicon-star\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  })])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('button', {\n    staticClass: \"btn btn-default btn-grey btn-sm\",\n    attrs: {\n      \"type\": \"button\",\n      \"aria-label\": \"Left Align\"\n    }\n  }, [_c('span', {\n    staticClass: \"glyphicon glyphicon-star\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  })])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"form-group\"\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"title\"\n    }\n  }, [_vm._v(\"Title\")]), _vm._v(\" \"), _c('textarea', {\n    staticClass: \"form-control\",\n    attrs: {\n      \"name\": \"title\",\n      \"id\": \"title\",\n      \"rows\": \"1\"\n    }\n  })])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"form-group\"\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"score\"\n    }\n  }, [_vm._v(\"Score\")]), _vm._v(\" \"), _c('select', {\n    staticClass: \"form-control\",\n    attrs: {\n      \"name\": \"score\",\n      \"id\": \"score\"\n    }\n  }, [_c('option', [_vm._v(\"1\")]), _vm._v(\" \"), _c('option', [_vm._v(\"2\")]), _vm._v(\" \"), _c('option', [_vm._v(\"3\")]), _vm._v(\" \"), _c('option', [_vm._v(\"4\")]), _vm._v(\" \"), _c('option', [_vm._v(\"5\")])])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"form-group\"\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"text\"\n    }\n  }, [_vm._v(\"Review\")]), _vm._v(\" \"), _c('textarea', {\n    staticClass: \"form-control\",\n    attrs: {\n      \"name\": \"text\",\n      \"id\": \"text\",\n      \"rows\": \"3\"\n    }\n  })])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('thead', [_c('tr', [_c('th', [_vm._v(\"Title\")]), _vm._v(\" \"), _c('th', [_vm._v(\"Album\")]), _vm._v(\" \"), _c('th', [_vm._v(\"Popularity\")]), _vm._v(\" \"), _c('th', [_vm._v(\"Sample\")]), _vm._v(\" \"), _c('th', [_vm._v(\"Spotify\")])])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"review-block-rate\"\n  }, [_c('button', {\n    staticClass: \"btn btn-warning btn-xs\",\n    attrs: {\n      \"type\": \"button\",\n      \"aria-label\": \"Left Align\"\n    }\n  }, [_c('span', {\n    staticClass: \"glyphicon glyphicon-star\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  })]), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn btn-warning btn-xs\",\n    attrs: {\n      \"type\": \"button\",\n      \"aria-label\": \"Left Align\"\n    }\n  }, [_c('span', {\n    staticClass: \"glyphicon glyphicon-star\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  })]), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn btn-warning btn-xs\",\n    attrs: {\n      \"type\": \"button\",\n      \"aria-label\": \"Left Align\"\n    }\n  }, [_c('span', {\n    staticClass: \"glyphicon glyphicon-star\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  })]), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn btn-default btn-grey btn-xs\",\n    attrs: {\n      \"type\": \"button\",\n      \"aria-label\": \"Left Align\"\n    }\n  }, [_c('span', {\n    staticClass: \"glyphicon glyphicon-star\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  })]), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn btn-default btn-grey btn-xs\",\n    attrs: {\n      \"type\": \"button\",\n      \"aria-label\": \"Left Align\"\n    }\n  }, [_c('span', {\n    staticClass: \"glyphicon glyphicon-star\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  })])])\n}]}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-8cfc9bc6\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///64\n");

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"album\"\n  }, [_c('div', {\n    attrs: {\n      \"id\": \"lyricTab\"\n    }\n  }, [_c('b-card', [_c('h2', [_vm._v(\"Song lyrics: \" + _vm._s(_vm.$route.params.title))]), _vm._v(\" \"), _c('br'), _vm._v(\" \"), _c('b-tabs', {\n    ref: \"tabs\",\n    attrs: {\n      \"small\": \"\",\n      \"card\": \"\"\n    },\n    model: {\n      value: (_vm.tabIndex),\n      callback: function($$v) {\n        _vm.tabIndex = $$v\n      },\n      expression: \"tabIndex\"\n    }\n  }, [_c('b-card', [_c('pre', [_vm._v(\"        \" + _vm._s(this.lyricData) + \"\\n        \")])]), _vm._v(\" \"), _vm._l((_vm.trackData), function(data) {\n    return _c('div', {\n      key: data\n    }, _vm._l((data.media[0].tracks), function(data2) {\n      return _c('b-tab', {\n        key: data2,\n        attrs: {\n          \"title\": data2.title\n        },\n        on: {\n          \"click\": function($event) {\n            _vm.say(data.artist, data2.title)\n          }\n        }\n      })\n    }))\n  })], 2), _vm._v(\" \"), _c('span', {\n    staticClass: \"text-muted\"\n  }, [_vm._v(\"Current Tab: \" + _vm._s(_vm.tabIndex + 1))])], 1)], 1)])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-d09653ee\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hbGJ1bS52dWU/MzJhYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQW1CLGFBQWEsMEJBQTBCO0FBQzFFO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjY1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiYWxidW1cIlxuICB9LCBbX2MoJ2RpdicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiBcImx5cmljVGFiXCJcbiAgICB9XG4gIH0sIFtfYygnYi1jYXJkJywgW19jKCdoMicsIFtfdm0uX3YoXCJTb25nIGx5cmljczogXCIgKyBfdm0uX3MoX3ZtLiRyb3V0ZS5wYXJhbXMudGl0bGUpKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygnYnInKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2ItdGFicycsIHtcbiAgICByZWY6IFwidGFic1wiLFxuICAgIGF0dHJzOiB7XG4gICAgICBcInNtYWxsXCI6IFwiXCIsXG4gICAgICBcImNhcmRcIjogXCJcIlxuICAgIH0sXG4gICAgbW9kZWw6IHtcbiAgICAgIHZhbHVlOiAoX3ZtLnRhYkluZGV4KSxcbiAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHtcbiAgICAgICAgX3ZtLnRhYkluZGV4ID0gJCR2XG4gICAgICB9LFxuICAgICAgZXhwcmVzc2lvbjogXCJ0YWJJbmRleFwiXG4gICAgfVxuICB9LCBbX2MoJ2ItY2FyZCcsIFtfYygncHJlJywgW192bS5fdihcIiAgICAgICAgXCIgKyBfdm0uX3ModGhpcy5seXJpY0RhdGEpICsgXCJcXG4gICAgICAgIFwiKV0pXSksIF92bS5fdihcIiBcIiksIF92bS5fbCgoX3ZtLnRyYWNrRGF0YSksIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICAgIGtleTogZGF0YVxuICAgIH0sIF92bS5fbCgoZGF0YS5tZWRpYVswXS50cmFja3MpLCBmdW5jdGlvbihkYXRhMikge1xuICAgICAgcmV0dXJuIF9jKCdiLXRhYicsIHtcbiAgICAgICAga2V5OiBkYXRhMixcbiAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICBcInRpdGxlXCI6IGRhdGEyLnRpdGxlXG4gICAgICAgIH0sXG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgXCJjbGlja1wiOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgIF92bS5zYXkoZGF0YS5hcnRpc3QsIGRhdGEyLnRpdGxlKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KSlcbiAgfSldLCAyKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3NwYW4nLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwidGV4dC1tdXRlZFwiXG4gIH0sIFtfdm0uX3YoXCJDdXJyZW50IFRhYjogXCIgKyBfdm0uX3MoX3ZtLnRhYkluZGV4ICsgMSkpXSldLCAxKV0sIDEpXSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbXX1cbm1vZHVsZS5leHBvcnRzLnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikucmVyZW5kZXIoXCJkYXRhLXYtZDA5NjUzZWVcIiwgbW9kdWxlLmV4cG9ydHMpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi1kMDk2NTNlZVwiLFwiaGFzU2NvcGVkXCI6dHJ1ZX0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL2FsYnVtLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///65\n");

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": \"app\"\n    }\n  }, [_c('nav', {\n    staticClass: \"navbar fixed-top navbar-expand-lg navbar-dark\"\n  }, [_c('div', {\n    staticClass: \"container\"\n  }, [_c('div', [_c('router-link', {\n    staticClass: \"navbar-brand\",\n    attrs: {\n      \"to\": '/'\n    }\n  }, [_c('img', {\n    staticClass: \"d-inline-block align-top\",\n    staticStyle: {\n      \"width\": \"auto\",\n      \"height\": \"30px\"\n    },\n    attrs: {\n      \"src\": \"/static/img/logo_and_name/logo/icon1-white.png\",\n      \"alt\": \"\"\n    }\n  }), _vm._v(\" \"), _c('img', {\n    staticClass: \"d-inline-block align-top\",\n    staticStyle: {\n      \"width\": \"auto\",\n      \"height\": \"30px\"\n    },\n    attrs: {\n      \"src\": \"/static/img/logo_and_name/name/name1-white.png\",\n      \"alt\": \"\"\n    }\n  })])], 1), _vm._v(\" \"), _vm._m(0), _vm._v(\" \"), _c('div', {\n    staticClass: \"collapse navbar-collapse\",\n    attrs: {\n      \"id\": \"navbarResponsive\"\n    }\n  }, [_c('ul', {\n    staticClass: \"navbar-nav ml-auto\"\n  }, [_c('li', {\n    staticClass: \"nav-item\"\n  }, [_c('router-link', {\n    staticClass: \"nav-link\",\n    attrs: {\n      \"to\": '/statistics'\n    }\n  }, [_vm._v(\"Statistics\")])], 1), _vm._v(\" \"), _c('li', {\n    staticClass: \"nav-item\"\n  }, [_c('router-link', {\n    staticClass: \"nav-link\",\n    attrs: {\n      \"to\": '/artist/Metallica/65f4f0c5-ef9e-490c-aee3-909e7ae6b2ab/2ye2Wgw4gimLv2eAKyk1NB'\n    }\n  }, [_vm._v(\"Artist\")])], 1), _vm._v(\" \"), (this.username != null) ? _c('li', {\n    staticClass: \"nav-item\"\n  }, [_c('router-link', {\n    staticClass: \"nav-link owo\",\n    attrs: {\n      \"to\": '/profile/' + _vm.username\n    }\n  }, [_vm._v(\"Profile \" + _vm._s(_vm.username))])], 1) : _vm._e(), _vm._v(\" \"), (this.username != null) ? _c('li', {\n    staticClass: \"nav-item\"\n  }, [_c('a', {\n    staticClass: \"nav-link\",\n    attrs: {\n      \"href\": \"/logout\"\n    }\n  }, [_vm._v(\"Logout!\")])]) : _c('li', {\n    staticClass: \"nav-item owo\"\n  }, [_c('router-link', {\n    staticClass: \"nav-link\",\n    attrs: {\n      \"to\": '/login'\n    }\n  }, [_vm._v(\"Login\")])], 1)])])])]), _vm._v(\" \"), _c('div', {\n    attrs: {\n      \"id\": \"render\"\n    }\n  }, [_c('router-view')], 1)])\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('button', {\n    staticClass: \"navbar-toggler\",\n    attrs: {\n      \"type\": \"button\",\n      \"data-toggle\": \"collapse\",\n      \"data-target\": \"#navbarResponsive\",\n      \"aria-controls\": \"navbarResponsive\",\n      \"aria-expanded\": \"false\",\n      \"aria-label\": \"Toggle navigation\"\n    }\n  }, [_c('span', {\n    staticClass: \"navbar-toggler-icon\"\n  })])\n}]}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-f65f1004\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT8xNjljIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMsK0JBQStCLGFBQWEsMEJBQTBCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI2Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwiYXBwXCJcbiAgICB9XG4gIH0sIFtfYygnbmF2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcIm5hdmJhciBmaXhlZC10b3AgbmF2YmFyLWV4cGFuZC1sZyBuYXZiYXItZGFya1wiXG4gIH0sIFtfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcImNvbnRhaW5lclwiXG4gIH0sIFtfYygnZGl2JywgW19jKCdyb3V0ZXItbGluaycsIHtcbiAgICBzdGF0aWNDbGFzczogXCJuYXZiYXItYnJhbmRcIixcbiAgICBhdHRyczoge1xuICAgICAgXCJ0b1wiOiAnLydcbiAgICB9XG4gIH0sIFtfYygnaW1nJywge1xuICAgIHN0YXRpY0NsYXNzOiBcImQtaW5saW5lLWJsb2NrIGFsaWduLXRvcFwiLFxuICAgIHN0YXRpY1N0eWxlOiB7XG4gICAgICBcIndpZHRoXCI6IFwiYXV0b1wiLFxuICAgICAgXCJoZWlnaHRcIjogXCIzMHB4XCJcbiAgICB9LFxuICAgIGF0dHJzOiB7XG4gICAgICBcInNyY1wiOiBcIi9zdGF0aWMvaW1nL2xvZ29fYW5kX25hbWUvbG9nby9pY29uMS13aGl0ZS5wbmdcIixcbiAgICAgIFwiYWx0XCI6IFwiXCJcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCIgXCIpLCBfYygnaW1nJywge1xuICAgIHN0YXRpY0NsYXNzOiBcImQtaW5saW5lLWJsb2NrIGFsaWduLXRvcFwiLFxuICAgIHN0YXRpY1N0eWxlOiB7XG4gICAgICBcIndpZHRoXCI6IFwiYXV0b1wiLFxuICAgICAgXCJoZWlnaHRcIjogXCIzMHB4XCJcbiAgICB9LFxuICAgIGF0dHJzOiB7XG4gICAgICBcInNyY1wiOiBcIi9zdGF0aWMvaW1nL2xvZ29fYW5kX25hbWUvbmFtZS9uYW1lMS13aGl0ZS5wbmdcIixcbiAgICAgIFwiYWx0XCI6IFwiXCJcbiAgICB9XG4gIH0pXSldLCAxKSwgX3ZtLl92KFwiIFwiKSwgX3ZtLl9tKDApLCBfdm0uX3YoXCIgXCIpLCBfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcImNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZVwiLFxuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwibmF2YmFyUmVzcG9uc2l2ZVwiXG4gICAgfVxuICB9LCBbX2MoJ3VsJywge1xuICAgIHN0YXRpY0NsYXNzOiBcIm5hdmJhci1uYXYgbWwtYXV0b1wiXG4gIH0sIFtfYygnbGknLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwibmF2LWl0ZW1cIlxuICB9LCBbX2MoJ3JvdXRlci1saW5rJywge1xuICAgIHN0YXRpY0NsYXNzOiBcIm5hdi1saW5rXCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwidG9cIjogJy9zdGF0aXN0aWNzJ1xuICAgIH1cbiAgfSwgW192bS5fdihcIlN0YXRpc3RpY3NcIildKV0sIDEpLCBfdm0uX3YoXCIgXCIpLCBfYygnbGknLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwibmF2LWl0ZW1cIlxuICB9LCBbX2MoJ3JvdXRlci1saW5rJywge1xuICAgIHN0YXRpY0NsYXNzOiBcIm5hdi1saW5rXCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwidG9cIjogJy9hcnRpc3QvTWV0YWxsaWNhLzY1ZjRmMGM1LWVmOWUtNDkwYy1hZWUzLTkwOWU3YWU2YjJhYi8yeWUyV2d3NGdpbUx2MmVBS3lrMU5CJ1xuICAgIH1cbiAgfSwgW192bS5fdihcIkFydGlzdFwiKV0pXSwgMSksIF92bS5fdihcIiBcIiksICh0aGlzLnVzZXJuYW1lICE9IG51bGwpID8gX2MoJ2xpJywge1xuICAgIHN0YXRpY0NsYXNzOiBcIm5hdi1pdGVtXCJcbiAgfSwgW19jKCdyb3V0ZXItbGluaycsIHtcbiAgICBzdGF0aWNDbGFzczogXCJuYXYtbGluayBvd29cIixcbiAgICBhdHRyczoge1xuICAgICAgXCJ0b1wiOiAnL3Byb2ZpbGUvJyArIF92bS51c2VybmFtZVxuICAgIH1cbiAgfSwgW192bS5fdihcIlByb2ZpbGUgXCIgKyBfdm0uX3MoX3ZtLnVzZXJuYW1lKSldKV0sIDEpIDogX3ZtLl9lKCksIF92bS5fdihcIiBcIiksICh0aGlzLnVzZXJuYW1lICE9IG51bGwpID8gX2MoJ2xpJywge1xuICAgIHN0YXRpY0NsYXNzOiBcIm5hdi1pdGVtXCJcbiAgfSwgW19jKCdhJywge1xuICAgIHN0YXRpY0NsYXNzOiBcIm5hdi1saW5rXCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaHJlZlwiOiBcIi9sb2dvdXRcIlxuICAgIH1cbiAgfSwgW192bS5fdihcIkxvZ291dCFcIildKV0pIDogX2MoJ2xpJywge1xuICAgIHN0YXRpY0NsYXNzOiBcIm5hdi1pdGVtIG93b1wiXG4gIH0sIFtfYygncm91dGVyLWxpbmsnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwibmF2LWxpbmtcIixcbiAgICBhdHRyczoge1xuICAgICAgXCJ0b1wiOiAnL2xvZ2luJ1xuICAgIH1cbiAgfSwgW192bS5fdihcIkxvZ2luXCIpXSldLCAxKV0pXSldKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygnZGl2Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwicmVuZGVyXCJcbiAgICB9XG4gIH0sIFtfYygncm91dGVyLXZpZXcnKV0sIDEpXSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnYnV0dG9uJywge1xuICAgIHN0YXRpY0NsYXNzOiBcIm5hdmJhci10b2dnbGVyXCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwidHlwZVwiOiBcImJ1dHRvblwiLFxuICAgICAgXCJkYXRhLXRvZ2dsZVwiOiBcImNvbGxhcHNlXCIsXG4gICAgICBcImRhdGEtdGFyZ2V0XCI6IFwiI25hdmJhclJlc3BvbnNpdmVcIixcbiAgICAgIFwiYXJpYS1jb250cm9sc1wiOiBcIm5hdmJhclJlc3BvbnNpdmVcIixcbiAgICAgIFwiYXJpYS1leHBhbmRlZFwiOiBcImZhbHNlXCIsXG4gICAgICBcImFyaWEtbGFiZWxcIjogXCJUb2dnbGUgbmF2aWdhdGlvblwiXG4gICAgfVxuICB9LCBbX2MoJ3NwYW4nLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwibmF2YmFyLXRvZ2dsZXItaWNvblwiXG4gIH0pXSlcbn1dfVxubW9kdWxlLmV4cG9ydHMucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKS5yZXJlbmRlcihcImRhdGEtdi1mNjVmMTAwNFwiLCBtb2R1bGUuZXhwb3J0cylcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LWY2NWYxMDA0XCIsXCJoYXNTY29wZWRcIjpmYWxzZX0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9BcHAudnVlXG4vLyBtb2R1bGUgaWQgPSA2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///66\n");

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(50);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(4)(\"b807778c\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-113ac87a\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./profile.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-113ac87a\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./profile.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9wcm9maWxlLnZ1ZT9kZTY3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0Esb0NBQXVOO0FBQ3ZOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvSUFBb0ksa0ZBQWtGO0FBQ3ROLDZJQUE2SSxrRkFBa0Y7QUFDL047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVUsRUFBRTtBQUM1QyIsImZpbGUiOiI2Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0xMTNhYzg3YVxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9wcm9maWxlLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpKFwiYjgwNzc3OGNcIiwgY29udGVudCwgZmFsc2UpO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMTEzYWM4N2FcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vcHJvZmlsZS52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMTEzYWM4N2FcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vcHJvZmlsZS52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtc3R5bGUtbG9hZGVyIS4vfi9jc3MtbG9hZGVyP3NvdXJjZU1hcCEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtMTEzYWM4N2FcIixcInNjb3BlZFwiOnRydWUsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9wcm9maWxlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///67\n");

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(51);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(4)(\"0954892c\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-225c3a03\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./login.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-225c3a03\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./login.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9sb2dpbi52dWU/YTM4NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLG9DQUF1TjtBQUN2TjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0lBQW9JLGtGQUFrRjtBQUN0Tiw2SUFBNkksa0ZBQWtGO0FBQy9OO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLGdDQUFnQyxVQUFVLEVBQUU7QUFDNUMiLCJmaWxlIjoiNjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMjI1YzNhMDNcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vbG9naW4udnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCIwOTU0ODkyY1wiLCBjb250ZW50LCBmYWxzZSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0yMjVjM2EwM1xcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9sb2dpbi52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMjI1YzNhMDNcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vbG9naW4udnVlXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLXN0eWxlLWxvYWRlciEuL34vY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTIyNWMzYTAzXCIsXCJzY29wZWRcIjp0cnVlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvbG9naW4udnVlXG4vLyBtb2R1bGUgaWQgPSA2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///68\n");

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(52);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(4)(\"0c14c544\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-27d1b20e\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./statistics.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-27d1b20e\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./statistics.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zdGF0aXN0aWNzLnZ1ZT9kNzY2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0Esb0NBQXVOO0FBQ3ZOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvSUFBb0ksa0ZBQWtGO0FBQ3ROLDZJQUE2SSxrRkFBa0Y7QUFDL047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVUsRUFBRTtBQUM1QyIsImZpbGUiOiI2OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0yN2QxYjIwZVxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zdGF0aXN0aWNzLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpKFwiMGMxNGM1NDRcIiwgY29udGVudCwgZmFsc2UpO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMjdkMWIyMGVcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3RhdGlzdGljcy52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMjdkMWIyMGVcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3RhdGlzdGljcy52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtc3R5bGUtbG9hZGVyIS4vfi9jc3MtbG9hZGVyP3NvdXJjZU1hcCEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtMjdkMWIyMGVcIixcInNjb3BlZFwiOnRydWUsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9zdGF0aXN0aWNzLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///69\n");

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(53);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(4)(\"5c124599\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-48d3fbf9\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./register.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-48d3fbf9\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./register.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9yZWdpc3Rlci52dWU/ODgzNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLG9DQUF1TjtBQUN2TjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0lBQW9JLGtGQUFrRjtBQUN0Tiw2SUFBNkksa0ZBQWtGO0FBQy9OO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLGdDQUFnQyxVQUFVLEVBQUU7QUFDNUMiLCJmaWxlIjoiNzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNDhkM2ZiZjlcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vcmVnaXN0ZXIudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCI1YzEyNDU5OVwiLCBjb250ZW50LCBmYWxzZSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi00OGQzZmJmOVxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9yZWdpc3Rlci52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNDhkM2ZiZjlcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vcmVnaXN0ZXIudnVlXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLXN0eWxlLWxvYWRlciEuL34vY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTQ4ZDNmYmY5XCIsXCJzY29wZWRcIjp0cnVlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvcmVnaXN0ZXIudnVlXG4vLyBtb2R1bGUgaWQgPSA3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///70\n");

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(54);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(4)(\"96306f16\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-699d1ffe\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./search.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-699d1ffe\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./search.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zZWFyY2gudnVlPzk0NGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxvQ0FBd047QUFDeE47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9JQUFvSSxtRkFBbUY7QUFDdk4sNklBQTZJLG1GQUFtRjtBQUNoTztBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDIiwiZmlsZSI6IjcxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTY5OWQxZmZlXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zZWFyY2gudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCI5NjMwNmYxNlwiLCBjb250ZW50LCBmYWxzZSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi02OTlkMWZmZVxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc2VhcmNoLnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi02OTlkMWZmZVxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc2VhcmNoLnZ1ZVwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1zdHlsZS1sb2FkZXIhLi9+L2Nzcy1sb2FkZXI/c291cmNlTWFwIS4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi02OTlkMWZmZVwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9zZWFyY2gudnVlXG4vLyBtb2R1bGUgaWQgPSA3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///71\n");

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(55);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(4)(\"7106e373\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-8cfc9bc6\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./artist.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-8cfc9bc6\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./artist.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hcnRpc3QudnVlP2FlNDUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxvQ0FBdU47QUFDdk47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9JQUFvSSxrRkFBa0Y7QUFDdE4sNklBQTZJLGtGQUFrRjtBQUMvTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDIiwiZmlsZSI6IjcyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LThjZmM5YmM2XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL2FydGlzdC52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKShcIjcxMDZlMzczXCIsIGNvbnRlbnQsIGZhbHNlKTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LThjZmM5YmM2XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL2FydGlzdC52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtOGNmYzliYzZcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vYXJ0aXN0LnZ1ZVwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1zdHlsZS1sb2FkZXIhLi9+L2Nzcy1sb2FkZXI/c291cmNlTWFwIS4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi04Y2ZjOWJjNlwiLFwic2NvcGVkXCI6dHJ1ZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL2FydGlzdC52dWVcbi8vIG1vZHVsZSBpZCA9IDcyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///72\n");

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(56);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(4)(\"79d77b24\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-d09653ee\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./album.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-d09653ee\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./album.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hbGJ1bS52dWU/ZjIzZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLG9DQUF1TjtBQUN2TjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0lBQW9JLGtGQUFrRjtBQUN0Tiw2SUFBNkksa0ZBQWtGO0FBQy9OO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLGdDQUFnQyxVQUFVLEVBQUU7QUFDNUMiLCJmaWxlIjoiNzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZDA5NjUzZWVcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vYWxidW0udnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCI3OWQ3N2IyNFwiLCBjb250ZW50LCBmYWxzZSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi1kMDk2NTNlZVxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9hbGJ1bS52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZDA5NjUzZWVcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vYWxidW0udnVlXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLXN0eWxlLWxvYWRlciEuL34vY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LWQwOTY1M2VlXCIsXCJzY29wZWRcIjp0cnVlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvYWxidW0udnVlXG4vLyBtb2R1bGUgaWQgPSA3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///73\n");

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(57);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(4)(\"9e179122\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../node_modules/css-loader/index.js?sourceMap!../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-f65f1004\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./App.vue\", function() {\n     var newContent = require(\"!!../node_modules/css-loader/index.js?sourceMap!../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-f65f1004\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./App.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT9iZDRkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0Esb0NBQWtOO0FBQ2xOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4SEFBOEgsbUZBQW1GO0FBQ2pOLHVJQUF1SSxtRkFBbUY7QUFDMU47QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVUsRUFBRTtBQUM1QyIsImZpbGUiOiI3NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi1mNjVmMTAwNFxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vQXBwLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpKFwiOWUxNzkxMjJcIiwgY29udGVudCwgZmFsc2UpO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZjY1ZjEwMDRcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0FwcC52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZjY1ZjEwMDRcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0FwcC52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtc3R5bGUtbG9hZGVyIS4vfi9jc3MtbG9hZGVyP3NvdXJjZU1hcCEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtZjY1ZjEwMDRcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL0FwcC52dWVcbi8vIG1vZHVsZSBpZCA9IDc0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///74\n");

/***/ }),
/* 75 */
/***/ (function(module, exports) {

eval("/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qcz9lNmFjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsd0JBQXdCO0FBQzNELEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ijc1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUcmFuc2xhdGVzIHRoZSBsaXN0IGZvcm1hdCBwcm9kdWNlZCBieSBjc3MtbG9hZGVyIGludG8gc29tZXRoaW5nXG4gKiBlYXNpZXIgdG8gbWFuaXB1bGF0ZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBsaXN0VG9TdHlsZXMgKHBhcmVudElkLCBsaXN0KSB7XG4gIHZhciBzdHlsZXMgPSBbXVxuICB2YXIgbmV3U3R5bGVzID0ge31cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldXG4gICAgdmFyIGlkID0gaXRlbVswXVxuICAgIHZhciBjc3MgPSBpdGVtWzFdXG4gICAgdmFyIG1lZGlhID0gaXRlbVsyXVxuICAgIHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdXG4gICAgdmFyIHBhcnQgPSB7XG4gICAgICBpZDogcGFyZW50SWQgKyAnOicgKyBpLFxuICAgICAgY3NzOiBjc3MsXG4gICAgICBtZWRpYTogbWVkaWEsXG4gICAgICBzb3VyY2VNYXA6IHNvdXJjZU1hcFxuICAgIH1cbiAgICBpZiAoIW5ld1N0eWxlc1tpZF0pIHtcbiAgICAgIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7IGlkOiBpZCwgcGFydHM6IFtwYXJ0XSB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0eWxlc1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///75\n");

/***/ })
/******/ ]);